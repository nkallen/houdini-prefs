{"body": [{"indent": 0, "text": ["Operator Type Properties window"], "type": "title", "extent": [0, 36], "level": 0}, {"indent": 0, "type": "summary", "extent": [87, 202], "text": ["The type properties window lets you edit the metadata and parameter interface of a digital asset node type."]}, {"body": [{"indent": 0, "type": "para", "extent": [217, 332], "text": ["Several different collections of information contribute to the overall definition of a ", {"text": ["digital asset"], "fullpath": "/assets/index", "scheme": null, "type": "link", "value": "/assets/"}, ":"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [332, 376], "text": ["The nodes inside the asset\u2019s subnetwork."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [376, 412], "text": ["The asset\u2019s parameter interface."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [412, 475], "text": ["Metadata such as the asset\u2019s human-readable label and icon."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [475, 531], "text": ["Extra files embedded in the asset, such as textures."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [531, 596], "text": ["The Python implementation of the asset\u2019s custom viewer state."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [596, 806], "text": ["Except for the subnetwork contents, you edit all the rest using this window. As you develop an asset, you\u2019ll open and use this window a lot, especially as you build and refine the asset\u2019s parameter interface."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [812, 1203], "text": ["Some of the information you set up when you created the asset, such as its human-readable label and the number of inputs, can be changed in this window. However, the internal name you set when you create the asset (which may include a namespace and version) becomes intrinsic to the asset and cannot be changed. If you make a mistake or want to change it, you must create a new asset."]}], "indent": 0, "role": "item", "type": "note", "extent": [806, 812]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [202, 217], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [1246, 1519], "text": ["You can use a similar interface to add ", {"text": ["spare parameters"], "fullpath": "/network/spare", "scheme": null, "type": "link", "value": "/network/spare"}, " and/or ", {"text": ["render properties"], "fullpath": "/props/index", "scheme": null, "type": "link", "value": "/props/"}, " to a single node. It\u2019s important to keep the difference between editing an asset\u2019s ", {"text": ["node type"], "type": "em"}, ", as in this window, and adding spare parameters to a ", {"text": ["single node"], "type": "em"}, "."]}, {"indent": 0, "type": "para", "extent": [1519, 1767], "text": [{"text": ["Spare parameters"], "type": "em"}, " are \"extra\" parameters added to a single node instance, which are not part of the node\u2019s inherent parameter interface. You can add spare parameters to both assets and \"factory\" nodes. They are useful for one-off customizations."]}, {"indent": 0, "type": "para", "extent": [1767, 2010], "text": [{"text": ["Render properties"], "type": "em"}, " are a special type of spare parameter that convey information about the node (object, camera, material) to the renderer. Most render-related nodes are created with a set of render properties that you can ", {"text": ["add to"], "fullpath": "/props/index", "scheme": null, "type": "link", "value": "/props/"}, "."]}, {"indent": 0, "type": "para", "extent": [2010, 2309], "text": ["If you are trying to add an extra parameter to a single node, you want a ", {"text": ["spare parameter"], "fullpath": "/network/spare", "scheme": null, "type": "link", "value": "/network/spare"}, ". If you are customizing rendering, you want a ", {"text": ["render property"], "fullpath": "/props/index", "scheme": null, "type": "link", "value": "/props/"}, ". If you want to change the base parameter interface shared by all nodes of a certain asset type, you want this window."]}], "indent": 0, "level": 2, "text": ["Type properties vs. spare parameters"], "extent": [1203, 1246], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2368, 2442], "text": ["Right-click an instance of the asset and choose ", {"text": ["Type Properties"], "type": "ui"}, "."]}, {"indent": 4, "text": [" or "], "type": "sep", "extent": [2442, 2457], "level": 3}, {"indent": 4, "type": "para", "extent": [2457, 2590], "text": ["In the Asset Manager window (", {"text": ["Assets \u25b8 Asset Manager"], "type": "ui"}, "), right click the asset definition and choose ", {"text": ["Type Properties"], "type": "ui"}, "."]}, {"indent": 4, "type": "para", "extent": [2590, 2789], "text": ["After you make changes in the window, you can apply them to the asset but keep the type properties window open by clicking ", {"text": ["Apply"], "type": "ui"}, ", or apply them and close the window by clicking ", {"text": ["Accept"], "type": "ui"}, "."]}], "indent": 0, "text": [" Edit the type properties of an asset"], "role": "item", "extent": [2322, 2368], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}], "indent": 0, "level": 2, "text": ["How to"], "extent": [2309, 2322], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2821, 2971], "text": ["The human-readable label for the node type. This is what Houdini shows when the node appears in the user interface, such as in the ", {"keys": ["Tab"], "text": null, "type": "keys"}, " menu."]}], "indent": 0, "type": "dt", "extent": [2813, 2821], "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "extent": [2996, 3082], "text": ["A reference to an icon file (SVG or image), in one of the following formats:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [3082, 3167], "text": ["An ", {"text": ["opdef:"], "type": "code"}, " path to an embedded file in the asset\u2019s ", {"fragment": "#extra", "text": ["extra files"], "value": "#extra", "fullpath": "/ref/windows/optype#extra", "scheme": null, "type": "link"}, "."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [3167, 3229], "text": ["A file path or URL for a file containing the icon."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [3229, 3319], "text": ["The name of a built-in Houdini icon. For example, ", {"text": ["OBJ_geo"], "type": "code"}, " or ", {"text": ["SHELF_candle"], "type": "code"}, "."]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [3319, 3528], "text": ["Click the chooser button next to the field to browse for an icon. You can browse for a file on disk, or click ", {"text": ["opdef:/"], "type": "code"}, " in the chooser to browse embedded files, or ", {"text": ["hicon:/"], "type": "code"}, " to browse built-in icons."]}, {"indent": 4, "type": "para", "extent": [3528, 3785], "text": ["If you choose a file on disk and ", {"text": ["Embed icon in operator"], "type": "ui"}, " is on, when you click ", {"text": ["Accept"], "type": "ui"}, " Houdini will automatically copy the file into the asset\u2019s ", {"fragment": "#extra", "text": ["extra files"], "value": "#extra", "fullpath": "/ref/windows/optype#extra", "scheme": null, "type": "link"}, " and replace the ", {"text": ["Icon"], "type": "ui"}, " field with an ", {"text": ["opdef:"], "type": "code"}, " reference to the embedded icon."]}], "indent": 0, "text": ["Icon"], "attrs": {"id": "icon"}, "extent": [2971, 2977], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [3794, 4159], "text": ["You can use this field with \"upgrade handlers\" to provide scripts to update old (but forward-compatible) version of a node when a new version is available.  Do not confuse this field with the ", {"text": ["asset version"], "fullpath": "/assets/namespaces", "scheme": null, "type": "link", "value": "/assets/namespaces"}, " which is part of the asset\u2019s internal name. See ", {"text": ["the two types of asset versioning"], "fullpath": "/assets/versioning_systems", "scheme": null, "type": "link", "value": "/assets/versioning_systems"}, " for more information."]}], "indent": 0, "type": "dt", "extent": [3785, 3794], "text": ["Version"]}, {"body": [{"indent": 4, "type": "para", "extent": [4175, 4388], "text": ["The number of inputs that must be connected for this node to work. The node may have more inputs than this (set by ", {"text": ["Maximum outputs"], "type": "ui"}, " below), but if the first N inputs are not connected the node will error."]}], "indent": 0, "type": "dt", "extent": [4159, 4175], "text": ["Minimum Inputs"]}, {"body": [{"indent": 4, "type": "para", "extent": [4404, 4648], "text": ["The number of inputs the node has. Note that Houdini does not check that this number is greater than or equal to ", {"text": ["Minimum inputs"], "type": "ui"}, " \u2014 You can have a node with no inputs but a minimum input count of 1, meaning it will ", {"text": ["always"], "type": "em"}, " error."]}, {"indent": 4, "type": "para", "extent": [4648, 4738], "text": ["Use controls on the ", {"text": ["Input/Output"], "type": "ui"}, " tab to give the input(s) human-readable labels."]}], "indent": 0, "type": "dt", "extent": [4388, 4404], "text": ["Maximum Inputs"]}, {"body": [{"indent": 4, "type": "para", "extent": [4755, 4868], "text": ["If the node category (for example, VOP) allows multiple outputs, this is number of outputs on the node."]}, {"indent": 4, "type": "para", "extent": [4868, 4960], "text": ["Use controls on the ", {"text": ["Input/Output"], "type": "ui"}, " tab to give the output(s) human-readable labels."]}], "indent": 0, "type": "dt", "extent": [4738, 4755], "text": ["Maximum Outputs"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Basic tab"], "extent": [2789, 2813], "container": true, "type": "h", "id": "basic"}, {"body": [{"indent": 0, "type": "para", "extent": [4989, 5147], "text": ["A significant percentage of the work on an asset will involve editing the asset\u2019s parameter interface, which is how users will control the asset\u2019s options."]}, {"indent": 0, "type": "para", "extent": [5147, 5205], "text": ["There are several ways to build the parameter interface."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [5272, 5577], "text": ["When you \"promote\" a parameter, Houdini creates a copy of the parameter on the asset, and replaces the original parameter\u2019s value with an expression that references the value of the parameter on the asset. This means the parameter on the asset drives the value of the corresponding parameter inside."]}, {"indent": 4, "type": "para", "extent": [5577, 6113], "text": ["For example, you might have an asset that scatters points on a surface and copies boxes onto the points. Inside the asset you, the author, will have a network with a ", {"text": ["Scatter node"], "fullpath": "/nodes/sop/scatter", "scheme": "Node", "type": "link", "value": "/nodes/sop/scatter"}, " and a ", {"text": ["Box node"], "fullpath": "/nodes/sop/box", "scheme": "Node", "type": "link", "value": "/nodes/sop/box"}, ", but the user will see the asset as a single node, and won\u2019t see or interact with its contents. You will want the user to be able to control the number of points and the size of the boxes from the asset\u2019s interface, so you would ", {"text": ["promote"], "type": "em"}, " those specific parameters from the nodes inside onto the asset."]}], "indent": 0, "text": ["Many parameters will be ", {"text": ["promoted"], "type": "em"}, " from nodes inside the asset."], "extent": [5205, 5272], "blevel": 2, "type": "bullet"}, {"body": [{"indent": 4, "type": "para", "extent": [6279, 6539], "text": ["For example, you might want one \"Size\" float parameter on the asset to drive all three of a contained node\u2019s Scale X, Scale Y, and Scale Z values. You could create a float parameter on the asset and manually set up references to it on the contained node."]}], "indent": 0, "text": ["You can create new parameters on the asset. You can set up references for these parameters manually, or use callbacks/scripting to make the parameters functional."], "extent": [6113, 6279], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [6539, 6795], "text": ["If you are building a material, ", {"text": ["Material assets"], "fullpath": "/shade/build", "scheme": null, "type": "link", "value": "/shade/build"}, " automatically create parameters corresponding to any ", {"text": ["Parameter VOPs"], "fullpath": "/nodes/vop/parameter", "scheme": "Node", "type": "link", "value": "/nodes/vop/parameter"}, " inside the asset. See ", {"text": ["building a material"], "fullpath": "/shade/build", "scheme": null, "type": "link", "value": "/shade/build"}, " for more information about material assets."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [6795, 6848], "text": ["The ", {"text": ["Parameters"], "type": "ui"}, " tab is divided into three panes:"]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [6867, 7030], "text": ["This contains tabs representing different sources for parameters you can add to your asset. The ", {"text": ["By type"], "type": "ui"}, " tab lets you create new parameters from scratch. "]}], "indent": 0, "type": "dt", "extent": [6848, 6867], "text": ["Create Parameters"]}, {"body": [{"indent": 4, "type": "para", "extent": [7051, 7243], "text": ["This represents the node\u2019s current parameter interface. You can drag in parameters from the left pane or the parameter editor to add to it, or drag items within the tree to rearrange it."]}], "indent": 0, "type": "dt", "extent": [7030, 7051], "text": ["Existing Parameters"]}, {"body": [{"indent": 4, "type": "para", "extent": [7266, 7360], "text": ["When a parameter is selected in the middle pane, you can edit its settings in this pane."]}], "indent": 0, "type": "dt", "extent": [7243, 7266], "text": ["Parameter Description"]}], "container": true, "type": "dt_group"}, {"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [7395, 7472], "text": ["Open the type properties window and click the ", {"text": ["Parameters"], "type": "ui"}, " tab."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [7472, 7562], "text": ["Select the node with the parameter you want to promote in the parameter editor"]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [7562, 7683], "text": ["Drag the parameter from the parameter editor onto the ", {"text": ["Existing parameters"], "type": "ui"}, " tree in the type properties window."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Promote a single parameter"], "role": "item", "extent": [7360, 7395], "type": "task"}, {"body": [{"indent": 4, "type": "para", "extent": [7725, 7856], "text": ["Alternatively to dragging-and-dropping parameters, you can browse for a parameter from within the type properties window."]}, {"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [7856, 7957], "text": ["On the ", {"text": ["Parameters"], "type": "ui"}, " tab, under ", {"text": ["Create Parameters"], "type": "ui"}, ", click the ", {"text": ["From nodes"], "type": "ui"}, " sub-tab."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [7957, 8121], "text": ["The tree control shows all nodes in the current scene, and inside each node, all of that node\u2019s parameters. Browse to the parameter you want to promote."]}, {"body": [{"indent": 8, "type": "para", "extent": [8230, 8252], "text": [{"text": ["or"], "type": "em"}]}, {"indent": 8, "type": "para", "extent": [8252, 8388], "text": ["Select the parameter under ", {"text": ["From nodes"], "type": "ui"}, " and click the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/move_to_right", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/move_to_right"}, " Move button to move it over."]}, {"indent": 8, "type": "para", "extent": [8388, 8410], "text": [{"text": ["or"], "type": "em"}]}, {"indent": 8, "type": "para", "extent": [8410, 8502], "text": ["Right-click the parameter under ", {"text": ["From nodes"], "type": "ui"}, " and choose ", {"text": ["Install parameters"], "type": "ui"}, ". "]}], "indent": 4, "text": ["Drag the parameter from the tree on the left onto the ", {"text": ["Existing Parameters"], "type": "ui"}, " tree in the middle."], "extent": [8121, 8230], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Browse for a parameter to promote"], "role": "item", "extent": [7683, 7725], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [8542, 8609], "text": ["Under ", {"text": ["Create parameters"], "type": "ui"}, ", click the ", {"text": ["By type"], "type": "ui"}, " tab."]}, {"body": [{"indent": 8, "type": "para", "extent": [8746, 8768], "text": [{"text": ["or"], "type": "em"}]}, {"indent": 8, "type": "para", "extent": [8768, 8893], "text": ["Select the parameter under ", {"text": ["By type"], "type": "ui"}, " and click the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/move_to_right", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/move_to_right"}, " Move button to move it over."]}], "indent": 4, "text": ["Find the type of parameter you want to add and drag it into the ", {"text": ["Existing parameters"], "type": "ui"}, " to add it to the parameter interface."], "extent": [8609, 8746], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Create a parameter from scratch"], "role": "item", "extent": [8502, 8542], "type": "task"}, {"body": [{"indent": 4, "type": "para", "extent": [8925, 9062], "text": ["A button parameter lets you add a button to a node\u2019s parameter interface that runs a Python script when the user clicks the button."]}, {"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [9062, 9129], "text": ["Under ", {"text": ["Create parameters"], "type": "ui"}, ", click the ", {"text": ["By type"], "type": "ui"}, " tab."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [9129, 9218], "text": ["Drag a Button from the ", {"text": ["By Type"], "type": "ui"}, " tab into the ", {"text": ["Existing Parameters"], "type": "ui"}, " tree."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "extent": [9352, 9454], "text": ["You can specify a ", {"text": ["Button icon"], "type": "ui"}, " to make an icon button instead of a text button."]}], "container": true, "type": "bullet_group"}], "indent": 4, "text": ["Under ", {"text": ["Parameter description"], "type": "ui"}, ", on the ", {"text": ["Parameter"], "type": "ui"}, " sub-tab, set up the parameter\u2019s controls such as its name and label."], "extent": [9218, 9352], "blevel": 6, "type": "ord"}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [9454, 9553], "text": ["Click the icon menu to the right of the ", {"text": ["Callback script"], "type": "ui"}, " field and set it to Python."]}], "container": true, "type": "ord_group"}, {"body": [{"body": [{"lang": "python", "indent": 8, "type": "pre", "extent": [9769, 9850], "text": ["\n        hou.ui.displayMessage(\"Hello!\")\n        "]}], "indent": 4, "text": ["If you can write the Python callback code as a single line, you can type it directly into the ", {"text": ["Callback script"], "type": "ui"}, " field. For example, this callback simply displays a message when the user clicks a button:"], "extent": [9553, 9769], "blevel": 6, "type": "bullet"}, {"body": [{"indent": 8, "type": "para", "extent": [10100, 10260], "text": ["Then, write code in the ", {"text": ["Callback script"], "type": "ui"}, " field to call that function. For example, to call a function in the current asset\u2019s Python module:"]}, {"lang": null, "indent": 8, "type": "pre", "extent": [10260, 10333], "text": ["\n        kwargs[\"node\"].hdaModule().my_function()\n        "]}, {"indent": 8, "type": "para", "extent": [10333, 10433], "text": ["(See ", {"fragment": "#call", "text": ["how to call Python code in various locations"], "value": "/hom/locations#call", "fullpath": "/hom/locations#call", "scheme": null, "type": "link"}, ".)"]}, {"indent": 8, "type": "para", "extent": [10433, 10657], "text": ["If the function needs information such as the current node and parameter objects, you can pass it the entire ", {"text": ["kwargs"], "type": "code"}, " dictionary, or just the information from the dictionary the function needs. For example:"]}, {"lang": null, "indent": 8, "type": "pre", "extent": [10657, 10760], "text": ["\n        kwargs[\"node\"].hdaModule().my_function(kwargs[\"node\"], kwargs[\"parm\"])\n        "]}], "indent": 4, "text": ["Otherwise, write the callback function ", {"text": ["somewhere else"], "fullpath": "/hom/locations", "scheme": null, "type": "link", "value": "/hom/locations"}, ", such as ", {"fragment": "#disk", "text": ["on disk"], "value": "/hom/locations#disk", "fullpath": "/hom/locations#disk", "scheme": null, "type": "link"}, ", ", {"fragment": "#asset_module", "text": ["in the node\u2019s Python module"], "value": "/hom/locations#asset_module", "fullpath": "/hom/locations#asset_module", "scheme": null, "type": "link"}, ", or the ", {"fragment": "#session_module", "text": ["scene file\u2019s session module"], "value": "/hom/locations#session_module", "fullpath": "/hom/locations#session_module", "scheme": null, "type": "link"}, "."], "extent": [9850, 10100], "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [10760, 10885], "text": ["See ", {"fragment": "#parameter_callback_scripts", "text": ["parameter callback script"], "value": "/hom/locations#parameter_callback_scripts", "fullpath": "/hom/locations#parameter_callback_scripts", "scheme": null, "type": "link"}, " for more information about ", {"text": ["kwargs"], "type": "code"}, "."]}], "indent": 0, "text": [" Make a button parameter"], "role": "item", "extent": [8893, 8925], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [10922, 10989], "text": ["Under ", {"text": ["Create parameters"], "type": "ui"}, ", click the ", {"text": ["By type"], "type": "ui"}, " tab."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [10989, 11164], "text": ["Add either a String or Integer parameter (see how to create a parameter from scratch above). The parameter type controls what type of values you get from the menu."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [11164, 11298], "text": ["Under ", {"text": ["Parameter description"], "type": "ui"}, ", on the ", {"text": ["Parameter"], "type": "ui"}, " sub-tab, set up the parameter\u2019s controls such as its name and label."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [11298, 11431], "text": ["On the ", {"text": ["Menu"], "type": "ui"}, " sub-tab, turn on ", {"text": ["Use menu"], "type": "ui"}, ". If this is an Integer parameter, turn on ", {"text": ["Use menu item token as value"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [11431, 11687], "text": ["Set up the menu items (see ", {"fragment": "#menu_tab", "text": ["the help for the Menu sub-tab"], "value": "#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, ". You can manually set up a list of items, or ", {"fragment": "#parameter_menu_scripts", "text": ["write a script"], "value": "/hom/locations#parameter_menu_scripts", "fullpath": "/hom/locations#parameter_menu_scripts", "scheme": null, "type": "link"}, " to generate the menu items dynamically every time the user clicks the menu."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [11687, 11984], "text": ["When you read the value of the parameter in a script or channel reference, you will get the \"token\" for the currently selected item. You can also set up a ", {"fragment": "#parameter_callback_scripts", "text": ["parameter callback script"], "value": "/hom/locations#parameter_callback_scripts", "fullpath": "/hom/locations#parameter_callback_scripts", "scheme": null, "type": "link"}, " to do something whenever the user chooses an item in the menu."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [11993, 12204], "text": ["You can also set up a parameter that has a field for the user to type in but also a menu button they can choose possible values from. See ", {"fragment": "#menu_tab", "text": ["the help for the Menu sub-tab"], "value": "#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, " for more information."]}], "indent": 4, "role": "item", "type": "tip", "extent": [11984, 11993]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "text": [" Make a pop-up menu parameter"], "role": "item", "extent": [10885, 10922], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [12256, 12323], "text": ["Under ", {"text": ["Create parameters"], "type": "ui"}, ", click the ", {"text": ["By type"], "type": "ui"}, " tab."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [12323, 12514], "text": ["Add either a Button Strip or Icon Strip parameter (see how to create a parameter from scratch above). Button strips have text labels, while icon strips show icons instead of text."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [12514, 12648], "text": ["Under ", {"text": ["Parameter description"], "type": "ui"}, ", on the ", {"text": ["Parameter"], "type": "ui"}, " sub-tab, set up the parameter\u2019s controls such as its name and label."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [12648, 12687], "text": ["Click the ", {"text": ["Menu"], "type": "ui"}, " sub-tab."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "extent": [12769, 12978], "text": ["For button strips, the Tokens aren\u2019t used (although you can access the list of tokens in a script using ", {"fragment": "#menuItems", "text": "", "value": "/hom/ParmTemplate#menuItems", "fallback_text": "ParmTemplate.menuItems", "fullpath": "/hom/ParmTemplate#menuItems", "scheme": "Hom", "type": "link"}, "). The Labels are the labels on the buttons in the strip."]}, {"indent": 8, "blevel": 10, "type": "bullet", "extent": [12978, 13131], "text": ["For icon strips, fill in the Tokens with references to icon files. The Labels will be used as tooltips when the user hovers over an icon."]}], "container": true, "type": "bullet_group"}], "indent": 4, "text": ["Set up the menu items (see ", {"fragment": "#menu_tab", "text": ["the help for the Menu sub-tab"], "value": "#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, ")."], "extent": [12687, 12769], "blevel": 6, "type": "ord"}, {"body": [{"indent": 8, "type": "para", "extent": [13306, 13483], "text": ["For example, you might have a \"Quality\" strip with \"Low\", \"Medium\", and \"High\" options. These are mutually exclusive, so you would set the pop-up menu to \"Normal\"."]}, {"indent": 8, "type": "para", "extent": [13483, 13751], "text": ["On the other hand, you might have a node the generates text, with a \"Style\" strip with \"Bold\", \"Italics\", and \"Underline\". In this case you want the user to be able to turn each option on or off individually, so you would set the pop-up menu to \"Toggle\"."]}], "indent": 4, "text": ["To make the buttons mutually exclusive, set the pop-up menu at the top to \"Normal\". To allow the user to turn on multiple buttons, set the pop-up menu to \"Toggle\"."], "extent": [13131, 13306], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [13751, 13835], "text": ["When you read the value of the parameter in a script or channel reference:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [13835, 13949], "text": ["For \"Normal\" (mutually exclusive) strips, it returns the index of the selected item (starting from 0)."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [13949, 14129], "text": ["For \"Toggle\" (multiple selection) strips, it returns a ", {"text": ["bit field"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Bit_field"}, ". See ", {"fragment": "#button_strip_scripts", "text": ["scripting button strips"], "value": "/hom/locations#button_strip_scripts", "fullpath": "/hom/locations#button_strip_scripts", "scheme": null, "type": "link"}, " for more information."]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [14129, 14288], "text": ["You can also set up a ", {"fragment": "#button_strip_scripts", "text": ["parameter callback script"], "value": "/hom/locations#button_strip_scripts", "fullpath": "/hom/locations#button_strip_scripts", "scheme": null, "type": "link"}, " to do something whenever the user clicks a button in the strip."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [14297, 14513], "text": ["If you make a \"Toggle\" script and have the callback script turn off the selected item each time one is clicked, the button strip will act more like a toolbar of action buttons rather than a set of options."]}], "indent": 4, "role": "item", "type": "tip", "extent": [14288, 14297]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "text": [" Make a button strip or icon strip parameter"], "role": "item", "extent": [12204, 12256], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [{"indent": 0, "type": "para", "extent": [14550, 14907], "text": ["When you are developing a set of complex assets, with high-level assets that build on low-level assets, you sometimes want to promote an entire block of parameters from a lower-level asset onto the higher-level asset you're authoring. However, you want to be able to continue to edit the lower-level parameters and not have to re-promote them every time."]}, {"indent": 0, "type": "para", "extent": [14907, 15083], "text": [{"text": ["Import blocks"], "type": "em"}, " let you promote a block of parameters and have them remember where they were promoted from so you can automatically update them with changes to the originals."]}, {"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [15205, 15328], "text": ["(Tabs, group boxes, and collapsible sections in the UI are all represented by folders in the parameter tree.)"]}], "indent": 4, "text": ["Promote a folder of parameters from the contained node."], "extent": [15138, 15205], "blevel": 6, "type": "ord"}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [15328, 15405], "text": ["Under ", {"text": ["Parameter description"], "type": "ui"}, ", turn on ", {"text": ["Import settings"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [15405, 15555], "text": ["Now when you want to pick up changes to the original folder\u2019s contents, you can right-click the promoted folder and choose ", {"text": ["Refresh imports"], "type": "ui"}, "."]}], "indent": 0, "text": [" Promote a block of parameters as a single unit"], "role": "item", "extent": [15083, 15138], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}], "indent": 0, "level": 3, "text": ["Import blocks"], "extent": [14513, 14550], "container": true, "type": "h", "id": "importblocks"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [15597, 15847], "text": ["There is no \"menu\" parameter type. If you want the user to choose a value from a pop-up menu, create an Integer or String parameter and then use the controls on ", {"text": ["Menu"], "type": "ui"}, " sub-tab under ", {"text": ["Parameter Description"], "type": "ui"}, " to set up a menu of value choices."]}], "indent": 0, "role": "item", "type": "tip", "extent": [15591, 15597]}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [15887, 16047], "text": ["A single float representing an angle in degrees. In old versions of Houdini this had a different UI than a plain float but this is no longer the case."]}], "indent": 4, "type": "dt", "extent": [15853, 15887], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/angle", "scheme": "Icon", "type": "link", "value": "DATATYPES/angle"}, " Angle"]}, {"body": [{"indent": 8, "type": "para", "extent": [16083, 16175], "text": ["A clickable button. You can enter a script to run when the user clicks the button."]}], "indent": 4, "type": "dt", "extent": [16047, 16083], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/button", "scheme": "Icon", "type": "link", "value": "DATATYPES/button"}, " Button"]}, {"body": [{"indent": 8, "type": "para", "extent": [16222, 16468], "text": ["A horizontal strip of labeled options. The buttons can be mutually exclusive or individually set. See ", {"fragment": "#parms", "text": ["how to create a button strip parameter"], "value": "#parms", "fullpath": "/ref/windows/optype#parms", "scheme": null, "type": "link"}, " above, and ", {"fragment": "#button_strip_scripts", "text": ["how to write a button strip callback"], "value": "/hom/locations#button_strip_scripts", "fullpath": "/hom/locations#button_strip_scripts", "scheme": null, "type": "link"}, "."]}], "indent": 4, "type": "dt", "extent": [16175, 16222], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/buttonstrip", "scheme": "Icon", "type": "link", "value": "DATATYPES/buttonstrip"}, " Button Strip"]}, {"body": [{"indent": 8, "type": "para", "extent": [16500, 16630], "text": ["A 3 float vector parameter with a UI for editing the value as a color. Channels use the suffixes ", {"text": ["rgb"], "type": "code"}, " instead of ", {"text": ["123"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [16468, 16500], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/rgb", "scheme": "Icon", "type": "link", "value": "DATATYPES/rgb"}, " Color"]}, {"body": [{"indent": 8, "type": "para", "extent": [16673, 16824], "text": ["A 4 float vector parameter with a UI for editing the value as a color with alpha channel. Channels use the suffixes ", {"text": ["rgba"], "type": "code"}, " instead of ", {"text": ["1234"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [16630, 16673], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/rgba", "scheme": "Icon", "type": "link", "value": "DATATYPES/rgba"}, " Color and Alpha"]}, {"body": [{"indent": 8, "type": "para", "extent": [16856, 17101], "text": ["Stores arbitrary binary data. The parameter has no UI, you must read or write the value in a script. This can be useful for stashing data on a node instance. For example, this is how the ", {"text": ["Stroke SOP"], "fullpath": "/nodes/sop/stroke", "scheme": "Node", "type": "link", "value": "/nodes/sop/stroke"}, " stores stroke data."]}, {"indent": 8, "type": "para", "extent": [17101, 17170], "text": ["The Data parameter type can use the following ", {"fragment": "#tags", "text": ["tags"], "value": "#tags", "fullpath": "/ref/windows/optype#tags", "scheme": null, "type": "link"}, ":"]}, {"body": [{"body": [{"indent": 8, "text": [{"text": ["sidefx::save_value"], "type": "code"}, " "], "role": "td", "extent": [17170, 17201], "type": "cell"}, {"body": [{"indent": 12, "type": "para", "extent": [17201, 17475], "text": ["If this is ", {"text": ["0"], "type": "code"}, " or ", {"text": ["false"], "type": "code"}, ", the value of the data parameter is not saved to the hip file, nor is that data saved when you copy/paste the node. This is useful, for example, if you are caching heavy data such as a Geometry detail and don\u2019t want to save the cache."]}, {"indent": 12, "type": "para", "extent": [17475, 17611], "text": ["Your node must be able to handle the data parameter being empty when the node is loaded, since the contents are not saved."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 4, "type": "dt", "extent": [16824, 16856], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/data", "scheme": "Icon", "type": "link", "value": "DATATYPES/data"}, " Data"]}, {"body": [{"indent": 8, "type": "para", "extent": [17667, 17822], "text": ["A 3 float vector representing a direction. In old versions of Houdini this had a different UI than a plain vector but this is no longer the case."]}], "indent": 4, "type": "dt", "extent": [17611, 17667], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/direction_vector", "scheme": "Icon", "type": "link", "value": "DATATYPES/direction_vector"}, " Direction Vector"]}, {"body": [{"indent": 8, "type": "para", "extent": [17854, 17939], "text": ["A string representing a file path, with a UI for choosing a file from disk."]}], "indent": 4, "type": "dt", "extent": [17822, 17854], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/file", "scheme": "Icon", "type": "link", "value": "DATATYPES/file"}, " File"]}, {"body": [{"indent": 8, "type": "para", "extent": [17988, 18083], "text": ["A string representing a directory path, with a UI for choosing a directory from disk."]}], "indent": 4, "type": "dt", "extent": [17939, 17988], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/directory", "scheme": "Icon", "type": "link", "value": "DATATYPES/directory"}, " File - Directory"]}, {"body": [{"indent": 8, "type": "para", "extent": [18130, 18266], "text": ["A string representing a path to a geometry file, with a UI for choosing a file that filters out non-geometry files by default."]}], "indent": 4, "type": "dt", "extent": [18083, 18130], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/geo_file", "scheme": "Icon", "type": "link", "value": "DATATYPES/geo_file"}, " File - Geometry"]}, {"body": [{"indent": 8, "type": "para", "extent": [18312, 18443], "text": ["A string representing a path to an image file, with a UI for choosing a file that filters out non-image files by default."]}], "indent": 4, "type": "dt", "extent": [18266, 18312], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/image_file", "scheme": "Icon", "type": "link", "value": "DATATYPES/image_file"}, " File - Image"]}, {"body": [{"indent": 8, "type": "para", "extent": [18477, 18517], "text": ["A single floating point value."]}], "indent": 4, "type": "dt", "extent": [18443, 18477], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/float", "scheme": "Icon", "type": "link", "value": "DATATYPES/float"}, " Float"]}, {"body": [{"indent": 8, "type": "para", "extent": [18562, 18598], "text": ["Two floating point values."]}], "indent": 4, "type": "dt", "extent": [18517, 18562], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/vector2", "scheme": "Icon", "type": "link", "value": "DATATYPES/vector2"}, " Float Vector 2"]}, {"body": [{"indent": 8, "type": "para", "extent": [18642, 18707], "text": ["Three floating point values, for example a 3D position."]}], "indent": 4, "type": "dt", "extent": [18598, 18642], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/vector", "scheme": "Icon", "type": "link", "value": "DATATYPES/vector"}, " Float Vector 3"]}, {"body": [{"indent": 8, "type": "para", "extent": [18752, 18815], "text": ["Four floating point values, for example a quaternion."]}], "indent": 4, "type": "dt", "extent": [18707, 18752], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/vector4", "scheme": "Icon", "type": "link", "value": "DATATYPES/vector4"}, " Float Vector 4"]}, {"body": [{"indent": 8, "type": "para", "extent": [18851, 19091], "text": ["A container for other parameters. Folders let you organize the node\u2019s parameters. You can choose to present the folder in different ways, such as a tab, group box, or collapsible section. Adjacent tabs join together automatically."]}], "indent": 4, "type": "dt", "extent": [18815, 18851], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/folder", "scheme": "Icon", "type": "link", "value": "DATATYPES/folder"}, " Folder"]}, {"body": [{"indent": 8, "type": "para", "extent": [19140, 19385], "text": ["Stores arbitrary geometry data. The parameter has no UI, you must read or write the value in a script. This can be useful for stashing geometry on a node instance. For example, you could use this to make the ", {"text": ["Stash SOP"], "fullpath": "/nodes/sop/stash", "scheme": "Node", "type": "link", "value": "/nodes/sop/stash"}, "."]}], "indent": 4, "type": "dt", "extent": [19091, 19140], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/geometrydata", "scheme": "Icon", "type": "link", "value": "DATATYPES/geometrydata"}, " Geometry Data"]}], "container": true, "type": "dt_group"}], "indent": 0, "role": "item", "type": "col", "extent": [15847, 15853]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [19434, 19711], "text": ["Like Button Strip but with icons on the buttons instead of text labels. The buttons can be mutually exclusive or individually set. See ", {"fragment": "#parms", "text": ["how to create an icon strip parameter"], "value": "#parms", "fullpath": "/ref/windows/optype#parms", "scheme": null, "type": "link"}, " above, and ", {"fragment": "#button_strip_scripts", "text": ["how to write an icon strip callback"], "value": "/hom/locations#button_strip_scripts", "fullpath": "/hom/locations#button_strip_scripts", "scheme": null, "type": "link"}, "."]}], "indent": 4, "type": "dt", "extent": [19391, 19434], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/iconstrip", "scheme": "Icon", "type": "link", "value": "DATATYPES/iconstrip"}, " Icon Strip"]}, {"body": [{"indent": 8, "type": "para", "extent": [19745, 19778], "text": ["A single integer value."]}], "indent": 4, "type": "dt", "extent": [19711, 19745], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int", "scheme": "Icon", "type": "link", "value": "DATATYPES/int"}, " Integer"]}, {"body": [{"indent": 8, "type": "para", "extent": [19829, 19858], "text": ["Two integer values."]}], "indent": 4, "type": "dt", "extent": [19778, 19829], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int_vector2", "scheme": "Icon", "type": "link", "value": "DATATYPES/int_vector2"}, " Integer Vector 2"]}, {"body": [{"indent": 8, "type": "para", "extent": [19908, 19939], "text": ["Three integer values."]}], "indent": 4, "type": "dt", "extent": [19858, 19908], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int_vector", "scheme": "Icon", "type": "link", "value": "DATATYPES/int_vector"}, " Integer Vector 3"]}, {"body": [{"indent": 8, "type": "para", "extent": [19990, 20020], "text": ["Four integer values."]}], "indent": 4, "type": "dt", "extent": [19939, 19990], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int_vector4", "scheme": "Icon", "type": "link", "value": "DATATYPES/int_vector4"}, " Integer Vector 4"]}, {"body": [{"indent": 8, "type": "para", "extent": [20076, 20134], "text": ["Stores a table of string  \u2192 string associations."]}], "indent": 4, "type": "dt", "extent": [20020, 20076], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/keyvaluedict", "scheme": "Icon", "type": "link", "value": "DATATYPES/keyvaluedict"}, " Key-Value Dictionary"]}, {"body": [{"indent": 8, "type": "para", "extent": [20168, 20203], "text": ["A read-only line of text."]}], "indent": 4, "type": "dt", "extent": [20134, 20168], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/label", "scheme": "Icon", "type": "link", "value": "DATATYPES/label"}, " Label"]}, {"body": [{"indent": 8, "type": "para", "extent": [20253, 20336], "text": ["A single float, but the slider UI affects the value on exponential scale."]}], "indent": 4, "type": "dt", "extent": [20203, 20253], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/float_log", "scheme": "Icon", "type": "link", "value": "DATATYPES/float_log"}, " Logarithmic Float"]}, {"body": [{"indent": 8, "type": "para", "extent": [20386, 20471], "text": ["A single integer, but the slider UI affects the value on exponential scale."]}], "indent": 4, "type": "dt", "extent": [20336, 20386], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int_log", "scheme": "Icon", "type": "link", "value": "DATATYPES/int_log"}, " Logarithmic Integer"]}, {"body": [{"indent": 8, "type": "para", "extent": [20520, 20720], "text": ["Two floats representing a low and high. Channels use the suffixes ", {"text": ["min"], "type": "code"}, " and ", {"text": ["max"], "type": "code"}, " instead of ", {"text": ["1"], "type": "code"}, " and ", {"text": ["2"], "type": "code"}, ". ", {"text": ["Nodes with a parameter of this type will not load in Houdini versions before 16.0"], "type": "strong"}, "."]}], "indent": 4, "type": "dt", "extent": [20471, 20520], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/float_minmax", "scheme": "Icon", "type": "link", "value": "DATATYPES/float_minmax"}, " Min/max Float"]}, {"body": [{"indent": 8, "type": "para", "extent": [20769, 20971], "text": ["Two integers representing a low and high. Channels use the suffixes ", {"text": ["min"], "type": "code"}, " and ", {"text": ["max"], "type": "code"}, " instead of ", {"text": ["1"], "type": "code"}, " and ", {"text": ["2"], "type": "code"}, ". ", {"text": ["Nodes with a parameter of this type will not load in Houdini versions before 16.0"], "type": "strong"}, "."]}], "indent": 4, "type": "dt", "extent": [20720, 20769], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/int_minmax", "scheme": "Icon", "type": "link", "value": "DATATYPES/int_minmax"}, " Min/max Integer"]}, {"body": [{"indent": 8, "type": "para", "extent": [21017, 21125], "text": ["A string representing a space-separated list of node paths, with a UI for choosing multiple nodes."]}], "indent": 4, "type": "dt", "extent": [20971, 21017], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/node_list", "scheme": "Icon", "type": "link", "value": "DATATYPES/node_list"}, " Operator List"]}, {"body": [{"indent": 8, "type": "para", "extent": [21171, 21246], "text": ["A string representing a node path, with a UI for choosing a node."]}], "indent": 4, "type": "dt", "extent": [21125, 21171], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/node_path", "scheme": "Icon", "type": "link", "value": "DATATYPES/node_path"}, " Operator Path"]}, {"body": [{"indent": 8, "type": "para", "extent": [21288, 21429], "text": ["An integer bitmask created from a UI allowing the user to turn each of a red, green, blue, and alpha button on or off individually."]}], "indent": 4, "type": "dt", "extent": [21246, 21288], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/rgba_mask", "scheme": "Icon", "type": "link", "value": "DATATYPES/rgba_mask"}, " RGBA Mask"]}, {"body": [{"indent": 8, "type": "para", "extent": [21469, 21581], "text": ["A three float vector with a color ramp UI. You can sample the ramp in an expression with ", {"text": "", "value": "/expressions/chramp", "fallback_text": "chramp()", "fullpath": "/expressions/chramp", "scheme": "Exp", "type": "link"}, "."]}], "indent": 4, "type": "dt", "extent": [21429, 21469], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/ramp", "scheme": "Icon", "type": "link", "value": "DATATYPES/ramp"}, " Ramp (Color)"]}, {"body": [{"indent": 8, "type": "para", "extent": [21621, 21727], "text": ["A single float with a curve ramp UI. You can sample the ramp in an expression with ", {"text": "", "value": "/expressions/chramp", "fallback_text": "chramp()", "fullpath": "/expressions/chramp", "scheme": "Exp", "type": "link"}, "."]}], "indent": 4, "type": "dt", "extent": [21581, 21621], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/ramp", "scheme": "Icon", "type": "link", "value": "DATATYPES/ramp"}, " Ramp (Float)"]}, {"body": [{"indent": 8, "type": "para", "extent": [21769, 21843], "text": ["Inserts a separator line into the UI to organize the parameters."]}], "indent": 4, "type": "dt", "extent": [21727, 21769], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/separator", "scheme": "Icon", "type": "link", "value": "DATATYPES/separator"}, " Separator"]}, {"body": [{"indent": 8, "type": "para", "extent": [21879, 21927], "text": ["A text box for editing a string value."]}], "indent": 4, "type": "dt", "extent": [21843, 21879], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/string", "scheme": "Icon", "type": "link", "value": "DATATYPES/string"}, " String"]}, {"body": [{"indent": 8, "type": "para", "extent": [21964, 22013], "text": ["A checkbox for editing a boolean value."]}], "indent": 4, "type": "dt", "extent": [21927, 21964], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/boolean", "scheme": "Icon", "type": "link", "value": "DATATYPES/boolean"}, " Toggle"]}, {"body": [{"indent": 8, "type": "para", "extent": [22041, 22143], "text": ["Two floats representing surface coordinates. Channels use the suffixes ", {"text": ["uv"], "type": "code"}, " instead of ", {"text": ["12"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [22013, 22041], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/uv", "scheme": "Icon", "type": "link", "value": "DATATYPES/uv"}, " UV"]}, {"body": [{"indent": 8, "type": "para", "extent": [22173, 22280], "text": ["Three floats representing surface coordinates. Channels use the suffixes ", {"text": ["uvw"], "type": "code"}, " instead of ", {"text": ["123"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [22143, 22173], "text": [{"text": "", "fullpath": "/ref/windows/DATATYPES/uvw", "scheme": "Icon", "type": "link", "value": "DATATYPES/uvw"}, " UVW"]}], "container": true, "type": "dt_group"}], "indent": 0, "role": "item", "type": "col", "extent": [19385, 19391]}], "container": true, "role": "item_group", "type": "col_group"}], "indent": 0, "level": 3, "text": ["Parameter types"], "extent": [15555, 15591], "container": true, "type": "h", "id": "parmtypes"}, {"body": [{"indent": 0, "type": "para", "extent": [22331, 22610], "text": ["\"Tags\" let you attach arbitrary key/value data to the parameter template. You can access this data using ", {"fragment": "#tags", "text": "", "value": "/hom/hou/ParmTemplate#tags", "fallback_text": "hou.ParmTemplate.tags", "fullpath": "/hom/hou/ParmTemplate#tags", "scheme": "Hom", "type": "link"}, ". Some tags are recognized and used by different ", {"fragment": "#parmtypes", "text": ["parameter types"], "value": "#parmtypes", "fullpath": "/ref/windows/optype#parmtypes", "scheme": null, "type": "link"}, ". You can also use them to store your own per-parameter hidden data."]}, {"indent": 0, "type": "para", "extent": [22610, 22891], "text": ["Tags are used by the 3D viewer to signal when a parameter should be treated as an OpenGL value. For example, attaching the \"OpenGL  \u2192 Diffuse\" tag to a parameter on a material node makes the 3D viewer treat that parameter\u2019s value as the diffuse color when displaying the surface."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [22891, 23054], "text": ["The tags are listed in a table in the \"Parameter description\" sub-pane on the right, when you select a parameter from \"Existing Parameters\" list in the middle."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [23054, 23191], "text": ["Click ", {"text": ["Built in tags"], "type": "ui"}, " below the tag table to choose from a tree of different tags recognized by Houdini, including the OpenGL tags."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [23191, 23364], "text": ["Some parameters may have internal tags attached to them which store options for the parameter\u2019s look and behavior.  These internal tags are not editable in the tag list."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [23364, 23415], "text": ["Tag names must be unique within each parameter."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [23415, 23535], "text": ["You can use the Key-Value Dictionary parameter type to add a tag-like editing interface to your own digital assets."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 3, "text": ["Parameter tags"], "attrs": {"display": "pull left"}, "extent": [22280, 22310], "container": true, "type": "h", "id": "tags"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [23586, 23696], "text": ["The ", {"text": ["internal"], "type": "em"}, " name of the parameter. This is how channel references and scripts refer to the parameter."]}], "indent": 0, "type": "dt", "extent": [23580, 23586], "text": ["Name"]}, {"body": [{"indent": 4, "type": "para", "extent": [23703, 23899], "text": ["The human readable label for the parameter. This is what appears next to the parameter\u2019s UI in the parameter editor. You can turn off the checkbox to not show any label next to the controls."]}], "indent": 0, "type": "dt", "extent": [23696, 23703], "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "extent": [23905, 24062], "text": ["The ", {"fragment": "#parmtypes", "text": ["parameter type"], "value": "#parmtypes", "fullpath": "/ref/windows/optype#parmtypes", "scheme": null, "type": "link"}, ". This affects how the value is stored and how the parameter is presented to the user in the parameter editor interface."]}], "indent": 0, "type": "dt", "extent": [23899, 23905], "text": ["Type"]}, {"body": [{"indent": 4, "type": "para", "extent": [24073, 24225], "text": ["When this is on, the parameter is not shown in the parameter editor, but you can still read and write its value using expressions and scripts."]}, {"indent": 4, "type": "para", "extent": [24225, 24440], "text": ["By default, invisible parameters are not shown under ", {"text": ["Existing parameters"], "type": "ui"}, ". If you want to show them so you can select them, rearrange them, and delete them, turn on ", {"text": ["Show invisible parameters"], "type": "ui"}, " at the top."]}], "indent": 0, "type": "dt", "extent": [24062, 24073], "text": ["Invisible"]}, {"body": [{"indent": 4, "type": "para", "extent": [24477, 24781], "text": ["Put this parameter and the next parameter in the same row in the parameter editor interface. Note that you can turn this on for more than one parameter in a row to layout three or more parameters horizontally. If all the \"joined\" parameters can\u2019t fit in a line, they will wrap to the next line."]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [24781, 24885], "text": ["When you have 2 or more related, compact controls in a row, you can join them to save space."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [24885, 25172], "text": ["You can make a checkbox, turn its label off, and \"join\" it to the next parameter, for a UI where the checkbox controls whether the parameter applies or not, similar to the ", {"text": ["Label"], "type": "ui"}, " control in this pane. (Note that you still need to actually implement that UI using expressions.)"]}], "container": true, "type": "bullet_group"}], "indent": 0, "type": "dt", "extent": [24440, 24477], "text": ["Horizontally join to next parameter"]}, {"body": [{"indent": 4, "type": "para", "extent": [25186, 25334], "text": ["There can be a few different parameter interfaces in Houdini. This controls which of these different interfaces this parameter appears in."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [25356, 25417], "text": ["Parameter only appears in the parameter editor."]}], "indent": 4, "type": "dt", "extent": [25334, 25356], "text": ["Main Dialog Only"]}, {"body": [{"indent": 8, "type": "para", "extent": [25442, 25546], "text": ["Parameter appears in the parameter editor and the floating parameter editor in the viewer."]}], "indent": 4, "type": "dt", "extent": [25417, 25442], "text": ["Main & Tool Dialogs"]}, {"body": [{"indent": 8, "type": "para", "extent": [25581, 25761], "text": ["Parameter appears in the parameter editor, and the operator toolbar across the top of the viewer when the node is active, and the floating parameter editor in the viewer."]}], "indent": 4, "type": "dt", "extent": [25546, 25581], "text": ["Main & Tool Dialogs + Toolbox"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "extent": [25172, 25186], "text": ["Show parm in"]}, {"body": [{"indent": 4, "type": "para", "extent": [25775, 25987], "text": ["A rule for when this parameter should appear disabled/non-editable. This lets you set up parameters to dynamically disable based on the value of other parameters. See ", {"fragment": "#conditions", "text": ["disable/hide when syntax"], "value": "#conditions", "fullpath": "/ref/windows/optype#conditions", "scheme": null, "type": "link"}, "."]}], "indent": 0, "type": "dt", "extent": [25761, 25775], "text": ["Disable when"]}, {"body": [{"indent": 4, "type": "para", "extent": [25998, 26200], "text": ["A rule for when this parameter should not appear. This lets you set up parameters to dynamically hide themselves based on the value of other parameters. See ", {"fragment": "#conditions", "text": ["disable/hide when syntax"], "value": "#conditions", "fullpath": "/ref/windows/optype#conditions", "scheme": null, "type": "link"}, "."]}], "indent": 0, "type": "dt", "extent": [25987, 25998], "text": ["Hide when"]}, {"body": [{"indent": 4, "type": "para", "extent": [26206, 26235], "text": ["See ", {"fragment": "#tags", "text": ["tags"], "value": "#tags", "fullpath": "/ref/windows/optype#tags", "scheme": null, "type": "link"}, " above."]}], "indent": 0, "type": "dt", "extent": [26200, 26206], "text": ["Tags"]}, {"body": [{"indent": 4, "type": "para", "extent": [26252, 26329], "text": ["Houdini will runs this script when the value of this parameter changes."]}, {"indent": 4, "type": "para", "extent": [26329, 26469], "text": ["The pop-up icon menu to the right of this field lets you set whether the callback script is in HScript command language or Python."]}, {"indent": 4, "type": "para", "extent": [26469, 26713], "text": ["If the value in the field is one line, it is treated as a Python expression and evaluated. If it has more than one line, it is treated as if it was the body of a function and must use a ", {"text": ["return"], "type": "code"}, " statement at the end to return a value."]}, {"indent": 4, "type": "para", "extent": [26713, 26957], "text": ["The script runs in an environment containing a ", {"text": ["kwargs"], "type": "code"}, " global dictionary variable containing information about which parameter changed. \n    See ", {"fragment": "#parameter_callback_scripts", "text": ["parameter callback scripts"], "value": "/hom/locations#parameter_callback_scripts", "fullpath": "/hom/locations#parameter_callback_scripts", "scheme": null, "type": "link"}, " for more information."]}], "indent": 0, "type": "dt", "extent": [26235, 26252], "text": ["Callback script"]}, {"body": [{"indent": 4, "type": "para", "extent": [26979, 27084], "text": ["If you turn this off, this item will not be included when its parent folder is imported as a block."]}], "indent": 0, "type": "dt", "extent": [26957, 26979], "text": ["Available for import"]}, {"body": [{"indent": 4, "type": "para", "extent": [27090, 27168], "text": ["This is displayed as a tooltip when the user hovers over the parameter."]}], "indent": 0, "type": "dt", "extent": [27084, 27090], "text": ["Help"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Common settings"], "attrs": {"display": "pull left"}, "extent": [23535, 23559], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [27232, 27320], "text": ["Display this field as a multi-line editor instead of a single line text field."]}, {"indent": 4, "type": "para", "extent": [27320, 27594], "text": ["Note that ", {"text": ["all"], "type": "em"}, " string parameters can hold multi-line text. You can get an extended multi-line editor for a single line text field by pressing ", {"keys": ["Alt", "E"], "text": null, "type": "keys"}, " in the field. This checkbox simply changes the look/capabilities of the user interface for editing the sting."]}], "indent": 0, "type": "dt", "extent": [27213, 27232], "text": ["Multi-line string"]}, {"body": [{"indent": 4, "type": "para", "extent": [27609, 28005], "text": ["When ", {"text": ["Multi-line string"], "type": "ui"}, " is on, this is the minimum and maximum number of lines to show in the editor. The field will always be the minimum number of lines tall. If the content has fewer lines than the maximum, the field automatically sizes down to fit, and expands as the user types more, until the content has more than the maximum lines to show, at which point the content will scroll."]}], "indent": 0, "type": "dt", "extent": [27594, 27609], "text": ["Lines to Show"]}, {"body": [{"indent": 4, "type": "para", "extent": [28015, 28162], "text": ["If the field will contain source code, you can specify a programming language to enable auto-completion and syntax highlighting in the field."]}], "indent": 0, "type": "dt", "extent": [28005, 28015], "text": ["Language"]}, {"body": [{"indent": 4, "type": "para", "extent": [28198, 28434], "text": ["Whether this parameter should be expanded without quotes within VOP code\n    blocks. A common use is to allow strings from menus to be placed verbatim\n    in a code block. Only available for string parameters in a VOP definition."]}], "indent": 0, "type": "dt", "extent": [28162, 28198], "text": ["Suppress Quotes in VOP Code Blocks"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["String settings"], "attrs": {"display": "pull left"}, "extent": [27168, 27192], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [28495, 28731], "text": ["Specifies a ", {"text": ["unit type"], "type": "em"}, " for this parameter\u2019s value, such \"distance\" or \"mass\". Choose a unit type from the pop-up menu to the right of the field, or leave this field blank if this value should not scale with a change in units."]}, {"indent": 4, "type": "para", "extent": [28731, 28992], "text": ["This tells Houdini whether/how to scale the parameter\u2019s default value when the user changes the HIP file\u2019s units. For example, if the user changes the HIP file\u2019s units to ", {"text": ["cm"], "type": "code"}, ", it will use this setting to scale any defaults related to length/distance."]}, {"indent": 4, "type": "para", "extent": [28992, 29284], "text": ["The code uses the format ", {"text": [{"text": ["m/kg/s"], "type": "var"}, {"text": ["exponent"], "type": "var"}, "[", {"text": ["m/kg/s"], "type": "var"}, {"text": ["exponent"], "type": "var"}, " ...]"], "type": "code"}, ". For example, length would be ", {"text": ["m1"], "type": "code"}, ". Acceleration would be ", {"text": ["m1s-2"], "type": "code"}, "  (that is, meters/seconds", {"text": ["2"], "tag": "sup", "type": "xml", "attrs": {}}, ", using a negative exponent instead of division). The following are some useful unit type specifications:"]}, {"body": [{"body": [{"indent": 4, "text": ["Mass "], "role": "td", "attrs": {"style": "width: 33%"}, "extent": [29284, 29295], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29322, 29336], "text": [{"text": ["kg1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Time "], "role": "td", "extent": [29336, 29347], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29347, 29360], "text": [{"text": ["s1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Velocity "], "role": "td", "extent": [29360, 29375], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29375, 29391], "text": [{"text": ["m1s-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Angular velocity "], "role": "td", "extent": [29391, 29414], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29414, 29428], "text": [{"text": ["s-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Acceleration "], "role": "td", "extent": [29428, 29447], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29447, 29463], "text": [{"text": ["m1s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Angular acceleration "], "role": "td", "extent": [29463, 29490], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29490, 29504], "text": [{"text": ["s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Force "], "role": "td", "extent": [29504, 29516], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29516, 29535], "text": [{"text": ["kg1m1s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Force density "], "role": "td", "extent": [29535, 29555], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29555, 29575], "text": [{"text": ["kg1m-2s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Impulse "], "role": "td", "extent": [29575, 29589], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29589, 29608], "text": [{"text": ["kg1m1s-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Torque "], "role": "td", "extent": [29608, 29621], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29621, 29640], "text": [{"text": ["kg1m2s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Drag "], "role": "td", "extent": [29640, 29651], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29651, 29668], "text": [{"text": ["kg1s-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Angular drag "], "role": "td", "extent": [29668, 29687], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29687, 29706], "text": [{"text": ["kg1m2s-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Pressure "], "role": "td", "extent": [29706, 29721], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29721, 29741], "text": [{"text": ["kg1m-1s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Spring constant "], "role": "td", "extent": [29741, 29763], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29763, 29780], "text": [{"text": ["kg1s-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Linear density "], "role": "td", "extent": [29780, 29801], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29801, 29818], "text": [{"text": ["kg1m-1"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Area density "], "role": "td", "extent": [29818, 29837], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29837, 29854], "text": [{"text": ["kg1m-2"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Volume density "], "role": "td", "extent": [29854, 29875], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [29875, 29894], "text": [{"text": ["kg1m-3"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "type": "dt", "extent": [28488, 28495], "text": ["Units"]}, {"body": [{"indent": 4, "type": "para", "extent": [29900, 30025], "text": ["When ", {"text": ["Type"], "type": "ui"}, " is ", {"text": ["Integer"], "type": "ui"}, ", ", {"text": ["Float"], "type": "ui"}, ", or ", {"text": ["Angle"], "type": "ui"}, ", sets the\n    number of components in the parameter (1 to 4)."]}], "indent": 0, "type": "dt", "extent": [29894, 29900], "text": ["Size"]}, {"body": [{"indent": 4, "type": "para", "extent": [30035, 30159], "text": ["The default value for the parameter. If ", {"text": ["Size"], "type": "ui"}, " is greater\n    than 1, a default can be specified for each component."]}], "indent": 0, "type": "dt", "extent": [30025, 30035], "text": ["Defaults"]}, {"body": [{"indent": 4, "type": "para", "extent": [30166, 30218], "text": ["The range for the slider in the interface."]}, {"indent": 4, "type": "para", "extent": [30218, 30381], "text": ["If you click the lock icon next to low and/or high value, the interface prevents the user from manually entering values lower and/or higher than this range."]}], "indent": 0, "type": "dt", "extent": [30159, 30166], "text": ["Range"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Numeric settings"], "attrs": {"display": "pull left"}, "extent": [28434, 28459], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [30445, 30556], "text": ["Filters which types of nodes the user can see and select in the chooser interface for this parameter."]}, {"indent": 4, "type": "para", "extent": [30556, 30738], "text": ["For example, if the parameter requires the path to a bone, you would set this to \"Object: Bone Only\" to make it easier for the user to select from just the bones in the scene."]}], "indent": 0, "type": "dt", "extent": [30434, 30445], "text": ["Op filter"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Node path/list settings"], "attrs": {"display": "pull left"}, "extent": [30381, 30413], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [30794, 31014], "text": ["For operating systems that have a different file chooser UI depending on whether you're opening or saving a file (such as MacOS), this lets you specify which type of operation is associated with this parameter."]}, {"indent": 4, "type": "para", "extent": [31014, 31218], "text": ["For example, in a parameter that specifies a geometry file to load, you would set this to \"Read Only\". For a parameter that specifies an output file to write to, you would set this \"Write Only\"."]}, {"indent": 4, "type": "para", "extent": [31218, 31493], "text": ["Houdini\u2019s file chooser currently does not use this information. This only makes a difference if you are using native file dialogs (you have set the ", {"text": ["HOUDINI_USE_NATIVE_FILE_CHOOSER"], "type": "code"}, " environment variable) and the native file dialogs make this distinction (as on MacOS)."]}], "indent": 0, "type": "dt", "extent": [30781, 30794], "text": ["Browse Mode"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["File settings"], "attrs": {"display": "pull left"}, "extent": [30738, 30760], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [31561, 31654], "text": ["How the parameter editor displays this group of parameters in the parameter editor."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [31671, 31744], "text": ["Display as a collapsible heading containing the parameters."]}], "indent": 4, "type": "dt", "extent": [31654, 31671], "text": ["Collapsible"]}, {"body": [{"indent": 8, "type": "para", "extent": [31756, 31817], "text": ["Display as a labeled box around the parameters."]}], "indent": 4, "type": "dt", "extent": [31744, 31756], "text": ["Simple"]}, {"body": [{"indent": 8, "type": "para", "extent": [31827, 31958], "text": ["Display as a tab. Multiple adjacent \"tab\" folders in the parameter tree display as a tab set in the parameter editor."]}], "indent": 4, "type": "dt", "extent": [31817, 31827], "text": ["Tabs"]}, {"body": [{"indent": 8, "type": "para", "extent": [31977, 32096], "text": ["Display as a tab that can change the operation of the node depending on which tab in the set is selected."]}], "indent": 4, "type": "dt", "extent": [31958, 31977], "text": ["Radio buttons"]}, {"body": [{"indent": 8, "type": "para", "extent": [32114, 32346], "text": ["Displays its contents as part of the normal parameter flow. This is useful when you are importing a folder as a block but don\u2019t want the parameters to appear inside a tab or whatever other folder type you're importing."]}], "indent": 4, "type": "dt", "extent": [32096, 32114], "text": ["Import Block"]}, {"body": [{"indent": 8, "type": "para", "extent": [32367, 32640], "text": ["A ", {"text": ["multiparm"], "type": "em"}, " lets the user create multiple instances of a parameter. This folder type sets up an interface to let the user add parameters. The parameter(s) inside this folder act the template for the generated parameter blocks the user can add or delete."]}, {"indent": 8, "type": "para", "extent": [32640, 32897], "text": ["\"List\" style adds the user-generated blocks as part of the normal parameter layout in the parameter editor. \"Scrolling\" style puts the user-generated blocks inside a scrolling area. \"Tabs\" puts each user-generated block in a separate tab in a set."]}], "indent": 4, "type": "dt", "extent": [32346, 32367], "text": ["Multiparm Block"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "extent": [31548, 31561], "text": ["Folder type"]}, {"body": [{"indent": 4, "type": "para", "extent": [32912, 33175], "text": ["Adjacent \"tab\" folders are merged into a tab set. If you want a series of tabs to be in different tab sets, turn this on for the last tab in each set. It indicates this is the last tab in its set and if the next item is also a tab it should start a new set."]}], "indent": 0, "type": "dt", "extent": [32897, 32912], "text": ["End tab group"]}, {"body": [{"indent": 4, "type": "para", "extent": [33193, 33324], "text": ["A rule for when ", {"text": ["all parameters"], "type": "em"}, " in this tab should appear disabled/non-editable. See ", {"fragment": "#conditions", "text": ["disable/hide when syntax"], "value": "#conditions", "fullpath": "/ref/windows/optype#conditions", "scheme": null, "type": "link"}, "."]}], "indent": 0, "type": "dt", "extent": [33175, 33193], "text": ["Tab disable when"]}, {"body": [{"indent": 4, "type": "para", "extent": [33339, 33431], "text": ["A rule for when this tab should be hidden. See ", {"fragment": "#conditions", "text": ["disable/hide when syntax"], "value": "#conditions", "fullpath": "/ref/windows/optype#conditions", "scheme": null, "type": "link"}, "."]}], "indent": 0, "type": "dt", "extent": [33324, 33339], "text": ["Tab hide when"]}, {"body": [{"indent": 4, "type": "para", "extent": [33448, 33581], "text": ["Turn this on have this folder import its contents from a folder on a node inside this asset. See ", {"fragment": "#importblocks", "text": ["import blocks"], "value": "#importblocks", "fullpath": "/ref/windows/optype#importblocks", "scheme": null, "type": "link"}, "."]}], "indent": 0, "type": "dt", "extent": [33431, 33448], "text": ["Import settings"]}, {"body": [{"indent": 4, "type": "para", "extent": [33589, 33701], "text": ["A reference to the node or file this folder imports its contents from, when ", {"text": ["Import settings"], "type": "ui"}, " is on."]}], "indent": 0, "type": "dt", "extent": [33581, 33589], "text": ["Source"]}, {"body": [{"indent": 4, "type": "para", "extent": [33708, 33805], "text": ["A reference to which item to import from the node/file, when ", {"text": ["Import settings"], "type": "ui"}, " is on."]}], "indent": 0, "type": "dt", "extent": [33701, 33708], "text": ["Token"]}, {"body": [{"indent": 4, "type": "para", "extent": [33811, 33895], "text": ["Only import parameters matching this pattern, when ", {"text": ["Import settings"], "type": "ui"}, " is on."]}], "indent": 0, "type": "dt", "extent": [33805, 33811], "text": ["Mask"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Folder settings"], "attrs": {"display": "pull left"}, "extent": [31493, 31527], "container": true, "type": "h", "id": "folders"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [33957, 34035], "text": ["This can be \"Color\" for a color ramp or \"Float\" for a scalar curve ramp."]}], "indent": 0, "type": "dt", "extent": [33946, 33957], "text": ["Ramp type"]}, {"body": [{"indent": 4, "type": "para", "extent": [34047, 34215], "text": ["When ", {"text": ["Ramp type"], "type": "ui"}, " is \"Color\", this specifies the model to use to generate color from the three channels in the data: \"RGB\", \"HSV\", \"LAB\", \"HSL\", \"XYZ\", or \"TMI\"."]}], "indent": 0, "type": "dt", "extent": [34035, 34047], "text": ["Color type"]}, {"body": [{"indent": 4, "type": "para", "extent": [34231, 34297], "text": ["The initial number of points when this parameter is created."]}], "indent": 0, "type": "dt", "extent": [34215, 34231], "text": ["Default Points"]}, {"body": [{"indent": 4, "type": "para", "extent": [34316, 34387], "text": ["The default interpolation between ramp points for this parameter."]}], "indent": 0, "type": "dt", "extent": [34297, 34316], "text": ["Def Interpolation"]}, {"body": [{"indent": 4, "type": "para", "extent": [34403, 34520], "text": ["The number associated with the first ramp point. This only affects how you refer to the ramp points in scripts."]}], "indent": 0, "type": "dt", "extent": [34387, 34403], "text": ["First Instance"]}, {"body": [{"indent": 4, "type": "para", "extent": [34540, 34666], "text": ["When this parameter is on a shader, this lets you specify VEX variable names for the basis, keys, and values parameters."]}], "indent": 0, "type": "dt", "extent": [34520, 34540], "text": ["VEX Ramp Variables"]}, {"body": [{"indent": 4, "type": "para", "extent": [34692, 34946], "text": ["Ramp parameters have a panel of controls below them that the user can collapse to save space. When this is on, the controls for this ramp will be visible at first when the node is created. When this is off, the controls will be collapsed at first."]}], "indent": 0, "type": "dt", "extent": [34666, 34692], "text": ["Show Controls By Default"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Ramp settings"], "attrs": {"display": "pull left"}, "extent": [33895, 33925], "container": true, "type": "h", "id": "ramps"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [35005, 35127], "text": ["The text to display at the top of the left (key) column in the parameter UI. If you leave this blank, it uses \"Key\"."]}], "indent": 0, "type": "dt", "extent": [34994, 35005], "text": ["Key label"]}, {"body": [{"indent": 4, "type": "para", "extent": [35140, 35267], "text": ["The text to display at the top of the right (value) column in the parameter UI. If you leave this blank, it uses \"Value\"."]}], "indent": 0, "type": "dt", "extent": [35127, 35140], "text": ["Value label"]}, {"body": [{"indent": 4, "type": "para", "extent": [35280, 35385], "text": ["Turn this on to add a button in the parameter UI to choose a key-value pair from a predefined list."]}], "indent": 0, "type": "dt", "extent": [35267, 35280], "text": ["Add chooser"]}, {"body": [{"indent": 4, "type": "para", "extent": [35400, 35477], "text": ["The text to display on the chooser button (when ", {"text": ["Add chooser"], "type": "ui"}, " is on)."]}], "indent": 0, "type": "dt", "extent": [35385, 35400], "text": ["Chooser label"]}, {"body": [{"indent": 4, "type": "para", "extent": [35495, 35792], "text": ["A Python script Houdini runs when the user clicks the chooser button (when ", {"text": ["Add chooser"], "type": "ui"}, " is on). This script can present an interface for the user to choose a preset (for example, using ", {"fragment": "#selectFromList", "text": "", "value": "/hom/hou/ui#selectFromList", "fallback_text": "hou.ui.selectFromList", "fullpath": "/hom/hou/ui#selectFromList", "scheme": "Hom", "type": "link"}, " or ", {"fragment": "#selectFromTree", "text": "", "value": "/hom/hou/ui#selectFromTree", "fallback_text": "hou.ui.selectFromTree", "fullpath": "/hom/hou/ui#selectFromTree", "scheme": "Hom", "type": "link"}, "). It must return a ", {"text": ["(key, value)"], "type": "code"}, " tuple."]}, {"indent": 4, "type": "para", "extent": [35792, 35914], "text": ["See ", {"fragment": "#keyvalue_button_scripts", "text": ["how to write a key-value parameter button script"], "value": "/hom/locations#keyvalue_button_scripts", "fullpath": "/hom/locations#keyvalue_button_scripts", "scheme": null, "type": "link"}, " for more information."]}], "indent": 0, "type": "dt", "extent": [35477, 35495], "text": ["Chooser callback"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Key-Value settings"], "attrs": {"display": "pull left"}, "extent": [34946, 34973], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [35954, 36033], "text": ["This sub-tab shows the animatable ", {"text": ["channels"], "type": "em"}, " associated with this parameter."]}, {"indent": 0, "type": "para", "extent": [36033, 36328], "text": ["By default, Houdini creates an animated channel for each component of the parameter value (so for example, a ", {"text": ["Translate"], "type": "ui"}, " vector parameter would get three channels, one for each component of the vector). However, you can have the parameter generate more (computed) channels or fewer channels."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [36545, 36608], "text": ["You should turn this on for all commonly animated values."]}], "indent": 0, "text": ["You can turn on the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/scope", "scheme": "Icon", "type": "link", "value": "BUTTONS/scope"}, " ", {"text": ["Auto-add"], "fullpath": "/anim/scope", "scheme": null, "type": "link", "value": "/anim/scope"}, " icon for a channel to make it key-able and automatically ", {"text": ["added to the Channel List"], "fullpath": "/anim/scope", "scheme": null, "type": "link", "value": "/anim/scope"}, " when the node containing this parameter is selected."], "extent": [36328, 36545], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [36608, 36863], "text": ["If this parameter is promoted, the \"Linked Channels\" column shows which channels this parameter was promoted from on the contained node. When the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/link", "scheme": "Icon", "type": "link", "value": "BUTTONS/link"}, " Link button in the middle is on, the channel gets its value from the linked channel."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 3, "text": ["Channels sub-tab"], "extent": [35914, 35954], "container": true, "type": "h", "id": "channels_tab"}, {"body": [{"indent": 0, "type": "para", "extent": [36895, 37123], "text": ["The controls on this tab let you set up a menu of values the user can choose from for this parameter. You can also use the ", {"text": ["Callback script"], "type": "ui"}, " (on the ", {"text": ["Parameter"], "type": "ui"}, " sub-tab) to script actions based on the user\u2019s menu choices."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [37129, 37228], "text": ["The menu editing interface is a holdover of very early Houdini UI. It can be a bit confusing."]}], "indent": 0, "role": "item", "type": "note", "extent": [37123, 37129]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [37228, 37395], "text": ["Each menu item has a ", {"text": ["token"], "type": "em"}, " and a ", {"text": ["label"], "type": "em"}, ". The label is the human-readable label corresponding to the value that appears in the pop-up menu in the parameter editor."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [37395, 37508], "text": ["In a String parameter, when the user selects an item, the parameter is set to the corresponding string token."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [37508, 37820], "text": ["In an Integer parameter, by default when the user chooses an item, the parameter is set to the ", {"text": ["index"], "type": "em"}, " of the item (for example, ", {"text": ["0"], "type": "code"}, " for the first item, ", {"text": ["1"], "type": "code"}, " for the second item, and so on). If you turn on ", {"text": ["Use menu item token as value"], "type": "ui"}, ", the parameter will be set to the corresponding integer token instead."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [37820, 37906], "text": ["Any menu item with the token ", {"text": ["_separator_"], "type": "code"}, " will be replaced with a menu separator."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [37906, 38127], "text": ["If you know the items you want to appear in the menu ahead of time, you can define them using the ", {"text": ["Menu items"], "type": "ui"}, " table. If you want to dynamically compute the menu contents using a script, click ", {"text": ["Menu script"], "type": "ui"}, " instead."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [38137, 38327], "text": ["Converts the parameter UI from the default (for example, a text box for entering an integer or string) to a pop-up menu allowing the user to choose from the items configured below."]}, {"indent": 4, "type": "para", "extent": [38327, 38411], "text": ["The pop-up menu to the right lets you choose the interface style for the menu:"]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [38453, 38506], "text": ["Display the parameter as a pop-up menu."]}], "indent": 4, "type": "dt", "extent": [38411, 38453], "text": ["Normal (Menu Only, Single Selection)"]}, {"body": [{"indent": 8, "type": "para", "extent": [38558, 38715], "text": ["Display the parameter as a \"mini\" pop-up menu. This style only shows a small button to open the menu, instead of showing the current value."]}, {"indent": 8, "type": "para", "extent": [38715, 38866], "text": ["You can use this with ", {"text": ["Horizontally join to next parameter"], "type": "ui"}, " on the previous parameter to put a mini-popup menu after another parameter."]}], "indent": 4, "type": "dt", "extent": [38506, 38558], "text": ["Normal Mini (Mini Menu Only, Single Selection)"]}, {"body": [{"indent": 8, "type": "para", "extent": [38911, 39104], "text": ["This displays a regular field the user can manually edit, with a mini pop-up menu at the end from which they can choose items. Choosing an item replaces the contents of the field."]}], "indent": 4, "type": "dt", "extent": [38866, 38911], "text": ["Replace (Field + Single Selection Menu)"]}, {"body": [{"indent": 8, "type": "para", "extent": [39150, 39305], "text": ["This setting is only useful for String parameters. If you choose it for an Integer parameter you will get the same UI as Replace (above)."]}, {"indent": 8, "type": "para", "extent": [39305, 39600], "text": ["This treats the parameter value as a space-separated list of keywords. It shows a regular text field the user can manually edit, with a mini pop-up menu at the end from which they can choose items. Choosing an item ", {"text": ["adds"], "type": "em"}, " its token to the list (or ", {"text": ["removes"], "type": "em"}, " it if it is already there)."]}], "indent": 4, "type": "dt", "extent": [39104, 39150], "text": ["Toggle (Field + Multiple Selection Menu)"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "extent": [38127, 38137], "text": ["Use menu"]}, {"body": [{"indent": 4, "type": "para", "extent": [39630, 39916], "text": ["In an Integer parameter, by default when the user chooses an item, the parameter is set to the ", {"text": ["index"], "type": "em"}, " of the item (for example, ", {"text": ["0"], "type": "code"}, " for the first item, ", {"text": ["1"], "type": "code"}, " for the second item, and so on). If you turn this on, the parameter will be set to the corresponding integer token instead."]}], "indent": 0, "type": "dt", "extent": [39600, 39630], "text": ["Use menu item token as value"]}, {"body": [{"indent": 4, "type": "para", "extent": [39928, 40002], "text": ["Click this tab to define the items that will appear in the menu."]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [40002, 40095], "text": ["Select a row and use the fields under Token and Label to edit the row\u2019s contents."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [40095, 40170], "text": ["To add a new row, select the empty row at the end of the table."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [40170, 40335], "text": ["Click the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/list_reorderup", "scheme": "Icon", "type": "link", "value": "BUTTONS/list_reorderup"}, " move up button to move a row higher in the table. Click the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/list_delete", "scheme": "Icon", "type": "link", "value": "BUTTONS/list_delete"}, " delete button to delete a row."]}], "container": true, "type": "bullet_group"}], "indent": 0, "type": "dt", "extent": [39916, 39928], "text": ["Menu items"]}, {"body": [{"indent": 4, "type": "para", "extent": [40348, 40528], "text": ["When this tab is selected, Houdini will run this script to generate the menu contents. This lets you dynamically change the menu items depending on the current situation."]}, {"indent": 4, "type": "para", "extent": [40528, 40636], "text": ["Below the script field is a ", {"text": ["Menu script language"], "type": "ui"}, " menu (you may need to scroll down to see it)."]}, {"indent": 4, "type": "para", "extent": [40636, 40759], "text": ["See ", {"fragment": "#parameter_menu_scripts", "text": ["Parameter Menu Scripts"], "value": "/hom/locations#parameter_menu_scripts", "fullpath": "/hom/locations#parameter_menu_scripts", "scheme": null, "type": "link"}, " for more information on writing a menu script."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [40768, 40917], "text": ["Houdini runs this script whenever the user opens the menu, and when the parameter is evaluated, so make it as simple and fast as possible."]}], "indent": 4, "role": "item", "type": "tip", "extent": [40759, 40768]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "type": "dt", "extent": [40335, 40348], "text": ["Menu script"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Menu sub-tab"], "extent": [36863, 36895], "container": true, "type": "h", "id": "menu_tab"}, {"body": [{"indent": 0, "type": "para", "extent": [40940, 41143], "text": ["Houdini stores information here about where a parameter was promoted from, for use when updating ", {"fragment": "#importblocks", "text": ["import blocks"], "value": "#importblocks", "fullpath": "/ref/windows/optype#importblocks", "scheme": null, "type": "link"}, ". You should not edit this information unless you know what you're doing."]}], "indent": 0, "level": 3, "text": ["Import sub-tab"], "extent": [40917, 40940], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [41173, 41303], "text": ["Some parameters can have a small button appear to the right of the field in the parameter editor that runs an arbitrary script."]}, {"indent": 0, "type": "para", "extent": [41303, 41558], "text": ["Unlike other parts of Houdini, this is no checkbox to control whether the action button appears. Instead, if the script editor on this tab is empty, the parameter has no action button, and if the script editor has any content, the action button appears."]}, {"indent": 0, "type": "para", "extent": [41558, 41719], "text": ["If the script is one line, it is treated as a Python expression and evaluated. If it has more than one line, it is treated as if it was the body of a function."]}, {"indent": 0, "type": "para", "extent": [41719, 41828], "text": ["The script runs in an environment with a global ", {"text": ["kwargs"], "type": "code"}, " dictionary variable containing the following keys:"]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [41838, 41892], "text": ["A ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, " reference for the current node."]}], "indent": 0, "type": "dt", "extent": [41828, 41838], "text": [{"text": ["\"node\""], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [41907, 41963], "text": ["A ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " reference for the parameter."]}], "indent": 0, "type": "dt", "extent": [41892, 41907], "text": [{"text": ["\"parmtuple\""], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [41991, 42301], "text": ["If the parameter with the action button is one instance of a multiparm, this is the (0-based) number of the specific instance. For example, if a multiparm has three instances and you click the action button for the second instance, this would equal ", {"text": ["1"], "type": "code"}, ". If the parameter is not a multiparm, this is ", {"text": ["-1"], "type": "code"}, "."]}], "indent": 0, "type": "dt", "extent": [41963, 41991], "text": [{"text": ["\"script_multiparm_index\""], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [42344, 42557], "text": ["If the given modifier key was held when the user clicked the button, the corresponding value will be ", {"text": ["1"], "type": "code"}, ", otherwise it\u2019s ", {"text": ["0"], "type": "code"}, ". You can use this to modify the action the script performs based on modifier keys."]}], "indent": 0, "type": "dt", "extent": [42301, 42344], "text": [{"text": ["\"ctrl\""], "type": "code"}, ", ", {"text": ["\"shift\""], "type": "code"}, ", ", {"text": ["\"command\""], "type": "code"}, ", ", {"text": ["\"alt\""], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 0, "type": "para", "extent": [42557, 42890], "text": ["The following action button script for a node path parameter opens a chooser, waits for the user to pick an Object node, and then fills in the parameter with the path to that node. If the user shift-clicks the button, the chooser is limited to selecting cameras, and if they ctrl-click the button, it\u2019s limited to selecting lights."]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [42890, 43666], "text": ["\n# Get the reference to the current parameter\nparm = kwargs[\"parmtuple\"]\n\n# Get the current value of the parameter, to use as the default in the chooser.\n# Note that the method returns a tuple, so we grab the first (and only) item in\n# the tuple.\npath = parm.evalAsStrings()[0]\nnode = hou.node(path)\n\n# Check the modifier keys to set the filter\nif kwargs[\"shift\"]:\n    nodetype = hou.nodeTypeFilter.ObjCamera\nelif kwargs[\"ctrl\"]:\n    nodetype = hou.nodeTypeFilter.ObjLight\nelse:\n    nodetype = hou.nodeTypeFilter.Obj\n    \n# Ask the user to choose a node\nnewpath = hou.ui.selectNode(initial_node=node, node_type_filter=nodetype)\n\n# Set the parameter value (again, it's a ParmTuple, so we need to set it as\n# as tuple with a single item)\nparm.set( (newpath, ) )\n"]}], "indent": 0, "level": 3, "text": ["Action Button sub-tab"], "extent": [41143, 41173], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [43759, 44015], "text": ["Often you want to dynamically show or enable parameters based on the values of other parameters. For example, you might have a checkbox that enables some feature, and only want to enable editing parameters related to that feature when the checkbox is on."]}, {"indent": 0, "type": "para", "extent": [44015, 44262], "text": ["The ", {"text": ["Disable when"], "type": "ui"}, " and ", {"text": ["Hide when"], "type": "ui"}, " settings of a parameter let you set up when the parameter should be disabled or hidden. The value is a code using the syntax shown below to calculate whether to disable/hide based on other parameter values."]}, {"indent": 0, "type": "para", "extent": [44262, 44286], "text": ["The general syntax is:"]}, {"lang": null, "indent": 0, "type": "pre", "extent": [44286, 44332], "text": ["\n{ parm_name [operator] value ...} ...\n"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [44332, 44381], "text": ["One or more comparisons inside curly braces."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [44381, 44495], "text": ["Inside the curly braces are one or more comparisons with a parameter name, a comparison operator, and a value."]}, {"body": [{"lang": null, "indent": 4, "type": "pre", "extent": [44636, 44701], "text": ["\n    { type == 1 count > 10 } { tolerance < 0.1 }\n    "]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [44716, 44823], "text": ["You ", {"text": ["must"], "type": "strong"}, " put spaces around the comparison operator, otherwise Houdini will not accept the rule."]}], "indent": 4, "role": "item", "type": "note", "extent": [44701, 44716]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["The following comparison operators are available: ", {"text": ["=="], "type": "code"}, ", ", {"text": ["!="], "type": "code"}, ", ", {"text": ["<"], "type": "code"}, ", ", {"text": [">"], "type": "code"}, ", ", {"text": [">="], "type": "code"}, ", ", {"text": ["<="], "type": "code"}, ", ", {"text": ["=~"], "type": "code"}, " (matches pattern), ", {"text": ["!~"], "type": "code"}, " (doesn\u2019t match pattern)."], "extent": [44495, 44636], "blevel": 2, "type": "bullet"}, {"body": [{"lang": null, "indent": 4, "type": "pre", "extent": [44986, 45034], "text": ["\n    { geotype 1 } { geotype 2 }\n    "]}], "indent": 0, "text": ["You can omit the comparison operator, in which case it will be assumed to be ", {"text": ["=="], "type": "code"}, ". For readability however we recommend you always explicitly type an operator."], "extent": [44823, 44986], "blevel": 2, "type": "bullet"}, {"body": [{"indent": 4, "type": "para", "extent": [45168, 45352], "text": ["For example, with the condition below, if the ", {"text": ["enablefeature"], "type": "code"}, " checkbox parameter is on ", {"text": ["and"], "type": "em"}, " the ", {"text": ["count"], "type": "code"}, " parameter is more than ", {"text": ["10"], "type": "code"}, ", this parameter would be disabled/hidden:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [45352, 45406], "text": ["\n    { enablefeature == 1 count > 10 }\n    "]}], "indent": 0, "text": ["If there are multiple comparisons inside a set of curly braces, ", {"text": ["all"], "type": "em"}, " the comparisons must be true for that condition to be true."], "extent": [45034, 45168], "blevel": 2, "type": "bullet"}, {"body": [{"indent": 4, "type": "para", "extent": [45533, 45716], "text": ["For example, with the condition below, if the ", {"text": ["enablefeature"], "type": "code"}, " checkbox parameter is on ", {"text": ["or"], "type": "em"}, " the ", {"text": ["count"], "type": "code"}, " parameter is more than ", {"text": ["10"], "type": "code"}, ", this parameter would be disabled/hidden:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [45716, 45765], "text": ["\n    { type == 1 } { count > 10 }\n    "]}], "indent": 0, "text": ["If there are multiple conditions (sets of curly braces), ", {"text": ["any"], "type": "em"}, " of the conditions may be true to activate disabling/hiding."], "extent": [45406, 45533], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [45765, 45993], "text": ["You can\u2019t use ", {"text": ["expression functions"], "fullpath": "/expressions/index", "scheme": null, "type": "link", "value": "/expressions/"}, " in the rule string. However, a workaround is to create an invisible parameter containing an expression that calculates what you need, and then reference it in a comparison."]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [46198, 46399], "text": ["The highest wired input number. This may be more than the number of wires if inputs in the middle are not connected. It also counts subnet inputs that may not be wired in the parent node."]}], "indent": 4, "type": "dt", "extent": [46181, 46198], "text": [{"text": ["ninputs()"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [46422, 46609], "text": ["Returns ", {"text": ["1"], "type": "code"}, " if the given input number is connected, or ", {"text": ["0"], "type": "code"}, " if not. This does not count an input wired into a subnet input if that input is not also wired in the parent node."]}], "indent": 4, "type": "dt", "extent": [46399, 46422], "text": [{"text": ["hasinput(", {"text": ["n"], "type": "var"}, ")"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [46637, 46744], "text": ["Returns ", {"text": ["1"], "type": "code"}, " if this parameter\u2019s name is ", {"text": ["parmname"], "type": "var"}, ". This is meant for use with multiparm items."]}, {"indent": 8, "type": "para", "extent": [46744, 46896], "text": ["For example, this rule would apply to the first item in a multiparm named ", {"text": ["blend"], "type": "code"}, ", but not the second (", {"text": ["blend1"], "type": "code"}, "), third (", {"text": ["blend2"], "type": "code"}, "), and so on:"]}, {"lang": null, "indent": 8, "type": "pre", "extent": [46896, 46952], "text": ["\n        { isparm(blend0) == 1 }\n        "]}], "indent": 4, "type": "dt", "extent": [46609, 46637], "text": [{"text": ["isparm(", {"text": ["parmname"], "type": "var"}, ")"], "type": "code"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["There are a few special functions you can use in place of the parameter name on the left side of a comparison. (You ", {"text": ["can not"], "type": "em"}, " use these as a ", {"text": ["value"], "type": "em"}, " on the right side of a comparison.)"], "extent": [45993, 46181], "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 3, "text": ["Disable when/Hide when syntax"], "attrs": {"bestbet": "disablewhen", "index": "document"}, "extent": [43666, 43719], "container": true, "type": "h", "id": "conditions"}], "indent": 0, "level": 2, "text": ["Parameters tab"], "extent": [4960, 4989], "container": true, "type": "h", "id": "parms"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [46998, 47302], "text": ["For Object assets, this lets you choose a node inside the asset to indicate the general type of object the asset is (for example, a light, or camera, or geometry object). Houdini can use this information to filter and categorize this asset in the UI, such as in the ", {"text": ["link editor"], "fullpath": "/ref/panes/linker", "scheme": null, "type": "link", "value": "/ref/panes/linker"}, "."]}], "indent": 0, "type": "dt", "extent": [46976, 46998], "text": ["Representative Node"]}, {"body": [{"indent": 4, "type": "para", "extent": [47318, 47666], "text": ["For SOP assets, Houdini will cook this node to create ", {"text": ["guides"], "type": "em"}, " shown along with the node\u2019s actual output. Guide geometry lets you include \"extra\" geometry aside from the node\u2019s output to serve as indicators or visualization. For example, volume SOPs often have guide geometry indicating the bounding box, with ticks indicating the voxel size."]}], "indent": 0, "type": "dt", "extent": [47302, 47318], "text": ["Guide Geometry"]}, {"body": [{"indent": 4, "type": "para", "extent": [47682, 47785], "text": ["A space-separated list of node paths. These nodes can be edited even if this asset is locked."]}, {"indent": 4, "type": "para", "extent": [47785, 48033], "text": ["Usually you want assets to seem like self-sufficient black boxes to the user, however for complex operations it might be expedient to let the user dive inside and modify nodes such as paint nodes or curves that affect how the asset works."]}, {"indent": 4, "type": "para", "extent": [48033, 48283], "text": ["Editability does not \"bubble up\" to assets containing other assets. If node A is editable in asset B, that does not automatically make it editable in an asset C which contains an instance of B. You would need to list A as an editable node of C."]}], "indent": 0, "type": "dt", "extent": [47666, 47682], "text": ["Editable Nodes"]}, {"body": [{"indent": 4, "type": "para", "extent": [48298, 48525], "text": ["A space-separated list of node paths. Warnings and errors on these nodes will bubble up onto the asset node. List any nodes inside the asset that might cause problems so the user will be able to see the warning/error."]}, {"indent": 4, "type": "para", "extent": [48525, 48724], "text": ["For example, if you have a File node inside your asset that loads a path defined on the asset, you should include it in this list so if it can\u2019t find the file the error is visible on the asset."]}], "indent": 0, "type": "dt", "extent": [48283, 48298], "text": ["Message Nodes"]}, {"body": [{"indent": 4, "type": "para", "extent": [48737, 49051], "text": ["If this contains a subnetwork path, when the user double-clicks the asset (or uses the \"Dive into Network\" command), the network jumps to the contents of this subnetwork instead of the asset\u2019s own contents. If you have a dive target you should add the target node to the list of ", {"text": ["Editable nodes"], "type": "ui"}, " above."]}, {"indent": 4, "type": "para", "extent": [49051, 49248], "text": ["Since the contents of an asset are always the asset\u2019s definition network, this is a workaround to allow assets to ", {"text": ["seem to the user"], "type": "em"}, " as if the asset is a subnetwork with its own contents."]}, {"indent": 4, "type": "para", "extent": [49248, 49419], "text": ["Users can still navigate to other nodes inside the asset using the tree view and other means. This setting only affects the \"Dive in\"/\"Up to parent network\" actions."]}, {"indent": 4, "type": "para", "extent": [49419, 49593], "text": ["NOTE: The target should be a network, as the final location is looking\n    within the dive target.  If the target is a normal node, the dive target\n    will be ignored."]}], "indent": 0, "type": "dt", "extent": [48724, 48737], "text": ["Dive Target"]}, {"body": [{"indent": 4, "type": "para", "extent": [49611, 49786], "text": ["If this contains the internal name of a parameter on this asset, Houdini will display the value of the parameter as the descriptive text badge in the network editor."]}, {"indent": 4, "type": "para", "extent": [49786, 49968], "text": ["This should be a parameter whose value tells the user at-a-glance the most important thing about the node\u2019s current settings. For example, on a File node this is the file path."]}], "indent": 0, "type": "dt", "extent": [49593, 49611], "text": ["Descriptive Parm"]}, {"body": [{"indent": 4, "type": "para", "extent": [49983, 50119], "text": ["If this is not blank, when the user enters the Handles tool for this node, use this \"state\" instead of the generic node state."]}, {"indent": 4, "type": "para", "extent": [50119, 50374], "text": ["Currently, the most common use for this is to set it to ", {"text": ["stroke"], "type": "code"}, " to have the Handles tool use the ", {"text": ["Stroke state"], "fullpath": "/nodes/sop_state/stroke", "scheme": null, "type": "link", "value": "/nodes/sop_state/stroke"}, " when a node of this type is active. Other built-in states are too coupled with a specific node to work here."]}, {"indent": 4, "type": "para", "extent": [50374, 50538], "text": ["If you write your own interactive state using the HDK or your own custom python state, you can use this setting to associate your custom state with the asset."]}], "indent": 0, "type": "dt", "extent": [49968, 49983], "text": ["Default State"]}, {"body": [{"indent": 4, "type": "para", "extent": [50551, 50757], "text": ["For material nodes, this is used as the internal name of the shader (for Mantra shaders, this is the name of the VEX shader function). This should usually be the same as the asset\u2019s internal name."]}, {"indent": 4, "type": "para", "extent": [50757, 50915], "text": ["Houdini automatically converts illegal characters in this string (for example, ", {"text": ["principledshader::2.0"], "type": "code"}, " might become ", {"text": ["principledshader__2_0"], "type": "code"}, " internally)."]}], "indent": 0, "type": "dt", "extent": [50538, 50551], "text": ["Shader Name"]}, {"body": [{"indent": 4, "type": "para", "extent": [50928, 51379], "text": ["Narrows down the type of computations a material does and indicates how it should be invoked, and what the material can be expected to compute. Choose a type from the pop-up menu to the right of the field. The most common one is \"vopmaterial\" (which can provide both surface and displacement shaders). But the field can be also ", {"text": ["surface"], "type": "code"}, " or ", {"text": ["displace"], "type": "code"}, " if it only generates one type of shader. For RenderMan it is often ", {"text": ["bsdfshader"], "type": "code"}, " or ", {"text": ["generic"], "type": "code"}, "."]}], "indent": 0, "type": "dt", "extent": [50915, 50928], "text": ["Shader Type"]}, {"body": [{"indent": 4, "type": "para", "extent": [51392, 51663], "text": ["For material assets, this lists the renderer(s) this material works with. For example, the Principled Shader works with Mantra and the viewport OpenGL renderer, so its mask is ", {"text": ["VMantra OGL"], "type": "code"}, ". The Pxr Disney shader only works with RenderMan, so its mask is ", {"text": ["RIB"], "type": "code"}, "."]}], "indent": 0, "type": "dt", "extent": [51379, 51392], "text": ["Render Mask"]}, {"body": [{"indent": 4, "type": "para", "extent": [51676, 51825], "text": ["A space-separated list of VEX contexts in which the user can create this node. If you leave this blank, the node can appear in any context."]}, {"indent": 4, "type": "para", "extent": [51825, 52195], "text": ["Available context keywords are ", {"text": ["surface"], "type": "code"}, " (surface shading), ", {"text": ["displace"], "type": "code"}, " (displacement shading), ", {"text": ["chop"], "type": "code"}, " (motion data: ", {"text": ["VOP CHOP"], "fullpath": "/nodes/chop/vopchop", "scheme": "Node", "type": "link", "value": "/nodes/chop/vopchop"}, "), ", {"text": ["cop2"], "type": "code"}, " (compositing: ", {"text": ["VOP COP2 Generator"], "fullpath": "/nodes/cop2/vopcop2gen", "scheme": "Node", "type": "link", "value": "/nodes/cop2/vopcop2gen"}, " and ", {"text": ["VOP COP2 Filter"], "fullpath": "/nodes/cop2/vopcop2filter", "scheme": "Node", "type": "link", "value": "/nodes/cop2/vopcop2filter"}, "), and ", {"text": ["cvex"], "type": "code"}, " (no specific context: e.g. ", {"text": ["Attribute VOP"], "fullpath": "/nodes/sop/attribvop", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribvop"}, ", ", {"text": ["Point VOP"], "fullpath": "/nodes/sop/attribvop", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribvop"}, ")."]}], "indent": 0, "type": "dt", "extent": [51663, 51676], "text": ["VopNet Mask"]}, {"body": [{"indent": 4, "type": "para", "extent": [52208, 52427], "text": ["The length (in meters) of one distance unit, according to the units used for values and defaults in the asset. For example, if you developed the asset assuming 1 unit = 1 foot, you should set this to ", {"text": ["0.3048"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [52427, 52686], "text": ["Houdini uses this to scale \"distance\" parameters according to the HIP file\u2019s units (", {"text": ["Edit \u25b8 Preferences \u25b8 HIP file options"], "type": "ui"}, "). You can specify that a parameter represents distance using the ", {"text": ["Units"], "type": "ui"}, " setting for the parameter on the ", {"text": ["Parameters"], "type": "ui"}, " tab."]}], "indent": 0, "type": "dt", "extent": [52195, 52208], "text": ["Unit Length"]}, {"body": [{"indent": 4, "type": "para", "extent": [52697, 52912], "text": ["The mass (in kilograms) of one mass unit, according to the units used for values and defaults in the asset. For example, if you developed the asset assuming 1 unit = 1 pound, you should set this to ", {"text": ["0.45"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [52912, 53164], "text": ["Houdini uses this to scale \"mass\" parameters according to the HIP file\u2019s units (", {"text": ["Edit \u25b8 Preferences \u25b8 HIP file options"], "type": "ui"}, "). You can specify that parameter as represents mass using the ", {"text": ["Units"], "type": "ui"}, " setting for the parameter on the ", {"text": ["Parameters"], "type": "ui"}, " tab."]}], "indent": 0, "type": "dt", "extent": [52686, 52697], "text": ["Unit Mass"]}, {"body": [{"indent": 4, "type": "para", "extent": [53194, 53298], "text": ["Allow ", {"text": ["pragma statements"], "fullpath": "/vex/pragmas", "scheme": null, "type": "link", "value": "/vex/pragmas"}, " in the VEX source code to control settings in this window."]}], "indent": 0, "type": "dt", "extent": [53164, 53194], "text": ["Get Properties from Vex Code"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Node tab"], "extent": [46952, 46976], "container": true, "type": "h", "id": "node"}, {"body": [{"indent": 0, "type": "para", "extent": [53329, 53430], "text": ["For VOPs, this tab lets you set up the inputs and outputs that appear on the node and their types."]}, {"indent": 0, "type": "para", "extent": [53430, 53644], "text": ["For other node type categories, the controls on this tab let you give human-readable labels to the asset\u2019s inputs and outputs. These appear in the network editor as tooltips when the user hovers over a connector."]}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [53663, 53734], "text": ["The tab has two table editors, one for inputs and one for outputs."]}, {"body": [{"indent": 4, "type": "para", "extent": [53914, 54178], "text": ["The button creates inputs with the same name and label, and guesses the input type from the parameter type. If an input already exists with the same name as a parameter, the button only updates the label, so that changes to the input type aren\u2019t overwritten."]}, {"indent": 4, "type": "para", "extent": [54178, 54302], "text": [{"text": ["Inputs based on parameters cannot be edited in the table."], "type": "strong"}, " They are marked with an ", {"text": "", "fullpath": "/ref/windows/BUTTONS/info", "scheme": "Icon", "type": "link", "value": "BUTTONS/info"}, " info icon."]}, {"indent": 4, "type": "para", "extent": [54302, 54413], "text": ["If you manually create an input that has the same name as a parameter, they will automatically be linked."]}], "indent": 0, "text": ["Click ", {"text": ["Create/update inputs from parameters"], "type": "ui"}, " to automatically create inputs based on the node\u2019s parameters. This lets the user override parameter values by connecting inputs."], "extent": [53734, 53914], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [54413, 54524], "text": ["To add an input or output, choose the type from the ", {"text": ["New input"], "type": "ui"}, " or ", {"text": ["New output"], "type": "ui"}, " menus above the tables."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [54524, 54605], "text": ["Click the name, or label of an existing input/output in the table to edit it."]}, {"body": [{"indent": 4, "type": "para", "extent": [54702, 54840], "text": ["You can select multiple rows by Shift-clicking or Ctrl-clicking the first cell of each row, and then drag multiple rows at once."]}, {"indent": 4, "type": "para", "extent": [54840, 54904], "text": ["You can drag column headings to rearrange signature order."]}], "indent": 0, "text": ["Select the first cell in a row and then drag it up or down to rearrange the row in the table."], "extent": [54605, 54702], "blevel": 2, "type": "bullet"}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [54904, 55000], "text": ["To delete an input/output, click the ", {"text": "", "fullpath": "/ref/windows/BUTTONS/list_delete", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/list_delete"}, " Delete icon in the row."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [55000, 55165], "text": ["Some cells cannot be edited or deleted. For example, inputs corresponding to parameters, and outputs corresponding to exported parameters or VOP network outputs."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [55188, 55654], "text": ["When a VOP operator appears in a VOP network, the VEX Builder will\n    only include the code generated by that operator if it determines\n    that its code is required. Generally, this is true for subnet type\n    VOPs, the Output VOP, and any VOP that is connected, directly or\n    indirectly, to the input of a VOP that has required code. However,\n    you can force the VEX Builder to generate the code for your VOP by\n    turning on ", {"text": ["Force Code Generation"], "type": "ui"}, "."]}], "indent": 0, "type": "dt", "extent": [55165, 55188], "text": ["Force code generation"]}, {"body": [{"indent": 4, "type": "para", "extent": [55685, 55783], "text": ["Turn this on if this VOP is implemented by a DSO or DLL file instead of generated VEX code."]}], "indent": 0, "type": "dt", "extent": [55654, 55685], "text": ["External or Procedural Shader"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["VOP assets"], "extent": [53644, 53663], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [55806, 56057], "text": ["A VOP can have multiple ", {"text": ["signatures"], "type": "em"}, ": a set of input types and output type. For example, the ", {"text": ["Sine VOP"], "fullpath": "/nodes/vop/sine", "scheme": "Node", "type": "link", "value": "/nodes/vop/sine"}, " has different signatures (float  \u2192 float, vector  \u2192 vector) corresponding to the different usages of the VEX ", {"text": "", "value": "/vex/functions/sin", "fallback_text": "sin()", "fullpath": "/vex/functions/sin", "scheme": "Vex", "type": "link"}, " function."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [56057, 56309], "text": ["Each signature is represented by a column in the inputs table, and ", {"text": ["three"], "type": "em"}, " columns in the output table. You can match them up by the ", {"text": ["Signature name"], "type": "ui"}, " (the first cell in a signature column). Initially, a VOP node has one signature named ", {"text": ["default"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [56309, 56595], "text": ["You can use the ", {"text": ["New signature"], "type": "ui"}, " button to add a new signature (that is, a new way of calling the underlying VEX code with a different set of typed arguments and a different output). This adds one new column to the top inputs table, and ", {"text": ["three"], "type": "em"}, " columns to the bottom outputs table."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [56595, 56928], "text": ["The first cell in a signature column is the signature name. The second cell is a human-readable label for the signature. These are shown in both the signature column in the input table and the corresponding first column of the signature in the output table. Editing the name or label in one table automatically updates the other."]}, {"body": [{"indent": 4, "type": "para", "extent": [57237, 57367], "text": ["In the outputs table, the rows of the first signature column (after the name and label rows) contain the type of the output."]}], "indent": 0, "text": ["In the inputs table, the rows of a signature column (after the name and label rows) contain the types of each input ", {"text": ["when that signature is active"], "type": "em"}, ". (The user chooses the active signature from a pop-up menu at the top of the node\u2019s parameter interface.) click a cell to choose the type from a pop-up menu."], "extent": [56928, 57237], "blevel": 2, "type": "bullet"}, {"body": [{"indent": 4, "type": "para", "extent": [57547, 58210], "text": ["For example, suppose you have two inputs, color and multiplier, which have the data types vector4 and float. You would create two parameters, also called color and multiplier. The first would be a Color parameter, and the second a single float parameter. Now you want to allow multiplier to also be a vector4. Create a new\n    signature, and name it v4. Change the data type of multiplier for that signature to vector4. The create a new parameter named multiplier_v4, which is 4 floats. Now when one of these operator is created, and the signature is set to v4, the VEX Builder will use the color and multiplier_v4 parameters to provide the default values."]}], "indent": 0, "text": ["To provide a default parameter to use for a particular signature, create a parameter with the same name as the input, followed by an underscore, then the name of the signature."], "extent": [57367, 57547], "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 3, "text": ["VOP signatures"], "extent": [55783, 55806], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Input/Output tab"], "extent": [53298, 53329], "container": true, "type": "h", "id": "inout"}, {"body": [{"indent": 0, "type": "para", "extent": [58232, 58406], "text": ["The contents of the text field appear in the help browser when the user clicks the help button for a node of this operator type in the ", {"text": ["parameter editor"], "fullpath": "/ref/panes/parms", "scheme": null, "type": "link", "value": "/ref/panes/parms"}, "."]}, {"indent": 0, "type": "para", "extent": [58406, 58595], "text": ["This help can be HTML, or you can use a simple but powerful wiki format to create documentation that looks like the native Houdini help. See ", {"text": ["how to write wiki-format help"], "fullpath": "/help/format", "scheme": null, "type": "link", "value": "/help/format"}, "."]}], "indent": 0, "level": 2, "text": ["Help tab"], "extent": [58210, 58232], "container": true, "type": "h", "id": "help"}, {"body": [{"indent": 0, "type": "para", "extent": [58616, 58757], "text": ["This tab lets you create and edit code used to implement Python surface nodes, VEX shaders, VOP operators, and other code-based operators."]}], "indent": 0, "level": 2, "text": ["Code tab"], "extent": [58595, 58616], "container": true, "type": "h", "id": "vex"}, {"body": [{"indent": 0, "type": "para", "extent": [58800, 59127], "text": ["This tab lets you store scripts that are triggered by asset events (such as when an instance of the asset is created or deleted), as well as arbitrary scripts and Python modules needed by the asset. The interface is very similar to the ", {"fragment": "#extra_files", "text": ["Extra files tab"], "value": "#extra_files", "fullpath": "/ref/windows/optype#extra_files", "scheme": null, "type": "link"}, ", but includes a pop-up menu for specifying event scripts."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [59127, 59325], "text": [{"text": ["Do not"], "type": "strong"}, " create a script (on the ", {"text": ["Scripts"], "type": "ui"}, " tab) and an extra file (on the ", {"text": ["Extra files"], "type": "ui"}, " tab) with the same name. The two tabs share a single namespace, and unpredictable behavior may result."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [59325, 59472], "text": ["See ", {"fragment": "#events", "text": ["how to write asset event scripts"], "value": "/hom/locations#events", "fullpath": "/hom/locations#events", "scheme": null, "type": "link"}, " in the Scripting chapter for information on how to write the Python event scripts."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [59472, 59609], "text": ["See ", {"fragment": "#access_contents", "text": ["how to reference embedded files"], "value": "#access_contents", "fullpath": "/ref/windows/optype#access_contents", "scheme": null, "type": "link"}, " for how to refer to the embedded scripts anywhere Houdini expects a filename."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "extent": [59754, 59897], "text": ["If you choose an ", {"fragment": "#asset_events", "text": ["event type"], "value": "/hom/locations#asset_events", "fullpath": "/hom/locations#asset_events", "scheme": null, "type": "link"}, ", Houdini will automatically create a script with the proper name."]}, {"indent": 8, "blevel": 10, "type": "bullet", "extent": [59897, 60062], "text": ["If you choose \"Custom Script\", Houdini will wait for you to fill in a name. Enter a name in the ", {"text": ["Section name"], "type": "ui"}, " field, then click ", {"text": ["Add empty section"], "type": "ui"}, "."]}], "container": true, "type": "bullet_group"}], "indent": 4, "text": ["Choose the event type from the ", {"text": ["Event handler"], "type": "ui"}, " pop-up menu."], "extent": [59677, 59754], "blevel": 6, "type": "ord"}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [60062, 60113], "text": ["Use the editor to write the script."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Start a new event script"], "role": "item", "extent": [59644, 59677], "type": "task"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [60238, 60381], "text": ["Choosing an event type (other than ", {"text": ["Custom script"], "type": "ui"}, ") will create a \"section\" for the script if it doesn\u2019t already exist."]}], "indent": 4, "text": ["Choose the event type from the ", {"text": ["Event handler"], "type": "ui"}, " pop-up menu."], "extent": [60161, 60238], "blevel": 6, "type": "ord"}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [60381, 60470], "text": ["Enter the filename for the script file to load in the ", {"text": ["Filename"], "type": "ui"}, " field."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [60470, 60505], "text": ["Click ", {"text": ["Add file"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [60505, 60698], "text": ["A copy of the file is saved into the digital asset. If you change the file on disk, it will not affect the version in the asset. You will have to reload the file into the ", {"text": ["Scripts"], "type": "ui"}, " tab."]}], "indent": 0, "text": ["Load an existing file as an event script"], "role": "item", "extent": [60113, 60161], "type": "task"}, {"body": [{"body": [{"body": [{"lang": "pycon", "indent": 8, "type": "pre", "extent": [60923, 61007], "text": ["\n        >>> import sys\n        >>> sys.path\n        "]}], "indent": 4, "text": ["Make sure the module is in Houdini\u2019s Python path. In a Python shell, check that the module\u2019s parent directory appears in the list output by this:"], "extent": [60766, 60923], "blevel": 6, "type": "ord"}, {"body": [{"indent": 8, "type": "para", "extent": [61120, 61301], "text": ["For example, say you have a Python module with studio-wide code called ", {"text": ["companyutils"], "type": "code"}, ". You can write an event handler that just calls code in the module like this:"]}, {"lang": "python", "indent": 8, "type": "pre", "extent": [61301, 61425], "text": ["\n        import companyutils\n        \n        companyutils.creation_handler(kwargs)\n        "]}, {"indent": 8, "type": "para", "extent": [61425, 61670], "text": ["You probably want to pass the ", {"text": ["kwargs"], "type": "code"}, " global (which Houdini provides to the handler script) on to the function you call. See ", {"fragment": "#asset_events", "text": ["how to write asset event handlers"], "value": "/hom/locations#asset_events", "fullpath": "/hom/locations#asset_events", "scheme": null, "type": "link"}, " for more information about ", {"text": ["kwargs"], "type": "code"}, "."]}], "indent": 4, "text": ["Create an event handler in the operator type window and write it to call the code in the module."], "extent": [61007, 61120], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Run a function from a module on disk in response to an event"], "role": "item", "extent": [60698, 60766], "type": "task"}, {"body": [{"indent": 4, "type": "para", "extent": [61697, 62010], "text": ["The ", {"text": ["PythonModule"], "type": "code"}, " section serves as a central place for Python values, classes, and functions related to the asset. The only thing that\u2019s special about it compared to any other embedded file is that it\u2019s returned by the ", {"text": [{"text": ["node"], "type": "var"}, ".hdaModule()"], "type": "code"}, " method, which makes it convenient to access in scripts."]}, {"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [62010, 62079], "text": ["Click ", {"text": ["Event handler"], "type": "ui"}, " and choose ", {"text": ["Python module"], "type": "ui"}, "."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "extent": [62119, 62271], "text": ["If you have a file on disk you want to load as the module contents, enter it in the ", {"text": ["Filename"], "type": "ui"}, " field, then click ", {"text": ["Add file"], "type": "ui"}, "."]}, {"indent": 8, "blevel": 10, "type": "bullet", "extent": [62271, 62361], "text": ["Use the editor on the right side of the pane to write the module contents."]}], "container": true, "type": "bullet_group"}], "indent": 4, "text": ["Do one of the following:"], "extent": [62079, 62119], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Add a python module"], "role": "item", "extent": [61670, 61697], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [62388, 62457], "text": ["Click ", {"text": ["Event handler"], "type": "ui"}, " and choose ", {"text": ["Custom script"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [62457, 62577], "text": ["Enter a ", {"text": ["Section name"], "type": "ui"}, " for the script. This is how you will refer to the custom script within Houdini."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "extent": [62617, 62767], "text": ["If you have a file on disk you want to load as the custom script, enter it in the ", {"text": ["Filename"], "type": "ui"}, " field, then click ", {"text": ["Add file"], "type": "ui"}, "."]}, {"indent": 8, "blevel": 10, "type": "bullet", "extent": [62767, 62867], "text": ["If you want to start the script from scratch in the editor, click ", {"text": ["Add empty section"], "type": "ui"}, "."]}], "container": true, "type": "bullet_group"}], "indent": 4, "text": ["Do one of the following:"], "extent": [62577, 62617], "blevel": 6, "type": "ord"}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Add a custom script"], "role": "item", "extent": [62361, 62388], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}], "indent": 0, "level": 3, "text": ["Adding and loading scripts"], "extent": [59609, 59644], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Scripts tab"], "extent": [58772, 58800], "container": true, "type": "h", "id": "scripts"}, {"body": [{"indent": 0, "type": "para", "extent": [62889, 62990], "text": ["This section contains several tabs for defining and editing the interactive content of the asset. "]}, {"body": [{"indent": 0, "type": "para", "extent": [63026, 63353], "text": ["Use this tab to create, edit and store a ", {"text": ["python viewer state"], "fullpath": "/hom/python_states", "scheme": null, "type": "link", "value": "/hom/python_states"}, " script associated to this asset. When the asset is loaded, Houdini \nregisters the viewer state to make it available for use. Likewise, when the asset is unloaded, the viewer state is unregistered from Houdini and \nno longer available for use."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [63387, 63468], "text": ["Click the ", {"text": ["New\u2026"], "type": "strong"}, " button to open the ", {"text": ["Viewer State Code Generator"], "type": "strong"}, " dialog. "]}], "indent": 0, "text": ["Create a new viewer state"], "role": "item", "extent": [63353, 63387], "type": "task"}, {"body": [{"indent": 4, "type": "para", "extent": [63507, 63694], "text": ["Click the ", {"text": ["Clear"], "type": "strong"}, " button to reset the python editor. The Clear button will also reset the underlying callbacks used for registering and unregistering the python \n    viewer state. "]}], "indent": 0, "text": ["Clear an existing viewer state"], "role": "item", "extent": [63468, 63507], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [{"indent": 0, "type": "para", "extent": [63755, 64068], "text": ["The ", {"text": ["Viewer State Code Generator"], "type": "strong"}, " dialog lets you create a new viewer state script. The code generator provides pre-defined samples, ranging \nfrom basic to more complete viewer state implementations. Each sample provides a class implementation and the mandatory ", {"text": ["createViewerStateTemplate"], "type": "code"}, " callback \nfunction. "]}, {"indent": 0, "type": "para", "extent": [64068, 64413], "text": ["The resulting code should help you implement your viewer state in no time and help you understand better how the different API, bindings and event handlers \ninvolved in a python viewer state can fit together. Along with samples, the code generator lets you choose from several options to generate the skeleton \ncode of specific event handlers."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [64419, 64761], "text": ["The code generator dialog is a tool for generating code, it\u2019s not a tool to assist you in editing your python state code. Once you enter and accept the \n    dialog options, the code is generated and copied into the python editor. You cannot go back to the code generator, change options and expect your code to \n    update accordingly. "]}], "indent": 0, "role": "item", "type": "note", "extent": [64413, 64419]}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [64799, 64927], "text": ["Enter the viewer state name in the ", {"text": ["Name"], "type": "strong"}, " field. This field is mandatory, if omitted an error message will popup.        "]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [64927, 65187], "text": ["Optionally, enter a ", {"text": ["Label"], "type": "strong"}, ", ", {"text": ["Description"], "type": "strong"}, " and ", {"text": ["Icon"], "type": "strong"}, " for the new viewer state. If omitted, the label and description will be inferred from the viewer state name field. If the icon is omitted, the asset\u2019s operator icon is used as the viewer state icon."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Enter basic information"], "role": "item", "extent": [64761, 64799], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [65219, 65325], "text": [{"text": ["Blank"], "type": "strong"}, ": Python state skeleton code with an empty class implementation. This is the default sample."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65325, 65412], "text": [{"text": ["Complete"], "type": "strong"}, ": Python state class implementation with all available event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65412, 65503], "text": [{"text": ["Handle"], "type": "strong"}, ": Python state class implementation with handle bindings and event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65503, 65588], "text": [{"text": ["Parameters"], "type": "strong"}, ": Python state class implementation with state parameter bindings."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65588, 65701], "text": [{"text": ["Drawable"], "type": "strong"}, ": Python state class implementation with event handlers for drawing text and geometry drawables."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65701, 65788], "text": [{"text": ["Menu"], "type": "strong"}, ": Python state class implementation with menu bindings and event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65788, 65870], "text": [{"text": ["Keyboard"], "type": "strong"}, ": Python state class implementation with keyboard event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65870, 65976], "text": [{"text": ["Selection"], "type": "strong"}, ": Python state class implementation with selector bindings and selection event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [65976, 66066], "text": [{"text": ["Drag & Drop"], "type": "strong"}, ": Python state class implementation with drag and drop event handlers."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [66066, 66223], "text": [{"text": ["Stroke"], "type": "strong"}, ": Python state class implementation to demonstrate how to derive from the ", {"text": ["sidefx_stroke.StrokeState"], "type": "code"}, " class for handling stroke interactions."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [66233, 66389], "text": ["Some samples are only available in specific node contexts. For instance the ", {"text": ["Stroke"], "type": "strong"}, " sample is available for the ", {"text": ["SOP"], "type": "code"}, " context but not for others."]}], "indent": 4, "role": "item", "type": "note", "extent": [66223, 66233]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Select a ", {"text": ["Sample"], "type": "strong"}], "role": "item", "extent": [65187, 65219], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [66427, 66540], "text": ["Optionally, select one of the ", {"text": ["Event Handler"], "type": "strong"}, " options if you wish to customize the selected sample code. "]}], "container": true, "type": "bullet_group"}], "indent": 0, "text": ["Select ", {"text": ["Event Handlers"], "type": "strong"}], "role": "item", "extent": [66389, 66427], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [66589, 66683], "text": ["Click the ", {"text": ["Accept"], "type": "strong"}, " button to generate and copy the new code over to the python editor. "]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [66683, 66852], "text": ["If a python viewer state is currently loaded in the editor, Houdini will popup a dialog asking if you want to \n      overwrite it or cancel the new viewer state. "]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [66852, 66976], "text": ["The new python state will be loaded and listed in the ", {"text": ["Viewer State Browser"], "fullpath": "/ref/windows/viewer_state_browser", "scheme": null, "type": "link", "value": "/ref/windows/viewer_state_browser"}, " tree."]}], "container": true, "type": "bullet_group"}], "indent": 0, "text": ["Generate the new python viewer state code"], "role": "item", "extent": [66540, 66589], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [67018, 67087], "text": ["Click the ", {"text": ["Cancel"], "type": "strong"}, " button to cancel the code generation task."]}], "container": true, "type": "bullet_group"}], "indent": 0, "text": ["Cancel the current code generation"], "role": "item", "extent": [66976, 67018], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [67110, 67232], "text": ["Click the ", {"text": ["Clear"], "type": "strong"}, " button to reset the dialog input including the python state name, sample, event handlers, etc\u2026"]}], "container": true, "type": "bullet_group"}], "indent": 0, "text": ["Reset the input"], "role": "item", "extent": [67087, 67110], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [67237, 67616], "text": ["For HDA states, the ", {"text": ["asset node type"], "type": "em"}, "'s name is used as the ", {"text": ["state"], "type": "em"}, "'s name by default. This is clean and makes it easy to associate the \n    state with the asset. The ", {"text": ["state"], "type": "ui"}, "'s name is then used to fill in the ", {"text": ["Default state"], "type": "ui"}, " field on the ", {"text": ["Node"], "type": "ui"}, " tab. This means the contents \n    of the ", {"text": ["Default state"], "type": "ui"}, " field would never be out-of-sync with the embedded state name."]}, {"indent": 4, "type": "para", "extent": [67616, 67683], "text": ["The generated code uses the ", {"text": ["Default state"], "type": "ui"}, " field like this:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [67683, 67840], "text": ["\n    def createViewerStateTemplate():\n        state_typename = kwargs[\"type\"].definition().sections()['DefaultState'].contents()\n    "]}, {"indent": 4, "type": "para", "extent": [67840, 67997], "text": ["If you set a state name different than the ", {"text": ["asset node type"], "type": "em"}, "'s name, remember that it must be unique across all states and installed asset names.     "]}, {"indent": 4, "type": "para", "extent": [67997, 68197], "text": ["(The contents of the ", {"text": ["Default state"], "type": "ui"}, " field are stored internally in an \"extra files\" section named ", {"text": ["DefaultState"], "type": "code"}, ", so you can read it or even change in a script using this method.)"]}], "indent": 0, "role": "item", "type": "tip", "extent": [67232, 67237]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "level": 4, "text": ["Viewer State Code Generator"], "extent": [63694, 63755], "container": true, "type": "h", "id": "viewer_state_codegen"}], "indent": 0, "level": 3, "text": ["Viewer State"], "extent": [62990, 63026], "container": true, "type": "h", "id": "viewer_state"}, {"body": [{"indent": 0, "type": "para", "extent": [68225, 68468], "text": ["This tab lets you create ", {"text": ["shelf tools"], "fullpath": "/ref/windows/edittool", "scheme": null, "type": "link", "value": "/ref/windows/edittool"}, " associated with this asset. When the asset is loaded, the tools you define on this tab will be available for the user to add to the shelf, and will show up in the viewer tab menu."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [68474, 68754], "text": ["Any tools you define on this tab will not automatically show up on the shelf whenever the asset is available. The user has to add the tools to the shelf, by right-clicking the shelf and choosing ", {"text": ["Edit Shelf Tab"], "type": "ui"}, ", then choosing the tools from a list of all available tools."]}], "indent": 0, "role": "item", "type": "note", "extent": [68468, 68474]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [68754, 69078], "text": ["When you create an asset, Houdini automatically adds a tool to this tab, that invokes a generic script to create an instance of the asset. You can edit the script of this tool, or add additional shelf tools to provide alternate ways of instantiating the asset. Click ", {"text": ["Create New"], "type": "ui"}, " and choose ", {"text": ["Tool"], "type": "ui"}, " to start a new tool."]}, {"indent": 0, "type": "para", "extent": [69078, 69135], "text": ["See ", {"text": ["how to create shelf tools"], "fullpath": "/ref/windows/edittool", "scheme": null, "type": "link", "value": "/ref/windows/edittool"}, "."]}], "indent": 0, "level": 3, "text": ["Shelf Tools"], "extent": [68197, 68225], "container": true, "type": "h", "id": "tools"}, {"body": [{"indent": 0, "type": "para", "extent": [69165, 69497], "text": ["The controls on this tab let you create ", {"text": ["handles"], "type": "em"}, " (3D user interface elements that appear in the 3D view) and bind the editable parts of the handles to parameters on your asset. This lets the users of your asset control it interactive in the view. The handles appear in the Handles tool when an instance of this asset is current."]}, {"indent": 0, "type": "para", "extent": [69497, 69603], "text": ["The controls in this pane are the same as for the ", {"text": ["Persistent handle editor"], "fullpath": "/ref/windows/handleeditor", "scheme": null, "type": "link", "value": "/ref/windows/handleeditor"}, "."]}], "indent": 0, "level": 3, "text": ["Handles tab"], "extent": [69135, 69165], "container": true, "type": "h", "id": "handles"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [69644, 69923], "text": ["This interface is leftover from old versions of Houdini. It only works for object-level assets, and only supports using HScript commands. The modern way to ask for selections is to incorporate selection in the ", {"text": ["Python tool script of a shelf tool"], "fullpath": "/ref/windows/edittool", "scheme": null, "type": "link", "value": "/ref/windows/edittool"}, "."]}, {"indent": 4, "type": "para", "extent": [69923, 69993], "text": ["This tab will probably disappear in a future version of Houdini."]}], "indent": 0, "role": "item", "type": "note", "extent": [69637, 69644]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [69993, 70260], "text": ["This tab lets you set up a (possibly multi-step) selection process to allow the user to select what (objects/geometry) the node applies to when you create it. For example, you have the node prompt the user to select an object your object-level asset will attach to."]}, {"indent": 0, "type": "para", "extent": [70260, 70944], "text": ["The Type field is not editable and reflects the basic type of the\nselector. The Name field is the english name which should uniquely\ndefine this selector with respect to the operator type. The Prompt\nfield displays the string during the selection process. The\nMulti-selection checkbox indicates whether or not multiple object\nselections are allowed for the current selector. The editable text\nfield allows for a user-defined script to be executed when object\nselections are finished. The input objects are accessed by the\nvariables ", {"text": ["$argc"], "type": "code"}, ", and ", {"text": ["$arg0, $arg1,..., $arg($argc-1)"], "type": "code"}, ", where ", {"text": ["$argc"], "type": "code"}, " is\nthe number of inputs and the remaining variables represent each of\nthe input objects."]}, {"indent": 0, "type": "para", "extent": [70944, 71083], "text": ["There is no variable which holds a path to your current node; however, you can retrieve the current node using the ", {"text": ["pwd"], "type": "code"}, " HScript command."]}, {"indent": 0, "type": "para", "extent": [71083, 71184], "text": ["For example, you can wire in the first selected input into your current node by doing the following:"]}, {"lang": null, "indent": 0, "type": "pre", "extent": [71184, 71247], "text": ["\nset curNode = `run(\"pwd\")`\nopwire -n $arg0 -1 $curNode\n"]}], "indent": 0, "level": 3, "text": ["Selectors tab"], "extent": [69603, 69637], "container": true, "type": "h", "id": "selectors"}], "indent": 0, "level": 2, "text": ["Interactive tab"], "extent": [62867, 62889], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": ["Any \"unsaved\" files (either by changing them in the editor, or because they're newly added) will have an asterisk in the section list."], "attrs": {"glyph": "fa-asterisk"}, "extent": [71291, 71429], "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [71494, 71613], "text": ["Type the filename in the ", {"text": ["File name"], "type": "ui"}, " field, or click the\n      + button next to the field to choose the file."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [71613, 71857], "text": [{"text": ["Section name"], "type": "ui"}, " is the name of the file inside the HDA.\n      It defaults to the base name of the file (that is, the\n      file name without any path information). You can edit it\n      to give the file a different name inside the HDA."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [71857, 71884], "text": ["Click ", {"text": ["Add File"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Add a new file to the definition"], "role": "item", "extent": [71454, 71494], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [71924, 72084], "text": ["Select the file in the section list to show its contents\n      in the text editor on the right, along with the size and\n      time stamp of the section."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [72084, 72129], "text": ["Edit the contents in the text editor."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [72129, 72153], "text": ["Click ", {"text": ["Apply"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Edit the contents of a text file"], "role": "item", "extent": [71884, 71924], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [72195, 72239], "text": ["Select the file in the section list."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [72239, 72349], "text": ["Click ", {"text": ["Save As File"], "type": "ui"}, " in the lower right to save the\n      contents of the section as a file on disk."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [72349, 72377], "text": ["Edit the saved file."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [72377, 72494], "text": ["Add the file back into the HDA with the same section name\n      to replace the old binary using ", {"text": ["Add File"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": ["Edit the contents of a binary file"], "role": "item", "extent": [72153, 72195], "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [72515, 72592], "text": ["Click the X button next to the file\u2019s name in the section\n      list."]}], "container": true, "type": "bullet_group"}], "indent": 0, "text": ["Delete a file"], "role": "item", "extent": [72494, 72515], "type": "task"}, {"body": [{"indent": 4, "type": "para", "extent": [72620, 72981], "text": ["Wherever Houdini takes a filename, you can enter a ", {"text": ["reference to an embedded file in an asset"], "fullpath": "/assets/opdef", "scheme": null, "type": "link", "value": "/assets/opdef"}, " instead. For example, your asset might take a path to a texture file, and if that parameter is blank, use an embedded default texture. To point a node inside the asset at the embedded default texture file, you would use a reference like this:"]}, {"indent": 4, "type": "para", "extent": [72981, 73020], "text": [{"text": ["opdef:.?default_texture.jpg"], "type": "code"}]}, {"indent": 4, "type": "para", "extent": [73020, 73053], "text": ["\u2026instead of a file path."]}], "indent": 0, "text": ["Use an embedded file"], "role": "item", "extent": [72592, 72620], "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}], "indent": 0, "level": 2, "text": ["Extra Files tab"], "extent": [71247, 71291], "container": true, "type": "h", "id": "extra_files"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [73104, 73350], "text": ["This shows the path of the specific node instance Houdini will use to update the asset contents if you click ", {"text": ["Apply"], "type": "ui"}, " or ", {"text": ["Accept"], "type": "ui"}, " in this window. (This is the node you right-clicked and chose ", {"text": ["Type properties"], "type": "ui"}, " for to open this window.)"]}], "indent": 0, "type": "dt", "extent": [73075, 73104], "text": ["Save information from node"]}, {"body": [{"indent": 4, "type": "para", "extent": [73380, 73659], "text": ["When this is off, when you click ", {"text": ["Apply"], "type": "ui"}, " or ", {"text": ["Accept"], "type": "ui"}, " in this window, changes you made in this window will be saved to the asset definition, but changes to the current node (its parameter values/defaults and contents) are ", {"text": ["not"], "type": "em"}, " saved as part of the asset definition."]}, {"indent": 4, "type": "para", "extent": [73659, 73724], "text": ["You should not turn this off unless you have a good reason."]}], "indent": 0, "type": "dt", "extent": [73350, 73380], "text": ["Save Contents and Parameters"]}, {"body": [{"indent": 4, "type": "para", "extent": [73761, 74055], "text": ["When this is on and you save the node type definition, the current node\u2019s ", {"text": ["defaults"], "type": "em"}, " are saved as the initial values for new instances. When this is off and you save the node type definition, the current node\u2019s ", {"text": ["current parameter values"], "type": "em"}, " are saved as the initial values for new instances."]}], "indent": 0, "type": "dt", "extent": [73724, 73761], "text": ["Save Defaults as Initial Parameters"]}, {"body": [{"indent": 4, "type": "para", "extent": [74078, 74295], "text": ["If this is on and you save the node type definition, any ", {"text": ["spare parameters"], "fullpath": "/network/spare", "scheme": null, "type": "link", "value": "/network/spare"}, " on the current node are saved as part of the node type, so any new instances would have the same spare parameters added."]}], "indent": 0, "type": "dt", "extent": [74055, 74078], "text": ["Save Spare Parameters"]}, {"body": [{"indent": 4, "type": "para", "extent": [74320, 74392], "text": ["Never turn this off. See ", {"text": ["Unlock new nodes on creation"], "type": "ui"}, " instead."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [74426, 74708], "text": ["When Houdini creates new instances of this node type, they are automatically unlocked (that is, editable). This was added for example files. When you put down an example asset, you don\u2019t have to unlock it before you can go inside it and play with the nodes inside."]}, {"indent": 8, "type": "para", "extent": [74708, 74800], "text": ["This should always be off for assets you will give to users for use in production."]}], "indent": 4, "type": "dt", "extent": [74392, 74426], "text": ["Unlock New Nodes on Creation"]}, {"body": [{"indent": 8, "type": "para", "extent": [74823, 75040], "text": ["Gzip is faster, Blosc gives better compression but may be slightly slower. The decompression speed of Gzip is practically unnoticeable on modern hardware, so there\u2019s usually no point to using No Compression."]}], "indent": 4, "type": "dt", "extent": [74800, 74823], "text": ["Compress Contents"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "extent": [74295, 74320], "text": ["Save Contents as Locked"]}, {"body": [{"indent": 4, "type": "para", "extent": [75076, 75171], "text": ["Show a warning if there references in the asset to nodes outside the asset when you save."]}], "indent": 0, "type": "dt", "extent": [75040, 75076], "text": ["Check for External Node References"]}, {"body": [{"indent": 4, "type": "para", "extent": [75189, 75341], "text": ["When this checkbox is turned on, Houdini saves compiled VEX code inside the HDA and uses it instead of generating that code from the node network."]}, {"indent": 4, "type": "para", "extent": [75341, 75856], "text": ["Currently, it applies mainly to the Shader Builder SHOPs, which contain VOP nodes. Traditionally Houdini would use nodes to generate .vfl source code and then compile it to vex. By using the cached vex code, Houdini saves time, which can be quite substantial for complex shaders. Also, the synched HDA nodes don\u2019t need to create child nodes to build the VOP network inside them (since they are not needed to generate code), so time is saved by skipping the creation of node network when loading hip files. "]}], "indent": 0, "type": "dt", "extent": [75171, 75189], "text": ["Save Cached Code"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Save tab"], "extent": [73053, 73075], "container": true, "type": "h", "id": "save"}], "summary": ["The type properties window lets you edit the metadata and parameter interface of a digital asset node type."], "type": "root", "attrs": {"bestbet": "disablewhen", "helpid": "h.opmenu.typeprop"}, "title": ["Operator Type Properties window"]}