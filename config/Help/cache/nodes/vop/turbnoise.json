{"body": [{"indent": 0, "text": ["Turbulent Noise"], "type": "title", "extent": [69, 89], "level": 0}, {"indent": 0, "type": "summary", "extent": [89, 211], "text": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."]}, {"indent": 0, "type": "para", "extent": [211, 340], "text": ["This operator can compute three types of 1D and 3D noise with the\nability to compute turbulence with roughness and attenuation:"]}, {"lang": null, "indent": 0, "type": "pre", "extent": [340, 654], "text": ["\nPerlin noise              (string value \"pnoise\")\nOriginal Perlin noise     (string value \"onoise\")\nSparse Convolution noise  (string value \"snoise\")\nAlligator noise           (string value \"anoise\")\nSimplex noise             (string value \"xnoise\")\nZero Centered Perlin      (string value \"correctnoise\")\n"]}, {"indent": 0, "type": "para", "extent": [654, 853], "text": ["Original Perlin noise is similar to Perlin noise, but marginally less\nefficient in computation and with different characteristics. The bounds\non the noise are roughly (-1, 1) when turbulence is 0."]}, {"indent": 0, "type": "para", "extent": [853, 1040], "text": ["Perlin noise sums octaves of a noise with range about (0, 1), resulting in a\nnon-zero centered result. Thus the zero centered perlin better matches the\nranges of the other noise fields."]}, {"indent": 0, "type": "para", "extent": [1040, 1396], "text": ["Sparse Convolution noise is similar to Worley noise. The noise returned\nis based on the weights of all of the closest points, with each point\u2019s\ncontribution based on a meta-ball like rolloff curve. That is, if the\nsample point is close to the sphere, its contribution will be greater.\nThe bounds on the noise are roughly (-1.7, 1.7) when turbulence is 0."]}, {"indent": 0, "type": "para", "extent": [1396, 1642], "text": ["Alligator noise is similar to Worley noise. It is currently not possible\nto simulate Alligator noise using the Worley functions, but it is\npossible to get a very similar 'look'. The bounds on the noise are\nroughly (0, 0.5) when turbulence is 0."]}, {"indent": 0, "type": "para", "extent": [1642, 1858], "text": ["Simplex noise is very close to Perlin noise, except with the samples on a\nsimplex mesh rather than a grid.  This results in less grid artifacts.  It also\nuses a higher order ", {"text": ["bspline"], "type": "code"}, " to provide better derivatives."]}, {"indent": 0, "type": "para", "extent": [1858, 1929], "text": ["The relative costs for computing noise of different types is roughly:"]}, {"lang": null, "indent": 0, "type": "pre", "extent": [1929, 2262], "text": ["\nCost | Noise Type\n-----+-------------------------\n 1.0 | Perlin Noise             (see Periodic Noise operator)\n 1.1 | Original Perlin Noise\n 1.8 | Worley Noise             (see Worley Noise operator)\n 1.8 | Periodic Worley Noise    (see Periodic Worley Noise operator)\n 2.1 | Sparse Convolution Noise\n 2.3 | Alligator Noise\n"]}, {"indent": 0, "type": "para", "extent": [2262, 2537], "text": ["Make sure at least the Position (", {"text": ["pos"], "type": "code"}, ") input is connected in order to\nnotice any noise. The easiest way to accomplish this is to pipe the\nglobal variable ", {"text": ["P"], "type": "code"}, " into the ", {"text": ["pos"], "type": "code"}, " input. All global variables are\naccessible from the ", {"text": ["Global Variables"], "fullpath": "/nodes/vop/global", "scheme": "Node", "type": "link", "value": "/nodes/vop/global"}, " operator."]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [2546, 2577], "text": [{"text": "", "fullpath": "/nodes/vop/periodicnoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/periodicnoise"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [2577, 2602], "text": [{"text": "", "fullpath": "/nodes/vop/aanoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/aanoise"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [2602, 2631], "text": [{"text": "", "fullpath": "/nodes/vop/worleynoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/worleynoise"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [2631, 2662], "text": [{"text": "", "fullpath": "/nodes/vop/pworleynoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/pworleynoise"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [2537, 2546], "container": true, "type": "related_section", "id": "related"}], "summary": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."], "type": "root", "attrs": {"version": null, "namespace": null, "internal": "turbnoise", "context": "vop", "type": "node", "icon": "VOP/turbnoise"}, "title": ["Turbulent Noise"]}