{"body": [{"indent": 0, "text": ["Curl Noise"], "type": "title", "extent": [48, 63], "level": 0}, {"indent": 0, "type": "summary", "extent": [63, 127], "text": ["Creates divergence-free 3D noise using a curl function."]}, {"indent": 0, "type": "para", "extent": [127, 344], "text": ["This operator generates divergence-free 3D noise, computed using a curl \nfunction on standard Perlin Noise.  The operator can handle intervening \ngeometry, allowing the noise field to \"flow\" around the given object."]}, {"indent": 0, "type": "para", "extent": [344, 631], "text": ["The inputs of the Curl Noise operator have the same effect as their \ncounterparts in the ", {"text": ["Turbulent Noise"], "fullpath": "/nodes/vop/turbnoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/turbnoise"}, " operator. The four\nnew inputs are ", {"text": ["Step Size"], "type": "ui"}, " (", {"text": ["h"], "type": "code"}, "), ", {"text": ["Surface Effect Radius"], "type": "ui"}, " (", {"text": ["d"], "type": "code"}, "), ", {"text": ["Distance to Surface"], "type": "ui"}, " \n(", {"text": ["dist"], "type": "code"}, "), and ", {"text": ["Surface Normal"], "type": "ui"}, " (", {"text": ["normal"], "type": "code"}, ").  "]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [637, 749], "text": ["When the output is 4D noise, the ", {"text": ["Noise Type"], "type": "ui"}, " parameter has no effect and only ", {"text": ["Perlin Noise"], "type": "ui"}, " is used."]}], "indent": 0, "role": "item", "type": "note", "extent": [631, 637]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [749, 896], "text": [{"text": ["Step Size"], "type": "ui"}, " controls the resolution of the curl function used to generate \nthe noise.  A lower value will lead to tighter spirals in the noise."]}, {"indent": 0, "type": "para", "extent": [896, 1102], "text": [{"text": ["Surface Effect Radius"], "type": "ui"}, " determines the magnitude of the effect that intervening\ngeometry has on the created noise field.  A higher value causes greater \ndisturbances resulting from intervening geometry."]}, {"indent": 0, "type": "para", "extent": [1102, 1422], "text": [{"text": ["Distance to Surface"], "type": "ui"}, " is the signed distance value indicating the distance\nfrom the current position to the closest surface of intervening geometry.  \nPiping in the result of a signed distance field with respect to a piece of \ngeometry will allow the generated noise to react appropriately to that \nsurface geometry."]}, {"indent": 0, "type": "para", "extent": [1422, 1823], "text": [{"text": ["Surface Normal"], "type": "ui"}, " is the normal of the surface closest to the current position.\nPiping in a volume gradient is one way of passing in the desired normal values,\nand the result is a noise field that \"flows\" along the given surface.  For best results, ", {"text": ["Distance to Surface"], "type": "ui"}, " and ", {"text": ["Surface Normal"], "type": "ui"}, " should be informed by the same\nsurface for each position that the Curl Noise operator is performed on."]}, {"indent": 0, "type": "para", "extent": [1823, 2304], "text": [{"text": ["Collision SDF"], "type": "ui"}, " is a file to load a collision field from.  This will override the normal and distance values, instead, those values will be computed directly from the first volume primitive in the file.  This allows the distances to vary within the noise computation, producing more accurate boundaries than if only a single sample is provided.   Note the file does not have to be a disk file, it can also be an ", {"text": ["op:"], "type": "code"}, " reference to a node or an ", {"text": ["opinput:"], "type": "code"}, " reference to an input."]}, {"indent": 0, "type": "para", "extent": [2304, 2559], "text": [{"text": ["Enable Bouncing SDF"], "type": "ui"}, " will, when the sample point is inside the surface,\nreflect the noise value in the normal direction so it is pointing outwards.\nThis helps ensure any particles that end up inside the surface are pushed\noutwards by the noise field."]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [2568, 2595], "text": [{"text": "", "fullpath": "/nodes/vop/turbnoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/turbnoise"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [2595, 2620], "text": [{"text": "", "fullpath": "/nodes/vop/aanoise", "scheme": "Node", "type": "link", "value": "/nodes/vop/aanoise"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [2559, 2568], "container": true, "type": "related_section", "id": "related"}], "summary": ["Creates divergence-free 3D noise using a curl function."], "type": "root", "attrs": {"namespace": null, "internal": "curlnoise", "type": "node", "version": null, "context": "vop"}, "title": ["Curl Noise"]}