{"body": [{"indent": 0, "text": ["Parameter"], "type": "title", "extent": [69, 83], "level": 0}, {"indent": 0, "type": "summary", "extent": [83, 133], "text": ["Represents a user-controllable parameter."]}, {"indent": 0, "type": "para", "extent": [133, 395], "text": ["The Parameter node represents the value of one of the parameters the\nuser can set in the shader\u2019s parameter editor interface.\nFor example, in a Balloon shader, you could define a parameter for\nthe Balloon Color, allowing the user to control the shader\u2019s color."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [418, 763], "text": ["The name of the new parameter, both in the VEX function\n    declaration, the definition of any OP type that uses the VOPNET,\n    and the VOP tile\u2019s output. If a parameter by this name already\n    exists, this operator will reference it and will disable most of\n    of its own fields, such as the Parameter Type and Parameter\n    Label."]}, {"indent": 4, "type": "para", "extent": [763, 830], "text": ["The name must not be a ", {"fragment": "#reserved", "text": ["reserved keyword"], "value": "/vex/lang#reserved", "fullpath": "/vex/lang#reserved", "scheme": null, "type": "link"}, "."]}], "indent": 0, "text": ["Name"], "role": "item", "extent": [407, 418], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [838, 1079], "text": ["The optional prefix to prepend to the parameter name.  The prefix changes\n    the final name of the new parameter, both in the VEX function declaration,\n    the definition of any OP type that uses the VOPNET, and the VOP tile\u2019s output."]}], "indent": 0, "text": ["Prefix"], "role": "item", "extent": [830, 838], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1088, 1334], "text": ["The optional postfix to append to the parameter name.  The postfix changes\n    the final name of the new parameter, both in the VEX function declaration,\n    the definition of any OP type that uses the VOPNET, and the VOP tile\u2019s output."]}], "indent": 0, "text": ["Postfix"], "role": "item", "extent": [1079, 1088], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1341, 1506], "text": ["A human-readable label for this parameter. Appears in the\n    owner node\u2019s parameters and the tooltip when the user\n    hovers over the output on the VOP tile."]}], "indent": 0, "text": ["Label"], "role": "item", "extent": [1334, 1341], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1518, 1598], "text": ["Toggles the display of the parameter label in the owner node\u2019s parameters."]}], "indent": 0, "text": ["Show Label"], "role": "item", "extent": [1506, 1518], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1604, 1827], "text": ["Specifies the VEX data type of the new parameter. It can also\n    specify how the parameter should be represented in an OP dialog.\n    For example, a VEX vector can be viewed as 3 float values or as\n    a color value."]}], "indent": 0, "text": ["Type"], "role": "item", "extent": [1598, 1604], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1843, 2014], "text": ["Depending on the parameter type selected, it represents the\n    default value of the parameter in the VEX function and in the OP\n    type that uses this VOP network."]}], "indent": 0, "text": ["Default Values"], "role": "item", "extent": [1827, 1843], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2023, 2152], "text": ["Brief description of the parameter.  The comment is included after the\n    parameter declaration in the generated code."]}], "indent": 0, "text": ["Comment"], "role": "item", "extent": [2014, 2023], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2195, 2764], "text": ["When several Parameter VOPs have the same Parameter Name, only\n    one of the nodes is used to control the attributes of the\n    parameter. Houdini decides which node to use for this by\n    searching all the nodes according to the user defined order,\n    then traversing inside subnets. If none of them have this\n    parameter turned on, the first one found is used to set the\n    parameter attributes. If one or more do have this option turned\n    on, the first one with this option is used, even if another node\n    (with this option turned off) is found first."]}], "indent": 0, "text": ["Use This Node to Set Parameter Attributes"], "role": "item", "extent": [2152, 2195], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2788, 3154], "text": ["When several Parameter or Bind VOPs have the same ", {"text": ["Parameter Name"], "type": "ui"}, ", \n    some other node will determine export context.  However, it may be\n    desirable to have each Parameter VOP exporting in a different context.\n    In such cases, setting this parameter will enable this node to specify\n    own export context, independent of the primary definer node."]}], "indent": 0, "text": ["Use Own Export Context"], "role": "item", "extent": [2764, 2788], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3194, 3544], "text": ["If true, the VEX function parameter is checked to see if it is\n    bound to an attribute in the current VEX context (e.g. point\n    color). If not bound, the input value is is assigned to the VEX\n    parameter. In a Surface VOP context, a VEX parameter is bound if\n    the geometry being shaded has an attribute with the VEX\n    parameter name."]}], "indent": 0, "text": ["Use Input Value If Parameter Not Bound"], "role": "item", "extent": [3154, 3194], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3573, 3770], "text": ["If true, the shader node parameter defined by this Parameter VOP\n    will also have a corresponding input connector, providing such \n    shader nodes can have input and output connectors."]}], "indent": 0, "text": ["Has Corresponding Connector"], "role": "item", "extent": [3544, 3573], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3778, 4230], "text": ["Specifies whether the new parameter can be exported to other\n    contexts (written to as well as read from). If set to ", {"text": ["Always"], "type": "ui"}, " or\n    ", {"text": ["When Input is Connected"], "type": "ui"}, ", this operator gets an input.  The value\n    wired into this input is then assigned to the exported parameter.\n    In a Surface network, exported parameters can be used to create\n    deep rasters. In SOP and POP networks, the exported parameters\n    create new geometry attributes."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [4241, 4285], "text": ["The parameter will not be exported."]}], "indent": 4, "type": "dt", "extent": [4230, 4241], "text": ["Never"]}, {"body": [{"indent": 8, "type": "para", "extent": [4297, 4337], "text": ["The parameter will be exported."]}], "indent": 4, "type": "dt", "extent": [4285, 4297], "text": ["Always"]}, {"body": [{"indent": 8, "type": "para", "extent": [4366, 4479], "text": ["The parameter will only be exported if the node\u2019s input is\n        ultimately connected to another VOP."]}], "indent": 4, "type": "dt", "extent": [4337, 4366], "text": ["When Input is Connected"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Export"], "role": "item", "extent": [3770, 3778], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4498, 4646], "text": ["The context or contexts that the parameter is exported to.  Use whitespace\n    characters as separators when specifying multiple contexts."]}], "indent": 0, "text": ["Export in Context"], "role": "item", "extent": [4479, 4498], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4660, 4806], "text": ["If the parameter type is String or Integer, then you can provide a menu of\n    choices instead of a string entry field or an integer slider."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [4819, 4899], "text": ["No menu is provided and the entry field or slider is displayed instead."]}], "indent": 4, "type": "dt", "extent": [4806, 4819], "text": ["No Menu"]}, {"body": [{"indent": 8, "type": "para", "extent": [4920, 5020], "text": ["A menu is generated from the list of items specified by the ", {"text": ["Menu Items"], "type": "code"}, "\n        parameter."]}], "indent": 4, "type": "dt", "extent": [4899, 4920], "text": ["Menu from Items"]}, {"body": [{"indent": 8, "type": "para", "extent": [5042, 5141], "text": ["A menu is generated from the script specified by the ", {"text": ["Menu Script"], "type": "code"}, "\n        parameter."]}], "indent": 4, "type": "dt", "extent": [5020, 5042], "text": ["Menu from Script"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Provide Menu"], "role": "item", "extent": [4646, 4660], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5153, 5354], "text": ["A list of pairs of strings. The first string in each pair is the\n    parameter value if that menu item is chosen. The second string\n    is the label that appears in the dialog for that menu item."]}, {"indent": 4, "type": "para", "extent": [5354, 5488], "text": ["The strings are separated by spaces.  If you want a value or label to\n    contain a space, surround the item with double quotes."]}], "indent": 0, "text": ["Menu Items"], "role": "item", "extent": [5141, 5153], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5501, 5643], "text": ["A script that populates the generated menu.  You can write the script in\n    either Hscript or Python. We highly recommend using Python."]}, {"indent": 4, "type": "para", "extent": [5643, 5788], "text": ["A Python script should generate a list (or tuple) of strings where the odd\n    items are values and the even items are labels, for example:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [5788, 5869], "text": ["\n    [\"10\", \"Light\", \"50\", \"Medium\", \"100\", \"Heavy\"]\n    "]}, {"indent": 4, "type": "para", "extent": [5869, 6167], "text": ["Houdini handles the Python script in an odd way: if the script field\n    contains a ", {"text": ["single line"], "type": "em"}, ", Houdini treats it as an ", {"text": ["expression"], "type": "em"}, " and expects\n    it to evaluate to a list. If it has ", {"text": ["multiple lines"], "type": "em"}, ", Houdini treats it as\n    a ", {"text": ["function body"], "type": "em"}, " and it must end with a ", {"text": ["return"], "type": "code"}, " statement:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [6167, 6329], "text": ["\n    result = []\n    for input_node in hou.pwd().inputs():\n        result += [input_node.path(), input_node.name()]\n    return result\n    "]}, {"indent": 4, "type": "para", "extent": [6329, 6408], "text": ["For Hscript, the script should print a space-separated list of the form:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [6408, 6479], "text": ["\n        echo \"token1\" \"Label 1\" \"token2\" \"Label 2\" ...\n    "]}], "indent": 0, "text": ["Menu Script"], "role": "item", "extent": [5488, 5501], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6502, 6561], "text": ["The language used by the script populating the menu."]}], "indent": 0, "text": ["Menu Script Language"], "role": "item", "extent": [6479, 6502], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6572, 6720], "text": ["Do not show the parameter in the shader\u2019s parameter interface.\n    The parameter still exists and will be used to generate shader\n    strings."]}], "indent": 0, "text": ["Invisible"], "role": "item", "extent": [6561, 6572], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"type": "para", "indent": 0, "extent": [22331, 22610], "text": ["\"Tags\" let you attach arbitrary key/value data to the parameter template. You can access this data using ", {"fragment": "#tags", "text": "", "value": "/hom/hou/ParmTemplate#tags", "fallback_text": "hou.ParmTemplate.tags", "fullpath": "/hom/hou/ParmTemplate#tags", "scheme": "Hom", "type": "link"}, ". Some tags are recognized and used by different ", {"fragment": "#parmtypes", "text": ["parameter types"], "value": "#parmtypes", "fullpath": "/ref/windows/optype#parmtypes", "scheme": null, "type": "link"}, ". You can also use them to store your own per-parameter hidden data."]}, {"type": "para", "indent": 0, "extent": [22610, 22891], "text": ["Tags are used by the 3D viewer to signal when a parameter should be treated as an OpenGL value. For example, attaching the \"OpenGL  \u2192 Diffuse\" tag to a parameter on a material node makes the 3D viewer treat that parameter\u2019s value as the diffuse color when displaying the surface."]}, {"body": [{"type": "bullet", "blevel": 2, "indent": 0, "extent": [22891, 23054], "text": ["The tags are listed in a table in the \"Parameter description\" sub-pane on the right, when you select a parameter from \"Existing Parameters\" list in the middle."]}, {"type": "bullet", "blevel": 2, "indent": 0, "extent": [23054, 23191], "text": ["Click ", {"text": ["Built in tags"], "type": "ui"}, " below the tag table to choose from a tree of different tags recognized by Houdini, including the OpenGL tags."]}, {"type": "bullet", "blevel": 2, "indent": 0, "extent": [23191, 23364], "text": ["Some parameters may have internal tags attached to them which store options for the parameter\u2019s look and behavior.  These internal tags are not editable in the tag list."]}, {"type": "bullet", "blevel": 2, "indent": 0, "extent": [23364, 23415], "text": ["Tag names must be unique within each parameter."]}, {"type": "bullet", "blevel": 2, "indent": 0, "extent": [23415, 23535], "text": ["You can use the Key-Value Dictionary parameter type to add a tag-like editing interface to your own digital assets."]}], "type": "bullet_group", "container": true}], "indent": 0, "level": 2, "text": ["Parameter tags"], "attrs": {"display": "pull left"}, "extent": [22280, 22310], "container": true, "type": "h", "id": "tags"}, {"body": [{"type": "para", "indent": 0, "extent": [58232, 58406], "text": ["The contents of the text field appear in the help browser when the user clicks the help button for a node of this operator type in the ", {"text": ["parameter editor"], "fullpath": "/ref/panes/parms", "scheme": null, "type": "link", "value": "/ref/panes/parms"}, "."]}, {"type": "para", "indent": 0, "extent": [58406, 58595], "text": ["This help can be HTML, or you can use a simple but powerful wiki format to create documentation that looks like the native Houdini help. See ", {"text": ["how to write wiki-format help"], "fullpath": "/help/format", "scheme": null, "type": "link", "value": "/help/format"}, "."]}], "container": true, "level": 2, "text": ["Help tab"], "extent": [58210, 58232], "indent": 0, "type": "h", "id": "help"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [395, 407], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [6998, 7190], "text": ["The value assigned to the new parameter if the ", {"text": ["Export\n    Parameter"], "type": "ui"}, " toggle is checked or if the parameter is not bound\n    when ", {"text": ["Use Input Value If Parameter Not Bound"], "type": "ui"}, " is checked."]}], "indent": 0, "type": "dt", "extent": [6972, 6998], "text": ["Unbound or Export Value"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [6964, 6972], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [7211, 7262], "text": ["The value of this VEX function parameter."]}], "indent": 0, "type": "dt", "extent": [7199, 7211], "text": ["Parameter"]}, {"body": [{"indent": 4, "type": "para", "extent": [7282, 7339], "text": ["True if the new parameter is bound to an attribute."]}], "indent": 0, "type": "dt", "extent": [7262, 7282], "text": ["Is Parameter Bound"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [7190, 7199], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [7348, 7370], "text": [{"text": "", "fullpath": "/nodes/vop/bind", "scheme": "Node", "type": "link", "value": "/nodes/vop/bind"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7370, 7396], "text": [{"text": "", "fullpath": "/nodes/vop/constant", "scheme": "Node", "type": "link", "value": "/nodes/vop/constant"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7396, 7420], "text": [{"text": "", "fullpath": "/nodes/vop/global", "scheme": "Node", "type": "link", "value": "/nodes/vop/global"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7420, 7444], "text": [{"text": "", "fullpath": "/nodes/vop/output", "scheme": "Node", "type": "link", "value": "/nodes/vop/output"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7444, 7475], "text": [{"text": "", "fullpath": "/nodes/vop/shadinglayer", "scheme": "Node", "type": "link", "value": "/nodes/vop/shadinglayer"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [7339, 7348], "container": true, "type": "related_section", "id": "related"}], "title": ["Parameter"], "summary": ["Represents a user-controllable parameter."], "attrs": {"version": null, "namespace": null, "internal": "parameter", "context": "vop", "type": "node", "icon": "VOP/parameter"}, "included": ["/ref/windows/optype"], "type": "root"}