{"body": [{"indent": 0, "text": ["Pyro Solver"], "type": "title", "extent": [80, 96], "level": 0}, {"indent": 0, "type": "summary", "extent": [96, 136], "text": ["Runs a dynamic Pyro simulation."]}, {"indent": 0, "type": "para", "extent": [136, 227], "text": ["The Pyro Solver is a wrapper around a DOP network to simplify the running\nof Pyro solves."]}, {"indent": 0, "type": "para", "extent": [227, 560], "text": ["The first input provides the sources for the Pyro simulation.  This\nshould be a set of named volumes.   The exact names required are determined\nby the ", {"text": ["Sourcing"], "type": "ui"}, " tab.   The ", {"text": ["Pyro Source SOP"], "fullpath": "/nodes/sop/pyrosource", "scheme": "Node", "type": "link", "value": "/nodes/sop/pyrosource"}, " and ", {"text": ["Volume Rasterize Attributes SOP"], "fullpath": "/nodes/sop/volumerasterizeattributes", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumerasterizeattributes"}, " are useful tools for creating source volumes."]}, {"indent": 0, "type": "para", "extent": [560, 1037], "text": ["The second input provides the collisions for the Pyro simulation.  It\nshould be a SDF VDB, such as the second output of the ", {"text": ["Collision Source SOP"], "fullpath": "/nodes/sop/collisionsource", "scheme": "Node", "type": "link", "value": "/nodes/sop/collisionsource"}, " or the main output of the ", {"text": ["VDB From Polygons SOP"], "fullpath": "/nodes/sop/vdbfrompolygons", "scheme": "Node", "type": "link", "value": "/nodes/sop/vdbfrompolygons"}, ".  If the collision\nis animating, points with a ", {"text": ["v"], "type": "code"}, " attribute can be used to describe\nthe motion.  The two outputs of the ", {"text": ["Collision Source SOP"], "fullpath": "/nodes/sop/collisionsource", "scheme": "Node", "type": "link", "value": "/nodes/sop/collisionsource"}, " can be merged\nand used as the second input to provide this."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [1093, 1138], "text": ["Clears the entire simulation cache."]}], "indent": 0, "text": ["Reset Simulation"], "role": "item", "attrs": {"id": "resimulate"}, "extent": [1049, 1068], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1176, 1256], "text": ["What frame on the Houdini playbar that the simulation should begin at."]}], "indent": 0, "text": ["Start Frame"], "role": "item", "attrs": {"id": "startframe"}, "extent": [1138, 1151], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [1299, 1501], "text": ["The size of a voxel in the Pyro simulation.  Cutting your voxel size in\n    half will require eight times the memory and time, so a careful trade off\n    between detail and pragmatism is required."]}], "indent": 0, "text": ["Voxel Size"], "role": "item", "attrs": {"id": "divsize"}, "extent": [1268, 1281], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1521, 1613], "text": ["The origin of the pyro simulation. This is used as the center of the\n    maximum size."]}], "indent": 0, "text": ["Center"], "role": "item", "attrs": {"id": "t"}, "extent": [1501, 1509], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1641, 1818], "text": ["The maximum size the pyro sim can reach.  This is measured relative\n    to the center.  This can be useful to avoid unexpectedly running\n    out of memory from bad inputs."]}], "indent": 0, "text": ["Max Size"], "role": "item", "attrs": {"id": "maxsize"}, "extent": [1613, 1623], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"indent": 4, "type": "para", "extent": [1846, 2279], "text": ["By default smoke operates in an open container.  When the maximum\n    bounds are reached, the smoke just vanishes.  Instead one can\n    restrict by adding implicit walls past which the smoke cannot move.\n    These form stronger collision boundaries than normal colliders,\n    but are restricted in their shape.   The smoke cannot be fully\n    enclosed in a box, so either a floor or ceiling can be specified,\n    but not both."]}], "indent": 0, "level": 3, "text": ["Boundary Conditions"], "extent": [1818, 1846], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [2353, 2669], "text": ["The collision will be built using the first volume or VDB in the\n        input, which will be treated as an SDF.   Velocities will be\n        determined by ", {"text": ["v"], "type": "code"}, " attribute on the points of the input using\n        nearest point.  You can merge the two outputs of the Collision Source\n        SOP to feed this."]}], "indent": 4, "type": "dt", "extent": [2331, 2353], "text": ["Collision Source"]}, {"body": [{"indent": 8, "type": "para", "extent": [2696, 3016], "text": ["The collision will be set to the ", {"text": ["collision"], "type": "code"}, " named volumes and\n        VDBs in the input which should be SDFs.   The velocity will be set to\n        the ", {"text": ["v"], "type": "code"}, " named volumes and VDBs in the input.  This requires more\n        manual setup but can provide the fastest and cleanest setting\n        of collisions."]}], "indent": 4, "type": "dt", "extent": [2669, 2696], "text": ["SDF + Volume Velocity"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Create From"], "role": "item", "attrs": {"id": "col_type"}, "extent": [2298, 2312], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3060, 3353], "text": ["In the end, collisions are always performed at the simulation resolution.\n    However, often a lower fixed resolution can be used for the signed distance\n    field of the object.  This usually should be the same resolution that\n    was used to generate the collision volume upstream."]}], "indent": 0, "text": ["Collision Voxel Size"], "role": "item", "attrs": {"id": "col_divsize"}, "extent": [3016, 3038], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3392, 3617], "text": ["Often if sourcing fire on the surface of an object one doesn\u2019t want the\n    fire to get stuck in the surface, so it is useful to shrink the object\n    a bit.  This can provide that by offsetting the collision distances."]}, {"indent": 4, "type": "para", "extent": [3617, 3879], "text": ["NOTE: If the collision volume is a VDB it can only be shrunk so\n    far before it will disappear entirely.  This is usually around three\n    times its voxel size.  Adjust the bandwidth options to allow more extreme\n    offsets or use a VDB Reshape SDF SOP."]}], "indent": 0, "text": ["Collision Offset"], "role": "item", "attrs": {"id": "col_offset"}, "extent": [3353, 3371], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3928, 4077], "text": ["Controls if the collision geometry is rebuilt every frame or the\n    first frame is used.  Not rebuilding can result in faster simulations."]}], "indent": 0, "text": ["Use Deforming Geometry"], "role": "item", "attrs": {"id": "col_animategeo"}, "extent": [3879, 3903], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Collisions"], "extent": [2279, 2298], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4095, 4665], "text": ["These buttons enable/hide the viewport visualization of the pyro volumes.\nThe viewport visualizers are active at Object and SOP level viewports\nand will provide ways to inspect the values of the different volumes\nthat go into a pyro simulation.  The Modify buttons bring up the\nviewport visualization customization dialog to allow precise control\nover how the volumes are visualized.   Because these are normal viewport\nvisualizers, they can also be accesed from the Visualization toolbar in the\nviewport.  Note that these do not appear in the contained DOP network."]}], "indent": 0, "level": 3, "text": ["Visualize"], "extent": [4077, 4095], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Setup"], "extent": [1256, 1268], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4679, 4753], "text": ["See the ", {"text": ["Pyro Solver DOP"], "fullpath": "/nodes/dop/pyrosolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/pyrosolver"}, " for these parameters."]}], "indent": 0, "level": 2, "text": ["Solving"], "extent": [4665, 4679], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4764, 4849], "text": ["See the ", {"text": ["Pyro Post Process SOP"], "fullpath": "/nodes/sop/pyropostprocess", "scheme": "Node", "type": "link", "value": "/nodes/sop/pyropostprocess"}, " for these parameters."]}], "indent": 0, "level": 2, "text": ["Look"], "extent": [4753, 4764], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4864, 5087], "text": ["Specify which volumes of the first input should be merged into the\nPyro simulation each frame, and how to do the merging.  The volumes\nshould have a ", {"text": ["name"], "type": "code"}, " attribute that is used to tie each input\nvolume to an operation."]}, {"indent": 0, "type": "para", "extent": [5087, 5136], "text": ["See the Volume Source DOP for these parameters."]}], "indent": 0, "level": 2, "text": ["Sourcing"], "extent": [4849, 4864], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [5149, 5334], "text": ["There are many internal fields in a Pyro simulation, not all of which\nyou may need to save out or render.  This controls which fields are\nbrought out of the simulation and into SOPs."]}, {"indent": 0, "type": "para", "extent": [5334, 5427], "text": ["See the ", {"text": ["Pyro Post Process SOP"], "fullpath": "/nodes/sop/pyropostprocess", "scheme": "Node", "type": "link", "value": "/nodes/sop/pyropostprocess"}, " for the Conversion parameters."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [5486, 5556], "text": ["Toggles whether this specific field should be exported."]}], "indent": 0, "text": ["Export"], "role": "item", "attrs": {"id": "export_enable#"}, "extent": [5452, 5461], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5597, 5831], "text": ["Controls how the volume will appear in the viewport.\n    Ancillary data volumes like velocity and rest fields are often\n    useful to mark as invisible so they are available to mantra but\n    don\u2019t get in the way of viewing."]}], "indent": 0, "text": ["Visualization"], "role": "item", "attrs": {"id": "export_visible#"}, "extent": [5556, 5571], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5866, 6101], "text": ["The scalar or vector field to extract from the simulation.  It\n    will be properly named, ie, the vel field will create ", {"text": ["vel.x"], "type": "code"}, ",\n    ", {"text": ["vel.y"], "type": "code"}, ", and ", {"text": ["vel.z"], "type": "code"}, " named volumes.  It will also be in a group\n    named after the DOP object."]}, {"indent": 4, "type": "para", "extent": [6101, 6204], "text": ["While this is designed around exporting fields, any geometry\n    can actually be exported here.  "]}], "indent": 0, "text": ["Field"], "role": "item", "attrs": {"id": "export_fieldname#"}, "extent": [5831, 5838], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Fields to Export"], "extent": [5427, 5452], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Export"], "extent": [5136, 5149], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [6261, 6391], "text": ["Controls global substeps at the simulation level, as opposed to\n    the pyro-specific substeps in the Solving::Advanced tab."]}, {"indent": 4, "type": "para", "extent": [6391, 6614], "text": ["Global substeps are best used when one needs to export the substepped\n    geometry.  They will use more memory per frame, however, as all the\n    substeps will be kept rather than just the final values each frame."]}], "indent": 0, "text": ["Global Substeps"], "role": "item", "attrs": {"id": "substep"}, "extent": [6221, 6239], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6659, 6716], "text": ["Controls if the simulation is cached to memory."]}], "indent": 0, "text": ["Cache Simulation"], "role": "item", "attrs": {"id": "cacheenabled"}, "extent": [6614, 6632], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6762, 6800], "text": ["Maximum size of the memory cache."]}], "indent": 0, "text": ["Cache Memory (MB)"], "role": "item", "attrs": {"id": "cachemaxsize"}, "extent": [6716, 6735], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Simulation"], "extent": [6204, 6221], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [1037, 1049], "container": true, "type": "parameters_section", "id": "parameters"}], "summary": ["Runs a dynamic Pyro simulation."], "type": "root", "attrs": {"version": null, "namespace": null, "internal": "pyrosolver", "context": "sop", "type": "node", "icon": "SOP/pyrosolver"}, "title": ["Pyro Solver"]}