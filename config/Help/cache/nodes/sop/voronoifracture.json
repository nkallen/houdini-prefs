{"body": [{"indent": 0, "text": ["Voronoi Fracture"], "type": "title", "extent": [109, 130], "level": 0}, {"indent": 0, "type": "summary", "extent": [130, 243], "text": ["Fractures the input geometry by performing a Voronoi decomposition of space around the input cell points"]}, {"indent": 0, "type": "para", "extent": [243, 783], "text": ["The Voronoi Fracture SOP takes two primary inputs: the mesh to fracture, and the points around which to build each Voronoi cell. Often these points will be generated by either the ", {"text": ["Scatter SOP"], "fullpath": "/nodes/sop/scatter", "scheme": "Node", "type": "link", "value": "/nodes/sop/scatter"}, ", or the ", {"text": ["Points From Volume SOP"], "fullpath": "/nodes/sop/pointsfromvolume", "scheme": "Node", "type": "link", "value": "/nodes/sop/pointsfromvolume"}, ", but any source of points will work.\nFor a solid fracture (where the interior surface of the object is built for each piece) it is very useful to have all the points reside within the volume, in which case one fractured piece will be generated for for each cell point."]}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [794, 1162], "text": ["Using points scattered in a density volume generated from the geometry using ", {"text": ["IsoOffset"], "fullpath": "/nodes/sop/isooffset", "scheme": "Node", "type": "link", "value": "/nodes/sop/isooffset"}, " is a flexible way to generate cell points, as you can modulate the density in the volume before scattering to get more points within particular regions of the object.\nWhere there is higher point density, the Fracture SOP will generate more, smaller pieces."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1162, 1263], "text": ["Mesh complexity slows down fracturing more than anything. PolyReduce before fracturing if you can."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1263, 1498], "text": ["If you have problems with insufficient point density in long appendages or something in the input object, try ", {"text": ["scattering"], "fullpath": "/nodes/sop/scatter", "scheme": "Node", "type": "link", "value": "/nodes/sop/scatter"}, " points after using ", {"text": ["IsoOffset"], "fullpath": "/nodes/sop/isooffset", "scheme": "Node", "type": "link", "value": "/nodes/sop/isooffset"}, " and scaling the density up in those areas."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1498, 1635], "text": ["The ", {"text": ["RBD Interior Detail SOP"], "fullpath": "/nodes/sop/rbdinteriordetail", "scheme": "Node", "type": "link", "value": "/nodes/sop/rbdinteriordetail"}, " can be used to create high resolution pieces with detailed interior surfaces."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1635, 1745], "text": ["The ", {"text": ["RBD Cluster SOP"], "fullpath": "/nodes/sop/rbdcluster", "scheme": "Node", "type": "link", "value": "/nodes/sop/rbdcluster"}, " can be used to create larger clusters from the fractured pieces."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["Tips"], "extent": [783, 794], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [1776, 1867], "text": ["The polygonal geometry that will be fractured according to the Voronoi decomposition."]}], "indent": 0, "type": "dt", "extent": [1753, 1776], "text": ["Geometry to Fracture"]}, {"body": [{"indent": 4, "type": "para", "extent": [1893, 1994], "text": ["Input points, where each point represents a Voronoi cell around which to fracture the geometry."]}], "indent": 0, "type": "dt", "extent": [1867, 1893], "text": ["Points for Voronoi Cells"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [1745, 1753], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2024, 2063], "text": ["The fractured polygonal geometry."]}], "indent": 0, "type": "dt", "extent": [2003, 2024], "text": ["Fractured Geometry"]}, {"body": [{"indent": 4, "type": "para", "extent": [2084, 2267], "text": ["Geometry containing a point for each piece, and polygon lines connecting pieces that are adjacent. This is useful for creating a ", {"text": ["constraint network"], "fullpath": "/nodes/dop/constraintnetwork", "scheme": "Node", "type": "link", "value": "/nodes/dop/constraintnetwork"}, "."]}], "indent": 0, "type": "dt", "extent": [2063, 2084], "text": ["Constraint Geometry"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [1994, 2003], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2287, 2395], "text": ["The geometry to be fractured.\n    If no group is specified, the full input geometry will be fractured."]}], "indent": 0, "text": ["Group"], "role": "item", "extent": [2279, 2287], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2437, 2633], "text": ["Creates faces on the interior of the geometry when performing the cutting.\n    This should typically be disabled when fracturing open surfaces, or to create a thin shell from a solid object."]}], "indent": 0, "text": ["Create Interior Surfaces"], "role": "item", "extent": [2410, 2437], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2669, 2789], "text": ["Specifies how the ", {"text": ["name"], "type": "code"}, " primitive attribute (which identifies the primitives belonging to each piece) is created."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [2804, 2888], "text": ["Constructs the name by combining the ", {"text": ["Name Prefix"], "type": "ui"}, " with the piece number."]}], "indent": 4, "type": "dt", "extent": [2789, 2804], "text": ["Overwrite"]}, {"body": [{"indent": 8, "type": "para", "extent": [2900, 3103], "text": ["If the original geometry already has a ", {"text": ["name"], "type": "code"}, " primitive attribute, the ", {"text": ["Name Prefix"], "type": "ui"}, " and piece number are appended to it.\n        This is useful when performing multiple levels of fracturing."]}], "indent": 4, "type": "dt", "extent": [2888, 2900], "text": ["Append"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Name Attribute"], "role": "item", "attrs": {"id": "namemethod"}, "extent": [2633, 2649], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3136, 3211], "text": ["The prefix applied to the name of each piece created by the fracture."]}], "indent": 0, "text": ["Name Prefix"], "role": "item", "attrs": {"id": "nameprefix"}, "extent": [3103, 3116], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3269, 3381], "text": ["Computes vertex normals on the edges of the interior geometry, so that they will have a cusped appearance."]}], "indent": 0, "text": ["Compute Interior Normals"], "role": "item", "attrs": {"id": "computeinteriornormals"}, "extent": [3211, 3237], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3429, 3577], "text": ["Computes vertex normals on the edges of the interior geometry with angles greater than this angle, so that they will have a cusped appearance."]}], "indent": 0, "text": ["Interior Cusp Angle"], "role": "item", "attrs": {"id": "interiorcuspangle"}, "extent": [3381, 3402], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3627, 3706], "text": ["Specifies how to compute or update vertex normals for the input geometry."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3737, 3827], "text": ["Only compute vertex normals if the input geometry does not already have normals."]}], "indent": 4, "type": "dt", "extent": [3706, 3737], "text": ["Preserve Existing Normals"]}, {"body": [{"indent": 8, "type": "para", "extent": [3850, 3913], "text": ["Always compute vertex normals for the input geometry."]}], "indent": 4, "type": "dt", "extent": [3827, 3850], "text": ["Recompute Normals"]}, {"body": [{"indent": 8, "type": "para", "extent": [3941, 4088], "text": ["Do not compute normals for the input geometry. If ", {"text": ["Compute Interior Normals"], "type": "ui"}, " is still enabled, though, smooth normals will be computed."]}], "indent": 4, "type": "dt", "extent": [3913, 3941], "text": ["Do Not Compute Normals"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Exterior Normals"], "role": "item", "attrs": {"id": "computeexteriornormals"}, "extent": [3577, 3595], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4136, 4281], "text": ["Computes vertex normals on the edges of the input geometry with angles greater than this angle, so that they will have a cusped appearance."]}], "indent": 0, "text": ["Exterior Cusp Angle"], "role": "item", "attrs": {"id": "exteriorcuspangle"}, "extent": [4088, 4109], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Pieces"], "extent": [2395, 2410], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [4357, 4667], "text": ["Specifies a prefix for the attribute or group names specified by the ", {"text": ["Primitive Piece"], "type": "ui"}, ", ", {"text": ["Primitive Cell Point"], "type": "ui"}, ", ", {"text": ["Primitive Clip Piece"], "type": "ui"}, ", ", {"text": ["Interior Group"], "type": "ui"}, ", and ", {"text": ["Exterior Group"], "type": "ui"}, " parameters.\n    This can make it easier to create unique attribute names when performing multiple levels of fracturing."]}], "indent": 0, "text": ["Attribute Name Prefix"], "role": "item", "attrs": {"id": "attribnameprefix"}, "extent": [4307, 4331], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4705, 4805], "text": ["The name of the attribute containing the piece number with which each primitive is associated."]}], "indent": 0, "text": ["Primitive Piece"], "role": "item", "attrs": {"id": "pieceattrib"}, "extent": [4667, 4684], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4827, 4932], "text": ["The name of the attribute on primitives that will store which of the fracture points it comes from."]}], "indent": 0, "text": ["Primitive Cell Point"], "role": "item", "extent": [4805, 4827], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4954, 5078], "text": ["The name of the attribute on interior surface primitives that corresponds to the other piece adjacent at that surface."]}], "indent": 0, "text": ["Primitive Clip Piece"], "role": "item", "extent": [4932, 4954], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5117, 5210], "text": ["The group containing any primitives in the interior surfaces created during fracturing."]}], "indent": 0, "text": ["Interior Group"], "role": "item", "attrs": {"id": "interiorgroup"}, "extent": [5078, 5094], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5249, 5322], "text": ["The group containing the primitives in the original input geometry."]}], "indent": 0, "text": ["Exterior Group"], "role": "item", "attrs": {"id": "exteriorgroup"}, "extent": [5210, 5226], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5371, 5978], "text": ["If the interior and exterior groups already exist on the geometry from a previous fracture, the new interior primitives will be added to the interior group and the original exterior group will be preserved.\n    This behavior results in an interior group that contains all of the interior primitives created by multiple fracture operations (which can be useful for the ", {"text": ["RBD Interior Detail SOP"], "fullpath": "/nodes/sop/rbdinteriordetail", "scheme": "Node", "type": "link", "value": "/nodes/sop/rbdinteriordetail"}, ").\n    Otherwise, the interior group will be overwritten to only contain the interior primitives added by this node, and the exterior group will contain all of the input primitives."]}], "indent": 0, "text": ["Merge with Existing Groups"], "role": "item", "attrs": {"id": "mergegroups"}, "extent": [5322, 5350], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6006, 6084], "text": ["Copy attributes from the input cell points to the output piece geometry."]}], "indent": 0, "text": ["Copy Cell Point Attributes"], "role": "item", "extent": [5978, 6006], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6101, 6194], "text": ["The attributes to copy from the cell points to the points of the output piece geometry."]}], "indent": 0, "text": ["To Piece Points"], "role": "item", "extent": [6084, 6101], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6215, 6312], "text": ["The attributes to copy from the cell points to the primitives of the output piece geometry."]}], "indent": 0, "text": ["To Piece Primitives"], "role": "item", "extent": [6194, 6215], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6334, 6432], "text": ["The attributes to copy from the cell points to the points of the output constraint geometry."]}], "indent": 0, "text": ["To Constraint Points"], "role": "item", "extent": [6312, 6334], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Output Attributes"], "extent": [4281, 4307], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [6477, 6577], "text": ["Determine whether the input points are 1D, 2D, or 3D and generate a triangulation for them."]}], "indent": 4, "type": "dt", "extent": [6460, 6477], "text": ["Auto Detect"]}, {"body": [{"indent": 8, "type": "para", "extent": [6585, 6631], "text": ["Assume points are 2D and triangulate."]}], "indent": 4, "type": "dt", "extent": [6577, 6585], "text": ["2D"]}, {"body": [{"indent": 8, "type": "para", "extent": [6639, 6688], "text": ["Assume points are 3D and tetrahedralize."]}], "indent": 4, "type": "dt", "extent": [6631, 6639], "text": ["3D"]}, {"body": [{"indent": 8, "type": "para", "extent": [6706, 6766], "text": ["Use an existing triangulation on the input points."]}], "indent": 4, "type": "dt", "extent": [6688, 6706], "text": ["Use Existing"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Triangulation"], "role": "item", "extent": [6444, 6460], "type": "parameters_item"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [6800, 6869], "text": ["Do not further partition pieces into groups by connectivity."]}], "indent": 4, "type": "dt", "extent": [6790, 6800], "text": ["None"]}, {"body": [{"indent": 12, "type": "para", "extent": [6900, 7367], "text": ["Normally each input cell point will create one output piece. However, with concave objects this can mean that disconnected pieces of geometry are placed in the same piece. \n            Enabling this option will further divide the pieces into separate, connected groups of geometry. This option allows the piece numbers to be overwritten by this operation, which is fast and acceptable if you don\u2019t need the piece numbers to match the input point numbers."]}], "indent": 4, "type": "dt", "extent": [6869, 6900], "text": ["Overwrite Piece Numbering"]}, {"body": [{"indent": 8, "type": "para", "extent": [7397, 7515], "text": ["This option uses a slower algorithm to ensure that piece numbers remain consistent with input point numbers."]}], "indent": 4, "type": "dt", "extent": [7367, 7397], "text": ["Maintain Piece Numbering"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Connectivity Partition"], "role": "item", "extent": [6766, 6790], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7533, 7687], "text": ["Offsets the cut plane between adjacent cell points before cutting.\n    Increasing this has the effect of putting space between each fractured piece."]}], "indent": 0, "text": ["Cut Plane Offset"], "role": "item", "extent": [7515, 7533], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Cut"], "extent": [6432, 6444], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [2267, 2279], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [7696, 7731], "text": [{"text": "", "fullpath": "/nodes/sop/rbdinteriordetail", "scheme": "Node", "type": "link", "value": "/nodes/sop/rbdinteriordetail"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7731, 7762], "text": [{"text": ["Shatter"], "fullpath": "/shelf/shatter", "scheme": null, "type": "link", "value": "/shelf/shatter"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7762, 7839], "text": [{"text": ["How to control the effects of voronoi fracture"], "fullpath": "/dyno/voronoifracture", "scheme": null, "type": "link", "value": "/dyno/voronoifracture"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [7687, 7696], "container": true, "type": "related_section", "id": "related"}], "summary": ["Fractures the input geometry by performing a Voronoi decomposition of space around the input cell points"], "type": "root", "attrs": {"version": "2.0", "tags": "break", "namespace": null, "internal": "voronoifracture", "context": "sop", "type": "node", "icon": "SOP/voronoifracture"}, "title": ["Voronoi Fracture"]}