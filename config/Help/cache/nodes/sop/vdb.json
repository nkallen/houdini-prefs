{"body": [{"indent": 0, "text": ["VDB"], "type": "title", "extent": [86, 94], "level": 0}, {"indent": 0, "type": "summary", "extent": [94, 159], "text": ["Creates one or more empty/uniform VDB volume primitives."]}, {"type": "para", "indent": 0, "extent": [16, 105], "text": ["See ", {"text": ["volumes"], "fullpath": "/model/volumes", "scheme": null, "type": "link", "value": "/model/volumes"}, " for an explanation of standard volumes and OpenVDB volumes."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [188, 297], "text": ["If you connect a VDB to this node\u2019s input, and it will create a VDB with the same Dimension parameters."]}], "indent": 0, "role": "item", "type": "tip", "extent": [183, 188]}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [330, 476], "text": ["Whether to create this VDB or not.  Can be used to temporarily\n    remove a VDB from the stream without having to delete its\n    parameters."]}], "indent": 0, "text": ["Enable"], "role": "item", "extent": [321, 330], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [483, 733], "text": ["The semantic meaning of the volume.  This controls how the raw volume\n    values are interpreted.  Certain VDB tools operate on certain\n    types of volumes, such as level sets, and use the class to help\n    determine how to treat their inputs."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [744, 806], "text": ["No special meaning is assigned to the volume\u2019s data."]}], "indent": 4, "type": "dt", "extent": [733, 744], "text": ["Other"]}, {"body": [{"indent": 8, "type": "para", "extent": [821, 1031], "text": ["The volume is treated as a narrow-band signed distance field\n        level set.  The values are expected to define positive and negative\n        distances to a surface field up to a certain bandwidth."]}], "indent": 4, "type": "dt", "extent": [806, 821], "text": ["Level Set"]}, {"body": [{"indent": 8, "type": "para", "extent": [1047, 1168], "text": ["The volume represents a density field.  Values should be\n        positive with zero representing empty regions."]}], "indent": 4, "type": "dt", "extent": [1031, 1047], "text": ["Fog Volume"]}, {"body": [{"indent": 8, "type": "para", "extent": [1196, 1322], "text": ["The volume\u2019s vector values are to be treated as lying on\n        the faces of the respective cells, not the centers."]}], "indent": 4, "type": "dt", "extent": [1168, 1196], "text": ["Staggered Vector Field"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Class"], "role": "item", "extent": [476, 483], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1328, 1477], "text": ["The value for the primitive\u2019s ", {"text": ["name"], "type": "code"}, " attribute.\n    This is useful for referring to the primitive in later nodes, using the ", {"text": ["@name=foo"], "type": "code"}, " syntax."]}], "indent": 0, "text": ["Name"], "role": "item", "extent": [1322, 1328], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1491, 1650], "text": ["The datatype to store in the voxels. VDB allows true vectors at each voxel, while standard Houdini volumes use three scalar volumes to do the same thing."]}], "indent": 0, "text": ["Storage Type"], "role": "item", "extent": [1477, 1491], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1661, 1776], "text": ["The numerical precision (32-bit or 64-bit) to use when using a ", {"text": ["Storage Type"], "type": "ui"}, " is \"Float\" or \"Vector float\"."]}, {"indent": 4, "type": "para", "extent": [1776, 1829], "text": ["Integer types are stored with 32-bit precision."]}], "indent": 0, "text": ["Precision"], "role": "item", "extent": [1650, 1661], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1847, 1960], "text": ["The \"default\" value for any voxel not explicitly set.\n    Voxels with this value use essentially no memory."]}], "indent": 0, "text": ["Background Value"], "role": "item", "extent": [1829, 1847], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Type"], "extent": [309, 321], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [1995, 2141], "text": ["How this VDB primitive will be displayed in the viewport.  This does not affect the underlying VDB at all, just its display-time appearance."]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [2152, 2330], "text": ["The volume is rendered as smoke.  Values of 0 or less\n            are fully transparent.  If lights are present, they\n            are self-shadowed with the volume."]}], "indent": 4, "type": "dt", "extent": [2141, 2152], "text": ["Smoke"]}, {"body": [{"indent": 12, "type": "para", "extent": [2343, 2633], "text": ["The volume is rendered as transparent smoke.  Values\n            of 0 or less are fully transparent.  Lights are\n            ignored, reducing computation time.  Instead, the\n            smoke is colored a rainbow hue according to the\n            position in the bounding box."]}], "indent": 4, "type": "dt", "extent": [2330, 2343], "text": ["Rainbow"]}, {"body": [{"indent": 12, "type": "para", "extent": [2649, 2848], "text": ["An isosurface of equal valued voxels is extracted from\n            the volume and displayed.  This ", {"text": ["Display Isocontour"], "type": "ui"}, " is\n            used to determine which isosurface is extracted."]}], "indent": 4, "type": "dt", "extent": [2633, 2649], "text": ["Isosurface"]}, {"body": [{"indent": 12, "type": "para", "extent": [2863, 2928], "text": ["The contents of the volume are not rendered at all."]}], "indent": 4, "type": "dt", "extent": [2848, 2863], "text": ["Invisible"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Display Mode"], "role": "item", "extent": [1980, 1995], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2945, 3066], "text": ["Controls the fall off rate for the smoke visualization.  Lower values\n    allow the smoke to be more transparent.  "]}], "indent": 0, "text": ["Display Density"], "role": "item", "extent": [2928, 2945], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3086, 3255], "text": ["Which isocontour to extract from the VDB.  The default of 0 is good for\n    SDF VDBs.  Fog style VDBs would work better with something non-zero,\n    such as ", {"text": ["0.5"], "type": "code"}, "."]}], "indent": 0, "text": ["Display Isocontour"], "role": "item", "extent": [3066, 3086], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Visualization"], "extent": [1960, 1980], "container": true, "type": "h", "id": null}, {"body": [{"indent": 4, "type": "para", "extent": [3272, 3346], "text": ["Clicking this tab sets the VDB to use uniformly sized cubic voxels."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3362, 3438], "text": ["The size (length of a side) of the cubic voxels, in Houdini units."]}], "indent": 4, "text": ["Voxel Size"], "role": "item", "extent": [3346, 3362], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Voxel Size"], "extent": [3255, 3272], "container": true, "type": "h", "id": null}, {"body": [{"indent": 4, "type": "para", "extent": [3452, 3666], "text": ["Clicking this tab sizes and positions the voxels of the VDB based on a frustum calculation.\n    This may be useful for aligning the VDB to a fixed viewpoint or a viewpoint not corresponding to actual camera."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3676, 3793], "text": ["The size of a frustum. This frustum is divided into voxels by the ", {"text": ["Uniform Sampling"], "type": "ui"}, " parameter below."]}], "indent": 4, "text": ["Size"], "role": "item", "extent": [3666, 3676], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [3805, 3855], "text": ["The position of the box in 3D space."]}], "indent": 4, "text": ["Center"], "role": "item", "extent": [3793, 3805], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [3866, 3995], "text": ["How much larger the -Z face of the box is compared to the +Z face.\n        This is useful for aligning VDBs to cameras."]}], "indent": 4, "text": ["Taper"], "role": "item", "extent": [3855, 3866], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Frustum"], "extent": [3438, 3452], "container": true, "type": "h", "id": null}, {"body": [{"indent": 4, "type": "para", "extent": [4013, 4220], "text": ["Clicking this tab sizes and positions the voxels of the VDB based on the frustum of a ", {"text": ["camera object"], "fullpath": "/nodes/obj/cam", "scheme": "Node", "type": "link", "value": "/nodes/obj/cam"}, ".\n    This frustum is divided into voxels by the ", {"text": ["Uniform Sampling"], "type": "ui"}, " parameter below."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [4232, 4325], "text": ["The path to the camera object to align the VDB to, for example ", {"text": ["/obj/cam1"], "type": "code"}, "."]}], "indent": 4, "text": ["Camera"], "role": "item", "extent": [4220, 4232], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4337, 4460], "text": ["The distance, in Houdini units, from the camera to the near side of the frustum used to calculate voxel size."]}], "indent": 4, "text": ["Z Near"], "role": "item", "extent": [4325, 4337], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4471, 4593], "text": ["The distance, in Houdini units, from the camera to the far side of the frustum used to calculate voxel size."]}], "indent": 4, "text": ["Z Far"], "role": "item", "extent": [4460, 4471], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4618, 4790], "text": ["Use the camera\u2019s window scale, offset, and crop parameters (in addition to the ", {"text": ["Window X"], "type": "ui"}, " and ", {"text": ["Window Y"], "type": "ui"}, " parameters below) to get the size of the frustum."]}], "indent": 4, "text": ["Use Camera\u2019s Window"], "role": "item", "extent": [4593, 4618], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4804, 4892], "text": ["The min/max horizontal positions of the camera\u2019s view to fill with voxels."]}], "indent": 4, "text": ["Window X"], "role": "item", "extent": [4790, 4804], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4906, 4992], "text": ["The min/max vertical positions of the camera\u2019s view to fill with voxels."]}], "indent": 4, "text": ["Window Y"], "role": "item", "extent": [4892, 4906], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["From Camera"], "extent": [3995, 4013], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [5010, 5099], "text": ["Which along which to divide the frustum by the ", {"text": ["Uniform sampling divs"], "type": "ui"}, " parameter."]}], "indent": 0, "text": ["Uniform Sampling"], "role": "item", "extent": [4992, 5010], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5122, 5291], "text": ["The number of voxels to divide the ", {"text": ["Uniform Sampling"], "type": "ui"}, " axis into. The other axes will be divided into the number of cells that fit given the resulting voxel size."]}], "indent": 0, "text": ["Uniform Sampling Divs"], "role": "item", "extent": [5099, 5122], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5306, 5397], "text": ["When ", {"text": ["Uniform sampling"], "type": "ui"}, " is \"Non square\", lets you specify a rectangular voxel size."]}], "indent": 0, "text": ["Sampling Divs"], "role": "item", "extent": [5291, 5306], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5407, 5499], "text": ["When ", {"text": ["Uniform sampling"], "type": "ui"}, " is \"By Size\", lets you specify the size of a voxel directly."]}], "indent": 0, "text": ["Div Size"], "role": "item", "extent": [5397, 5407], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5508, 5672], "text": ["Scale the voxel resolution along the Z-axis.\n    This is useful for camera VDBs where you may want less detail along the camera viewing direction (depth)."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [5681, 5935], "text": ["By setting the ", {"text": ["Uniform Sampling"], "type": "ui"}, " to ", {"text": ["X-Axis"], "type": "ui"}, ", you can then specify the number of voxels you want across the X axis of the screen directly, let the Y-axis be auto-computed to preserve aspect, and then adjust this scale factor."]}], "indent": 4, "role": "item", "type": "tip", "extent": [5672, 5681]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "text": ["Z Scale"], "role": "item", "extent": [5499, 5508], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [297, 309], "container": true, "type": "parameters_section", "id": "parameters"}], "title": ["VDB"], "summary": ["Creates one or more empty/uniform VDB volume primitives."], "attrs": {"version": null, "tags": "create, model", "namespace": null, "internal": "vdb", "context": "sop", "type": "node", "icon": "COMMON/openvdb"}, "included": ["/nodes/sop/volume_types"], "type": "root"}