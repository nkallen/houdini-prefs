{"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [88, 164], "text": ["Whether this node should create new prims, or edit existing prims."]}], "indent": 4, "text": ["Action"], "attrs": {"id": "createprims"}, "extent": [50, 62], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [207, 302], "text": ["In create mode, this lets you control where in the scene graph to create the prim(s)."]}, {"indent": 8, "type": "para", "extent": [302, 631], "text": ["The default is usually ", {"text": ["/$OS"], "type": "code"}, ". This creates a primitive at the root level with the same name as the node (for example, ", {"text": ["/tube1"], "type": "code"}, "). This is a useful default for preventing naming conflicts, but terrible for organization. You should try to remember to change the ", {"text": ["Primitive path"], "type": "ui"}, " to a better value when you create prims."]}, {"indent": 8, "type": "para", "extent": [631, 811], "text": ["For example, instead of naming models after the node that created them, you might want to name them after the geometry inside, and organize them under a ", {"text": ["/Models"], "type": "code"}, " branch."]}, {"indent": 8, "type": "para", "extent": [811, 911], "text": ["The \"Create primitives\" section contains basic controls for how to create the new prim(s)."]}], "indent": 4, "text": ["Primitive Path"], "attrs": {"id": "primpath"}, "extent": [164, 184], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [953, 1314], "text": ["In edit mode, the node has a ", {"text": ["Primitive pattern"], "type": "ui"}, " parameter. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"text": ["primitive patterns"], "fullpath": "/solaris/pattern", "scheme": null, "type": "link", "value": "/solaris/pattern"}, " for advanced matching, including matching all prims in a collection."]}], "indent": 4, "text": ["Primitives"], "attrs": {"id": "primpattern"}, "extent": [911, 927], "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "role": "item", "attrs": {"id": "create_edit_block"}, "extent": [16, 22], "type": "box"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [1400, 1620], "text": ["How the transform parameters below apply to the primitive. (Because each USD prim can contain multiple transforms, ", {"text": ["and"], "type": "em"}, " be affected by parent transforms, there are many different ways to apply new transforms.)"]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [1636, 1702], "text": ["Apply the parameters as a new, most local transform."]}], "indent": 8, "type": "dt", "extent": [1620, 1636], "text": ["Append"]}, {"body": [{"indent": 12, "type": "para", "extent": [1719, 1788], "text": ["Apply the parameters as a new, ", {"text": ["least"], "type": "em"}, " local transform."]}], "indent": 8, "type": "dt", "extent": [1702, 1719], "text": ["Prepend"]}, {"body": [{"indent": 12, "type": "para", "extent": [1817, 1981], "text": ["If a local transform exists with the name ", {"text": ["xformOp:transform"], "type": "code"}, ", ", {"text": ["overwrite"], "type": "em"}, " it with the parameters. Otherwise, apply it as a new, most local transform."]}, {"indent": 12, "type": "para", "extent": [1981, 2103], "text": ["If this replaces an existing transform, that transform\u2019s order in the local transform stack is not affected."]}], "indent": 8, "type": "dt", "extent": [1788, 1817], "text": ["Overwrite or Append"]}, {"body": [{"indent": 12, "type": "para", "extent": [2133, 2193], "text": ["Like \"Overwrite or Append\", but ", {"text": ["least"], "type": "em"}, " local."]}], "indent": 8, "type": "dt", "extent": [2103, 2133], "text": ["Overwrite or Prepend"]}, {"body": [{"indent": 12, "type": "para", "extent": [2233, 2529], "text": ["Apply the parameters as a new, most local transform. However, prior to applying the transform, it is updated so that the result of the transform appears as if the transform was being applied in world space, before any local or ancestor transformations were applied to the primitive."]}], "indent": 8, "type": "dt", "extent": [2193, 2233], "text": ["Apply Transform in World Space"]}, {"body": [{"indent": 12, "type": "para", "extent": [2567, 2913], "text": ["The transform specified in the remaining transform parameters is always applied as a new transform. Prior to applying this transform, all existing transform operations on the local transform stack are cleared so that only the supplied transform remains on the local transform stack (though ancestor transforms still have an effect)."]}], "indent": 8, "type": "dt", "extent": [2529, 2567], "text": ["Replace All Local Transforms"]}], "container": true, "type": "dt_group"}], "indent": 4, "text": ["Transform"], "attrs": {"id": "xn__xformOptransform_51a"}, "extent": [1346, 1361], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [2953, 3074], "text": ["The order in which Houdini applies translates, rotates, and scales, and the order in which it applies rotation."]}], "indent": 4, "text": ["Transform order"], "attrs": {"id": "xOrd"}, "extent": [2913, 2934], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3105, 3146], "text": ["Movement amount along XYZ axes."]}], "indent": 4, "text": ["Translate"], "attrs": {"id": "t"}, "extent": [3074, 3089], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3174, 3217], "text": ["Degrees rotation around XYZ axes."]}], "indent": 4, "text": ["Rotate"], "attrs": {"id": "r"}, "extent": [3146, 3158], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3244, 3289], "text": ["Non-uniform scaling along XYZ axes."]}], "indent": 4, "text": ["Scale"], "attrs": {"id": "s"}, "extent": [3217, 3228], "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3328, 3388], "text": ["Scales the object uniformly along all three axes."]}], "indent": 4, "text": ["Uniform scale"], "attrs": {"id": "scale"}, "extent": [3289, 3308], "type": "dt"}], "container": true, "type": "dt_group"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [3452, 3499], "text": ["Moves the local origin of the object."]}], "indent": 4, "type": "dt", "extent": [3430, 3452], "text": ["Pivot translate"]}, {"body": [{"indent": 8, "type": "para", "extent": [3517, 3585], "text": ["Rotates the local origin of the object after translation."]}], "indent": 4, "type": "dt", "extent": [3499, 3517], "text": ["Pivot rotate"]}], "container": true, "type": "dt_group"}], "indent": 4, "level": 2, "text": ["Pivot Transform"], "extent": [3388, 3430], "container": true, "type": "h", "id": "pivot_xform"}], "indent": 0, "role": "item", "attrs": {"id": "transform_block"}, "extent": [1314, 1320], "type": "box"}], "container": true, "role": "item_group", "type": "box_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [3631, 3831], "text": ["Sets a \"default\" color for this shape, which will be used in the viewport if the prim does not have a shader/material. You can write shaders to take this ", {"text": ["displayColor"], "type": "code"}, " parameter as an override."]}], "indent": 0, "text": ["Color"], "attrs": {"id": "xn__primvarsdisplayColor_p8a"}, "extent": [3585, 3592], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [3881, 4110], "text": ["Sets the opacity of the ", {"text": ["Display color"], "type": "ui"}, ". This is a separate attribute (instead of specifying the display color as RGBA) so it can be independently overridden, and also because shaders don\u2019t usually accept RGBA parameters."]}], "indent": 0, "text": ["Opacity"], "attrs": {"id": "xn__primvarsdisplayOpacity_ycb"}, "extent": [3831, 3840], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [4146, 4427], "text": ["For renderers that distinguish between single-sided and double-sided surfaces, controls whether this prim is double-sided. Making surfaces double-sided is necessary for flat thin surfaces, or open surfaces where the camera can see both the inside and outside of the surface."]}], "indent": 0, "text": ["Double Sided"], "attrs": {"id": "doubleSided"}, "extent": [4110, 4124], "type": "dt"}], "container": true, "type": "dt_group"}, {"body": [{"indent": 0, "type": "para", "extent": [4468, 4800], "text": ["This node belongs to a class of ", {"text": ["nodes that create or edit USD prims directly"], "type": "strong"}, ". These nodes operate in ", {"text": ["Create mode"], "type": "em"}, " or ", {"text": ["Edit mode"], "type": "em"}, ". This is controlled by a ", {"text": ["Create primitives"], "type": "ui"}, " checkbox or a ", {"text": ["Create/Edit popup menu"], "type": "em"}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim."]}, {"indent": 0, "type": "para", "extent": [4800, 4930], "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"text": ["how"], "type": "em"}, " the node authors the attribute."]}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "text": ["Set or Create "], "role": "td", "extent": [5026, 5047], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [5047, 5133], "text": ["Sets the attribute to the given value, whether it previously existed or not."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [5133, 5153], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [5153, 5230], "text": ["Only set the attribute to the given value if it previously existed."]}, {"indent": 8, "type": "para", "extent": [5230, 5412], "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"text": ["UsdGeomSphere"], "type": "code"}, " primitives are likely to have a ", {"text": ["radius"], "type": "code"}, " attribute."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Block "], "role": "td", "extent": [5412, 5424], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [5424, 5581], "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [5581, 5598], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [5598, 5680], "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 4, "text": ["Pop-up menu item "], "role": "th", "attrs": {"width": "25%"}, "extent": [4963, 4987], "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [5007, 5026], "text": ["Meaning "]}], "divider": false, "type": "row"}]}], "indent": 0, "role": "item", "attrs": {"id": "control_menu"}, "extent": [4930, 4936], "type": "box"}], "container": true, "role": "item_group", "type": "box_group"}], "indent": 0, "level": 2, "text": ["Creating vs. editing prims"], "extent": [4427, 4468], "container": true, "type": "h", "id": "oview"}, {"body": [{"indent": 0, "type": "para", "extent": [5727, 5793], "text": ["This section only appears when the node is creating primitives."]}, {"indent": 0, "type": "para", "extent": [5793, 5807], "text": ["For example:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [5807, 5985], "text": ["If you want to create a new cube primitive at ", {"text": ["/world/objects/cube1"], "type": "code"}, " on an empty stage: Set ", {"text": ["Primitive Specifier"], "type": "ui"}, " to \"Define\", and the ", {"text": ["Parent Primitive Type"], "type": "ui"}, " to \"Xform\"."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [5985, 6247], "text": ["If you want to override the radius of a sphere at ", {"text": ["/world/objects/sphere1"], "type": "code"}, ": Set ", {"text": ["Primitive Specifier"], "type": "ui"}, " to \"Over\", and the ", {"text": ["Parent Primitive Type"], "type": "ui"}, " to None. This makes sure the primitive types of any existing ancestor prims are not be modified by this node."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [6264, 6305], "text": ["The number of primitives to create."]}], "indent": 0, "type": "dt", "extent": [6247, 6264], "text": ["Primitive Count"]}, {"body": [{"indent": 4, "type": "para", "extent": [6340, 6407], "text": ["Set all created prims to have this ", {"fragment": "#kinds", "text": ["kind"], "value": "/solaris/usd#kinds", "fullpath": "/solaris/usd#kinds", "scheme": null, "type": "link"}, "."]}], "indent": 0, "text": ["Primitive Kind"], "attrs": {"id": "primkind"}, "extent": [6305, 6321], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [6455, 6620], "text": ["If any parents of a path in ", {"text": ["Primitive paths"], "type": "ui"}, " do not exist, this node will automatically create them. In this case, it will create parent nodes of this type."]}], "indent": 0, "text": ["Parent Primitive Type"], "attrs": {"id": "parentprimtype"}, "extent": [6407, 6430], "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [6661, 6719], "text": ["The USD operator to use when creating the new prims."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [6731, 6848], "text": ["Authors a completely new prim. Use this if you want to create a brand new prim or replace an existing prim."]}], "indent": 4, "type": "dt", "extent": [6719, 6731], "text": ["Define"]}, {"body": [{"indent": 8, "type": "para", "extent": [6858, 7021], "text": ["Authors an override of an existing prim. Attributes not explicitly authored on this prim will get their values from the existing prim on the lower layer."]}], "indent": 4, "type": "dt", "extent": [6848, 6858], "text": ["Over"]}, {"body": [{"indent": 8, "type": "para", "extent": [7032, 7135], "text": ["Define a primitive class. This is usually not necessary unless you are doing deep USD magic."]}], "indent": 4, "type": "dt", "extent": [7021, 7032], "text": ["Class"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Primitive Specifier"], "attrs": {"id": "specifier"}, "extent": [6620, 6641], "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Create primitives section"], "extent": [5680, 5727], "container": true, "type": "h", "id": "create_prims"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [7174, 7329], "text": ["USD currently does not have look-at constraints. This node calculates the per-frame transform to fulfill the constraint and applies it to the object."]}], "indent": 0, "role": "item", "type": "note", "extent": [7167, 7174]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [7329, 7450], "text": ["See the ", {"fragment": "#tool", "text": ["Light tool help"], "value": "/nodes/lop/light#tool", "fullpath": "/nodes/lop/light#tool", "scheme": null, "type": "link"}, " for how to set up the look-at constraint interactively in the viewport."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [7466, 7558], "text": ["Turns on the constraint that orients this object to look at a point or another object."]}], "indent": 0, "type": "dt", "extent": [7450, 7466], "text": ["Enable Look At"]}, {"body": [{"indent": 4, "type": "para", "extent": [7573, 7582], "text": ["???"]}], "indent": 0, "type": "dt", "extent": [7558, 7573], "text": ["Keep Position"]}, {"body": [{"indent": 4, "type": "para", "extent": [7600, 7824], "text": ["If ", {"text": ["Enable look at"], "type": "ui"}, " is on and, this is a point in space this object will look at. If ", {"text": ["Look at primitive"], "type": "ui"}, " is not blank, this is an ", {"text": ["offset"], "type": "strong"}, " from the centroid of the target object (in the local space of that object)."]}], "indent": 0, "type": "dt", "extent": [7582, 7600], "text": ["Look At Position"]}, {"body": [{"indent": 4, "type": "para", "extent": [7843, 7998], "text": ["The path to a USD prim this object should look at. If this is not blank, ", {"text": ["Look at position"], "type": "ui"}, " is an ", {"text": ["offset"], "type": "strong"}, " from this centroid of the target object."]}], "indent": 0, "type": "dt", "extent": [7824, 7843], "text": ["Look At Primitive"]}, {"body": [{"indent": 4, "type": "para", "extent": [8016, 8056], "text": ["Controls how the up vector is set."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [8068, 8105], "text": ["Use (1,0,0) as the up axis."]}], "indent": 4, "type": "dt", "extent": [8056, 8068], "text": ["X Axis"]}, {"body": [{"indent": 8, "type": "para", "extent": [8117, 8154], "text": ["Use (0,1,0) as the up axis."]}], "indent": 4, "type": "dt", "extent": [8105, 8117], "text": ["Y Axis"]}, {"body": [{"indent": 8, "type": "para", "extent": [8166, 8231], "text": ["Us the value of the Up Vector parameter as the up axis."]}], "indent": 4, "type": "dt", "extent": [8154, 8166], "text": ["Custom"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "extent": [7998, 8016], "text": ["Up Vector Method"]}, {"body": [{"indent": 4, "type": "para", "extent": [8242, 8341], "text": ["When ", {"text": ["Up vector method"], "type": "ui"}, " is \"custom\", this is the up axis to use for the look-at constraint."]}], "indent": 0, "type": "dt", "extent": [8231, 8242], "text": ["Up Vector"]}, {"body": [{"indent": 4, "type": "para", "extent": [8348, 8453], "text": ["A twist rotation (around the -Z axis, clockwise, in degrees), applied after the lookout transform."]}], "indent": 0, "type": "dt", "extent": [8341, 8348], "text": ["Twist"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Constraints"], "extent": [7135, 7167], "container": true, "type": "h", "id": "constraints"}], "type": "root", "attrs": {"type": "include"}}