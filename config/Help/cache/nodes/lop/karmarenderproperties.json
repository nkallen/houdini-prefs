{"body": [{"indent": 0, "text": ["Karma Render Properties"], "type": "title", "extent": [117, 145], "level": 0}, {"indent": 0, "type": "summary", "extent": [145, 199], "text": ["Configure Render Properties for Karma (Beta)."]}, {"indent": 0, "type": "para", "extent": [199, 397], "text": ["The Karma Render Properties LOP creates ", {"text": ["render vars"], "fullpath": "/nodes/lop/rendervar", "scheme": "Node", "type": "link", "value": "/nodes/lop/rendervar"}, ", a ", {"text": ["render product"], "fullpath": "/nodes/lop/renderproduct", "scheme": "Node", "type": "link", "value": "/nodes/lop/renderproduct"}, " and a ", {"text": ["render settings"], "fullpath": "/nodes/lop/rendersettings", "scheme": "Node", "type": "link", "value": "/nodes/lop/rendersettings"}, " primitive, configured for Karma."]}, {"body": [{"body": [{"body": [{"type": "para", "indent": 8, "extent": [1642, 1721], "text": ["Path to a USD camera (", {"text": ["UsdGeomCamera"], "type": "code"}, ") prim to render the scene from."]}], "indent": 4, "text": ["Camera"], "role": "item", "attrs": {"id": "camera"}, "extent": [1609, 1621], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [1762, 1836], "text": ["The horizontal and vertical size of the output image, in pixels."]}], "indent": 4, "text": ["Resolution"], "role": "item", "attrs": {"id": "resolution"}, "extent": [1721, 1737], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [1898, 2090], "text": ["Override the camera\u2019s ", {"text": ["Shutter close"], "type": "ui"}, " parameter to be equal to its ", {"text": ["Shutter open"], "type": "ui"}, " time, to produce a zero-width shutter interval. This is a convenient way to disable motion blur."]}], "indent": 4, "text": ["Instantaneous Shutter"], "role": "item", "attrs": {"id": "instantaneousShutter"}, "extent": [1836, 1863], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [2162, 2451], "text": ["What to do if the aspect ratio of the output image (", {"text": ["Resolution"], "type": "ui"}, " width divided by height) doesn\u2019t match the aspect ratio of the camera aperture (controlled by attributes on the camera). This allows a standard renderer to do something reasonable when you switch between cameras."]}, {"body": [{"body": [{"type": "para", "indent": 12, "extent": [2476, 2550], "text": ["If necessary, expand the camera aperture to match the image."]}], "type": "dt", "indent": 8, "extent": [2451, 2476], "text": ["Expand Aperture"]}, {"body": [{"type": "para", "indent": 12, "extent": [2573, 2645], "text": ["If necessary, crop the camera aperture to match the image."]}], "type": "dt", "indent": 8, "extent": [2550, 2573], "text": ["Crop Aperture"]}, {"body": [{"type": "para", "indent": 12, "extent": [2676, 2756], "text": ["If necessary, change the camera aperture width to match the image."]}], "type": "dt", "indent": 8, "extent": [2645, 2676], "text": ["Adjust Aperture Width"]}, {"body": [{"type": "para", "indent": 12, "extent": [2788, 2869], "text": ["If necessary, change the camera aperture height to match the image."]}], "type": "dt", "indent": 8, "extent": [2756, 2788], "text": ["Adjust Aperture Height"]}, {"body": [{"type": "para", "indent": 12, "extent": [2904, 2975], "text": ["Change the aspect ratio of the image to match the camera."]}], "type": "dt", "indent": 8, "extent": [2869, 2904], "text": ["Adjust Pixel Aspect Ratio"]}], "type": "dt_group", "container": true}], "indent": 4, "text": ["Aspect Ratio Conform Policy"], "role": "item", "attrs": {"id": "aspectRatioConformPolicy"}, "extent": [2090, 2123], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [3024, 3361], "text": ["Directs the renderer to only render within this window of the entire output image. The rectangle is specified in as ", {"text": ["minX, minY, maxX, maxY"], "type": "code"}, ", in a normalized range ", {"text": ["0"], "type": "code"}, " to ", {"text": ["1"], "type": "code"}, ". Coordinates ", {"text": ["0, 0"], "type": "code"}, " are the bottom left and ", {"text": ["1, 1"], "type": "code"}, " are the top right. The default window ", {"text": ["0, 0, 1, 1"], "type": "code"}, " covers the entire image (that is, is not cropped)."]}, {"type": "para", "indent": 8, "extent": [3361, 3470], "text": ["You can use this window to temporarily ", {"text": ["crop"], "type": "em"}, " the render to a smaller region, for testing purposes."]}, {"type": "para", "indent": 8, "extent": [3470, 3572], "text": ["You can also specify negative values and/or values greater than 1 to reveal ", {"text": ["overscan"], "type": "em"}, " data."]}, {"type": "para", "indent": 8, "extent": [3572, 3645], "text": ["Pixels are only rendered if they are ", {"text": ["fully inside"], "type": "em"}, " the window."]}, {"type": "para", "indent": 8, "extent": [3645, 3762], "text": ["The normalized coordinates map to the image ", {"text": ["after"], "type": "em"}, " any adjustments by the ", {"text": ["Aspect ratio conform policy"], "type": "ui"}, "."]}], "indent": 4, "text": ["Data Window NDC"], "role": "item", "attrs": {"id": "dataWindowNDC"}, "extent": [2975, 2996], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [3817, 3959], "text": ["The aspect ratio (width/height) of image ", {"text": ["pixels"], "type": "em"}, " (", {"text": ["not"], "type": "em"}, " the image itself).\n        The default is ", {"text": ["1.0"], "type": "code"}, ", indicating square pixels."]}], "indent": 4, "text": ["Pixel Aspect Ratio"], "role": "item", "attrs": {"id": "pixelAspectRatio"}, "extent": [3762, 3786], "type": "parameters_item"}, {"body": [], "indent": 0, "text": ["Screendoor Limit"], "role": "item", "attrs": {"status": "nd", "kagroup": "Shading", "hprop": "karma:global:screendoorlimit"}, "extent": [8092, 8112], "type": "parameters_item", "id": "karma:global:screendoorlimit"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [75584, 75906], "text": ["The image or device where the resulting image will be rendered. You can set this value to ", {"text": ["ip"], "type": "code"}, " which renders the image in MPlay, or you can save it to an image. The following image types are supported: ", {"text": [".pic"], "type": "code"}, ", ", {"text": [".tif"], "type": "code"}, ", ", {"text": [".sgi"], "type": "code"}, ", ", {"text": [".pic.gz"], "type": "code"}, ", ", {"text": [".rat"], "type": "code"}, ", ", {"text": [".jpg"], "type": "code"}, ", ", {"text": [".cin"], "type": "code"}, ", ", {"text": [".rta"], "type": "code"}, ", ", {"text": [".bmp"], "type": "code"}, ", ", {"text": [".tga"], "type": "code"}, ", ", {"text": [".rad"], "type": "code"}, ", ", {"text": [".exr"], "type": "code"}, ", and ", {"text": [".png"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [75906, 76087], "text": ["Include ", {"text": ["$F"], "type": "code"}, " in the file name to insert the frame number. This is necessary when rendering animation. See ", {"text": ["expressions in file names"], "fullpath": "/render/expressions", "scheme": null, "type": "link", "value": "/render/expressions"}, " for more information."]}], "indent": 0, "text": ["Output picture"], "role": "item", "attrs": {"ifdprop": "image:filename", "hprop": "vm_picture"}, "extent": [75508, 75527], "type": "parameters_item", "id": "vm_picture"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [9775, 10072], "text": ["The maximum value a shading sample is allowed to contribute to an LPE image\n    plane to reduce appearance of \"fireflies\" caused by undersampling of \n    extremely bright light sources. Note that reducing this value can result in\n    an overall reduction in the amount of light in your scene"]}], "indent": 0, "text": ["Color Limit"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:colorlimit"}, "extent": [9699, 9714], "type": "parameters_item", "id": "karma:global:colorlimit"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"indent": 0, "type": "para", "extent": [838, 915], "text": ["Image filters post-process the filtered pixels to produce the final image."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [953, 1034], "text": ["Adds the ", {"text": ["NVIDIA Optix Denoiser"], "fullpath": "/render/optixdenoiser", "scheme": null, "type": "link", "value": "/render/optixdenoiser"}, " as an image filter. "]}], "indent": 0, "text": ["Optix Denoiser"], "role": "item", "attrs": {"id": "optixdenoise"}, "extent": [915, 931], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1065, 1074], "text": ["???"]}], "indent": 0, "text": ["Use Albedo"], "role": "item", "attrs": {"id": "usealbedo"}, "extent": [1034, 1046], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1106, 1115], "text": ["???"]}], "indent": 0, "text": ["Use N Input"], "role": "item", "attrs": {"id": "useninput"}, "extent": [1074, 1087], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1149, 1158], "text": ["???"]}], "indent": 0, "text": ["Use Gl Input"], "role": "item", "attrs": {"id": "useglinput"}, "extent": [1115, 1129], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1178, 1264], "text": [{"text": ["OCIO"], "fullpath": "/io/ocio", "scheme": null, "type": "link", "value": "/io/ocio"}, " image filters can be added to various render vars/image planes. "]}], "indent": 0, "text": ["OCIO"], "role": "item", "attrs": {"id": "ocio"}, "extent": [1158, 1164], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1292, 1342], "text": ["Enables the OCIO image filter defined below."]}], "indent": 0, "text": ["Enable"], "role": "item", "attrs": {"id": "enableocio"}, "extent": [1264, 1272], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1370, 1452], "text": ["Specify the render var names to which the OCIO image filter will be applied."]}], "indent": 0, "text": ["Planes"], "role": "item", "attrs": {"id": "ocioplanes"}, "extent": [1342, 1350], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1491, 1561], "text": ["Specify the OCIO color output space the image filter will apply."]}], "indent": 0, "text": ["Output Space"], "role": "item", "attrs": {"id": "ociooutputspace"}, "extent": [1452, 1466], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1598, 1607], "text": ["???"]}], "indent": 0, "text": ["Input Space"], "role": "item", "attrs": {"id": "ocioinputspace"}, "extent": [1561, 1574], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1633, 1642], "text": ["???"]}], "indent": 0, "text": ["Looks"], "role": "item", "attrs": {"id": "ociolooks"}, "extent": [1607, 1614], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 4, "text": ["Image Filters"], "extent": [814, 838], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [1667, 1750], "text": ["Sample filters are used to modify samples before they are sent to pixel filters."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [1785, 1860], "text": ["Color Limits can be applied to a number of render vars individually. "]}], "indent": 0, "text": ["Color Limits"], "role": "item", "attrs": {"id": "colorlimits"}, "extent": [1750, 1764], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1895, 1953], "text": ["Enables the color limit sample filter defined below."]}], "indent": 0, "text": ["Enable"], "role": "item", "attrs": {"id": "enablecolorlimits"}, "extent": [1860, 1868], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1987, 2077], "text": ["Specify the render var names to which the color limit sample filter will be applied."]}], "indent": 0, "text": ["Planes"], "role": "item", "attrs": {"id": "colorlimitplanes"}, "extent": [1953, 1961], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2109, 2393], "text": ["The maximum value a shading sample is allowed to contribute to an LPE image plane to reduce appearance of \"fireflies\" caused by undersampling of extremely bright light sources. Note that reducing this value can result in an overall reduction in the amount of light in your scene"]}], "indent": 0, "text": ["Limit"], "role": "item", "attrs": {"id": "colorlimitlimit"}, "extent": [2077, 2084], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 4, "text": ["Sample Filters"], "extent": [1642, 1667], "container": true, "type": "h", "id": null}], "indent": 0, "level": 3, "text": ["Output"], "extent": [753, 768], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [2420, 2703], "text": ["Render vars, otherwise known as AOVs (arbitrary output variables) or additional image planes, can be specified here. By default the ", {"text": ["beauty"], "type": "code"}, ", ", {"text": ["diffuse"], "type": "code"}, ", ", {"text": ["glossy reflection"], "type": "code"}, ", ", {"text": ["volume"], "type": "code"}, ", ", {"text": ["depth"], "type": "code"}, ", ", {"text": ["UV"], "type": "code"}, " and ", {"text": ["normal"], "type": "code"}, " render vars are enabled and will write to their respective channels. "]}, {"indent": 0, "type": "para", "extent": [2703, 2835], "text": ["Additional render vars can be defined on the node or passed in as render var primitives through the second input for convenience. "]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [2911, 3053], "text": ["Enables additional render var primitives passed in through the nodes' second input. When disabled, these won\u2019t be merged into the stage."]}], "indent": 0, "text": ["Import Secondary Input Render Vars"], "role": "item", "attrs": {"id": "importSecondaryInputRenderVars"}, "extent": [2835, 2871], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1081, 1435], "text": ["A whitespace-separated list of shading component names that will be\n    computed for export. If you have defined new component labels in your\n    materials, these can be added to the list so that they are exported for\n    per-component export planes. If you are not using some components, remove\n    them from the list to improve render efficiency."]}, {"indent": 4, "type": "para", "extent": [1435, 1656], "text": ["PBR light exports assume that this list is complete - that is, all\n    components created by shaders are listed. If there are unlisted components,\n    light exports may be missing illumination from these components."]}], "indent": 0, "text": ["Export Components"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:exportcomponents"}, "extent": [997, 1018], "type": "parameters_item", "id": "karma:global:exportcomponents"}, {"body": [{"indent": 4, "type": "para", "extent": [1742, 2009], "text": ["A space-separated list of component types that will behave like diffuse\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."]}], "indent": 0, "text": ["Diffuse Components"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:diffusecomponents"}, "extent": [1656, 1678], "type": "parameters_item", "id": "karma:global:diffusecomponents"}, {"body": [{"indent": 4, "type": "para", "extent": [2095, 2362], "text": ["A space-separated list of component types that will behave like refract\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."]}], "indent": 0, "text": ["Refract Components"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:refractcomponents"}, "extent": [2009, 2031], "type": "parameters_item", "id": "karma:global:refractcomponents"}, {"body": [{"indent": 4, "type": "para", "extent": [2446, 2712], "text": ["A space-separated list of component types that will behave like volume\n    bounces.  This will affect which reflection scope is used based on the ray\n    type and also which bounce limit to use.  Uncategorized component types are\n    assumed to be reflections."]}], "indent": 0, "text": ["Volume Components"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:volumecomponents"}, "extent": [2362, 2383], "type": "parameters_item", "id": "karma:global:volumecomponents"}, {"body": [{"indent": 4, "type": "para", "extent": [2790, 3068], "text": ["A space-separated list of component types that will behave like subsurface\n    scatter bounces.  This will affect which reflection scope is used based on\n    the ray type and also which bounce limit to use.  Uncategorized component\n    types are assumed to be reflections."]}], "indent": 0, "text": ["SSS Components"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:ssscomponents"}, "extent": [2712, 2730], "type": "parameters_item", "id": "karma:global:ssscomponents"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"indent": 0, "type": "para", "extent": [3346, 3391], "text": ["Standard light path expression render vars"]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [604, 664], "text": ["Add the beauty output as an RGBA channel labelled ", {"text": ["C"], "type": "code"}, "."]}], "indent": 0, "text": ["Beauty"], "role": "item", "attrs": {"id": "beauty"}, "extent": [579, 588], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [694, 739], "text": ["Select between 16 and 32 bit precision."]}], "indent": 0, "text": ["Precision"], "role": "item", "attrs": {"id": "precision"}, "extent": [664, 675], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [784, 912], "text": ["Add the unoccluded (unshadowed) beauty output as an RGB channel labelled ", {"text": ["beautyunshadowed"], "type": "code"}, " - defined as ", {"text": ["unoccluded;C.*"], "type": "code"}, "."]}], "indent": 0, "text": ["Beauty Unshadowed"], "role": "item", "attrs": {"id": "beautyunshadowed"}, "extent": [739, 758], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [938, 1048], "text": ["Add the diffuse surface reflection component as an RGB channel labelled ", {"text": ["diffuse"], "type": "code"}, " - defined as ", {"text": ["C<RD>L"], "type": "code"}, "."]}], "indent": 0, "text": ["Diffuse"], "role": "item", "attrs": {"id": "diffuse"}, "extent": [912, 921], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1095, 1250], "text": ["Add the unoccluded (unshadowed) diffuse surface reflection component as an RGB channel labelled ", {"text": ["diffuseunshadowed"], "type": "code"}, " - defined as ", {"text": ["unoccluded;C<RD>L"], "type": "code"}, "."]}], "indent": 0, "text": ["Diffuse Unshadowed"], "role": "item", "attrs": {"id": "diffuseunshadowed"}, "extent": [1048, 1068], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1293, 1422], "text": ["Add the indirect diffuse surface reflection component as an RGB channel labelled ", {"text": ["indirectdiffuse"], "type": "code"}, " - defined as ", {"text": ["C<RD>.+L"], "type": "code"}, "."]}], "indent": 0, "text": ["Indirect Diffuse"], "role": "item", "attrs": {"id": "indirectdiffuse"}, "extent": [1250, 1268], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1467, 1577], "text": ["Add the glossy reflection component as an RGB channel labelled ", {"text": ["glossyreflection"], "type": "code"}, " - defined as ", {"text": ["C<RG>L"], "type": "code"}, "."]}], "indent": 0, "text": ["Glossy Reflection"], "role": "item", "attrs": {"id": "glossyreflection"}, "extent": [1422, 1441], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1639, 1768], "text": ["Add the indirect glossy reflection component as an RGB channel labelled ", {"text": ["indirectglossyreflection"], "type": "code"}, " - defined as ", {"text": ["C<RG>.+L"], "type": "code"}, "."]}], "indent": 0, "text": ["Indirect Glossy Reflection"], "role": "item", "attrs": {"id": "indirectglossyreflection"}, "extent": [1577, 1605], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1817, 1932], "text": ["Add the glossy transmission component as an RGB channel labelled ", {"text": ["glossytransmission"], "type": "code"}, " - defined as ", {"text": ["C<TG>.*"], "type": "code"}, "."]}], "indent": 0, "text": ["Glossy Transmission"], "role": "item", "attrs": {"id": "glossytransmission"}, "extent": [1768, 1789], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1971, 2071], "text": ["Add the visible lights component as an RGB channel labelled ", {"text": ["visiblelights"], "type": "code"}, " - defined as ", {"text": ["CL"], "type": "code"}, "."]}], "indent": 0, "text": ["Visible Lights"], "role": "item", "attrs": {"id": "visiblelights"}, "extent": [1932, 1948], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2099, 2188], "text": ["Add the emission component as an RGB channel labelled ", {"text": ["emission"], "type": "code"}, " - defined as ", {"text": ["CO"], "type": "code"}, "."]}], "indent": 0, "text": ["Emission"], "role": "item", "attrs": {"id": "emission"}, "extent": [2071, 2081], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2233, 2341], "text": ["Add the indirect emission component as an RGB channel labelled ", {"text": ["indirectemission"], "type": "code"}, " - defined as ", {"text": ["C.+O"], "type": "code"}, "."]}], "indent": 0, "text": ["Indirect Emission"], "role": "item", "attrs": {"id": "indirectemission"}, "extent": [2188, 2207], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2365, 2451], "text": ["Add the volume component as an RGB channel labelled ", {"text": ["volume"], "type": "code"}, " - defined as ", {"text": ["CVL"], "type": "code"}, "."]}], "indent": 0, "text": ["Volume"], "role": "item", "attrs": {"id": "volume"}, "extent": [2341, 2349], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2492, 2597], "text": ["Add the indirect volume component as an RGB channel labelled ", {"text": ["indirectvolume"], "type": "code"}, " - defined as ", {"text": ["CV.+L"], "type": "code"}, "."]}], "indent": 0, "text": ["Indirect Volume"], "role": "item", "attrs": {"id": "indirectvolume"}, "extent": [2451, 2468], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2633, 2726], "text": ["Add the coat component as an RGB channel labelled ", {"text": ["coat"], "type": "code"}, " - defined as ", {"text": ["C<...'coat'>.*"], "type": "code"}, "."]}], "indent": 0, "text": ["BSDF Labelled ", {"text": ["coat"], "type": "code"}], "role": "item", "attrs": {"id": "coat"}, "extent": [2597, 2619], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [2760, 2851], "text": ["Add the sss component as an RGB channel labelled ", {"text": ["sss"], "type": "code"}, " - defined as ", {"text": ["C<...'sss'>.*"], "type": "code"}, "."]}], "indent": 0, "text": ["BSDF Labelled ", {"text": ["sss"], "type": "code"}], "role": "item", "attrs": {"id": "sss"}, "extent": [2726, 2747], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 4, "text": ["LPE (Light Path Expressions)"], "extent": [3307, 3346], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [2898, 2975], "text": ["Add the ray origin render var as a Float3 channel labelled ", {"text": ["rayorigin"], "type": "code"}, "."]}], "indent": 0, "text": ["Ray Origin (P)"], "role": "item", "attrs": {"id": "rayorigin"}, "extent": [2862, 2879], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3016, 3099], "text": ["Add the ray direction render var as a Float3 channel labelled ", {"text": ["raydirection"], "type": "code"}, "."]}], "indent": 0, "text": ["Ray Direction (D)"], "role": "item", "attrs": {"id": "raydirection"}, "extent": [2975, 2994], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3141, 3214], "text": ["Add the shutter time render var as a Float channel labelled ", {"text": ["time"], "type": "code"}, "."]}], "indent": 0, "text": ["Time (Shutter Time)"], "role": "item", "attrs": {"id": "shuttertime"}, "extent": [3099, 3120], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3246, 3316], "text": ["Add the near bias render var as a Float channel labelled ", {"text": ["near"], "type": "code"}, "."]}], "indent": 0, "text": ["Near (Near Bias)"], "role": "item", "attrs": {"id": "near"}, "extent": [3214, 3232], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3349, 3421], "text": ["Add the max distance render var as a Float channel labelled ", {"text": ["far"], "type": "code"}, "."]}], "indent": 0, "text": ["Far (Max Distance)"], "role": "item", "attrs": {"id": "far"}, "extent": [3316, 3336], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3461, 3534], "text": ["Add the mask render var (alpha) as a Float channel labelled ", {"text": ["mask"], "type": "code"}, "."]}], "indent": 0, "text": ["Mask (Intersection Mask)"], "role": "item", "attrs": {"id": "mask"}, "extent": [3421, 3447], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3570, 3655], "text": ["Add the ray contribution render var as a Float channel labelled ", {"text": ["contribution"], "type": "code"}, "."]}], "indent": 0, "text": ["Contribution"], "role": "item", "attrs": {"id": "contribution"}, "extent": [3534, 3548], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3690, 3769], "text": ["Add the world space position render var as a Float3 channel labelled ", {"text": ["P"], "type": "code"}, "."]}], "indent": 0, "text": ["P (World Space)"], "role": "item", "attrs": {"id": "position"}, "extent": [3655, 3672], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3806, 3873], "text": ["Add the depth render var as a Float channel labelled ", {"text": ["depth"], "type": "code"}, "."]}], "indent": 0, "text": ["Depth (Camera Space)"], "role": "item", "attrs": {"id": "depth"}, "extent": [3769, 3791], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [3901, 3979], "text": ["Add the ray hit stack render var as a Float channel labelled ", {"text": ["hitstack"], "type": "code"}, "."]}], "indent": 0, "text": ["Hitstack"], "role": "item", "attrs": {"id": "hitstack"}, "extent": [3873, 3883], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4014, 4088], "text": ["Add the element id render var as a Float channel labelled ", {"text": ["element"], "type": "code"}, "."]}], "indent": 0, "text": ["Element (Raw Id)"], "role": "item", "attrs": {"id": "element"}, "extent": [3979, 3997], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4113, 4196], "text": ["Add the primitive identifier render var as a Float channel labelled ", {"text": ["primid"], "type": "code"}, "."]}], "indent": 0, "text": ["Prim Id"], "role": "item", "attrs": {"id": "primid"}, "extent": [4088, 4097], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4212, 4288], "text": ["Add the primitive hit UV render var as a Float3 channel labelled ", {"text": ["UV"], "type": "code"}, "."]}], "indent": 0, "text": ["UV"], "role": "item", "attrs": {"id": "uv"}, "extent": [4196, 4200], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4315, 4401], "text": ["Add the primitive hit distance render var as a Float channel labelled ", {"text": ["hitdist"], "type": "code"}, "."]}], "indent": 0, "text": ["Hit Dist"], "role": "item", "attrs": {"id": "hitdist"}, "extent": [4288, 4298], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4421, 4530], "text": ["Add the dPdz (Z-depth delta for the current microvolume) render var as a Float channel labelled ", {"text": ["dPdz"], "type": "code"}, "."]}], "indent": 0, "text": ["dPdz"], "role": "item", "attrs": {"id": "dPdz"}, "extent": [4401, 4407], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4563, 4642], "text": ["Add the primitive hit normal render var as a Float3 channel labelled ", {"text": ["N"], "type": "code"}, "."]}], "indent": 0, "text": ["N (Smooth Normal)"], "role": "item", "attrs": {"id": "hitN"}, "extent": [4530, 4549], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4680, 4766], "text": ["Add the primitive geometric normal render var as a Float3 channel labelled ", {"text": ["Ng"], "type": "code"}, "."]}], "indent": 0, "text": ["Ng (Geometric Normal)"], "role": "item", "attrs": {"id": "hitNg"}, "extent": [4642, 4665], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [4788, 4860], "text": ["Add the ray flags render var as a Float channel labelled ", {"text": ["flags"], "type": "code"}, "."]}], "indent": 0, "text": ["Flags"], "role": "item", "attrs": {"id": "flags"}, "extent": [4766, 4773], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 4, "text": ["Ray"], "extent": [4159, 4174], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [4967, 5027], "text": ["Additional render vars can be added on the node directly."]}, {"body": [], "indent": 0, "level": 5, "text": ["Render Var"], "extent": [5071, 5094], "container": true, "type": "h", "id": null}], "indent": 0, "level": 4, "text": ["Extra Render Vars"], "extent": [4939, 4967], "container": true, "type": "h", "id": null}], "indent": 0, "level": 3, "text": ["Render Vars (AOVs)"], "extent": [2393, 2420], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Images"], "extent": [711, 724], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [7983, 8092], "text": ["The number of ray-samples sent through each pixel.  More samples will\n    result in a less noisy image."]}], "indent": 0, "text": ["Pixel Samples"], "role": "item", "attrs": {"kagroup": "Sampling", "hprop": "karma:global:samplesperpixel"}, "extent": [7901, 7918], "type": "parameters_item", "id": "karma:global:samplesperpixel"}, {"body": [{"indent": 4, "type": "para", "extent": [8284, 8491], "text": ["Whether Karma should perform uniform sampling of lights or whether\n    rendering should use the light tree.  The light tree can be significantly\n    faster for scenes that have large numbers of lights."]}], "indent": 0, "text": ["Light Sampling Mode"], "role": "item", "attrs": {"kagroup": "Sampling", "hprop": "karma:global:light_sampling_mode"}, "extent": [8192, 8215], "type": "parameters_item", "id": "karma:global:light_sampling_mode"}, {"body": [{"indent": 4, "type": "para", "extent": [8589, 8833], "text": ["This is a global control to improve sampling quality for all lights.  This\n    acts as a multiplier on the individual light quality controls.  Increasing\n    the quality will improve direct light sampling as well as\n    shadows/occlusion."]}], "indent": 0, "text": ["Light Sampling Quality"], "role": "item", "attrs": {"kagroup": "Sampling", "hprop": "karma:global:light_sampling_quality"}, "extent": [8491, 8517], "type": "parameters_item", "id": "karma:global:light_sampling_quality"}, {"body": [{"indent": 4, "type": "para", "extent": [5551, 5603], "text": ["This is the random seed to use for the render."]}], "indent": 0, "text": ["Random Seed"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:randomseed"}, "extent": [5475, 5490], "type": "parameters_item", "id": "karma:global:randomseed"}, {"body": [{"indent": 4, "type": "para", "extent": [5300, 5422], "text": ["When rendering, a Pixel Oracle tells karma which pixels need additional\n    sampling and which pixels are converged."]}, {"indent": 4, "type": "para", "extent": [5422, 5475], "text": ["This parameter tells karma which oracle to use."]}], "indent": 0, "text": ["Pixel Oracle"], "role": "item", "attrs": {"kagroup": "Image", "hprop": "karma:global:pixeloracle"}, "extent": [5226, 5242], "type": "parameters_item", "id": "karma:global:pixeloracle"}, {"body": [{"indent": 4, "type": "para", "extent": [5755, 5764], "text": ["???"]}], "indent": 0, "text": ["Adjacent Count"], "role": "item", "attrs": {"id": "oracleadjacentcount"}, "extent": [5710, 5726], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5807, 5816], "text": ["???"]}], "indent": 0, "text": ["Minimum Samples"], "role": "item", "attrs": {"id": "oraclemnisamples"}, "extent": [5764, 5781], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5844, 5853], "text": ["???"]}], "indent": 0, "text": ["Plane"], "role": "item", "attrs": {"id": "oracleplane"}, "extent": [5816, 5823], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5906, 5915], "text": ["???"]}], "indent": 0, "text": ["Variance Threshold"], "role": "item", "attrs": {"id": "oraclevariancethreshold"}, "extent": [5853, 5873], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Sampling"], "extent": [5439, 5457], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [3153, 3258], "text": ["Disable all lighting and material evaluation, using only the display color\n    to shade primitives."]}], "indent": 0, "text": ["Disable Lighting"], "role": "item", "attrs": {"kagroup": "Shading", "hprop": "karma:global:disable_lighting"}, "extent": [3068, 3088], "type": "parameters_item", "id": "karma:global:disable_lighting"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "text": ["Force Headlight Shading"], "role": "item", "extent": [5933, 5959], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3625, 3723], "text": ["When rendering in headlight mode, perform this many ambient occlusion\n    samples per shade."]}], "indent": 0, "text": ["Headlight AO Samples"], "role": "item", "attrs": {"kagroup": "Shading", "hprop": "karma:global:head_ao_samples"}, "extent": [3537, 3561], "type": "parameters_item", "id": "karma:global:head_ao_samples"}, {"body": [{"indent": 4, "type": "para", "extent": [3348, 3537], "text": ["When rendering in headlight mode with ambient occlusion shading, this\n    distance is used for occlusion testing.  Smaller values will result in\n    faster, but less accurate shading."]}], "indent": 0, "text": ["Headlight AO Distance"], "role": "item", "attrs": {"kagroup": "Shading", "hprop": "karma:global:head_ao_distance"}, "extent": [3258, 3283], "type": "parameters_item", "id": "karma:global:head_ao_distance"}, {"body": [{"indent": 4, "type": "para", "extent": [4055, 4113], "text": ["The color of the depthcue fog for disabled lighting."]}], "indent": 0, "text": ["Headlight Fog Color"], "role": "item", "attrs": {"kagroup": "Shading", "hprop": "karma:global:head_depthcue_color"}, "extent": [3964, 3987], "type": "parameters_item", "id": "karma:global:head_depthcue_color"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Headlight"], "extent": [5915, 5933], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [6771, 6814], "text": ["The ray-bias used for secondary rays."]}], "indent": 0, "text": ["Ray Bias"], "role": "item", "attrs": {"kagroup": "Shading", "hprop": "karma:global:raybias"}, "extent": [6703, 6715], "type": "parameters_item", "id": "karma:global:raybias"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Shading"], "extent": [6169, 6185], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [8905, 9017], "text": ["Karma breaks down an image into multiple tiles for rendering.  This\n    specifies the size of these tiles."]}], "indent": 0, "text": ["Tile Size"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:tilesize"}, "extent": [8833, 8846], "type": "parameters_item", "id": "karma:global:tilesize"}, {"body": [{"indent": 4, "type": "para", "extent": [4340, 4446], "text": ["When rendering to the Solaris viewport, this causes each render to start\n    with a new random seed."]}], "indent": 0, "text": ["IPR Inc Random"], "role": "item", "attrs": {"kagroup": "IPR", "hprop": "karma:global:ipr_inc_random"}, "extent": [4263, 4281], "type": "parameters_item", "id": "karma:global:ipr_inc_random"}, {"body": [{"indent": 4, "type": "para", "extent": [4522, 4568], "text": ["The initial tile size for IPR rendering."]}], "indent": 0, "text": ["IPR Tile Size"], "role": "item", "attrs": {"kagroup": "IPR", "hprop": "karma:global:ipr_proxydepth"}, "extent": [4446, 4463], "type": "parameters_item", "id": "karma:global:ipr_proxydepth"}, {"body": [{"indent": 4, "type": "para", "extent": [4880, 4973], "text": ["When rendering in IPR mode, reserve this number of threads for other\n    Houdini tasks."]}], "indent": 0, "text": ["IPR Reserve Threads"], "role": "item", "attrs": {"kagroup": "IPR", "hprop": "karma:global:ipr_reserve_threads"}, "extent": [4793, 4816], "type": "parameters_item", "id": "karma:global:ipr_reserve_threads"}, {"body": [{"indent": 4, "type": "para", "extent": [5682, 5827], "text": ["Whether to use a fixed size cache (", {"text": ["karma:global:cachesize"], "type": "code"}, ") or whether to use a proportion of physical memory (", {"text": ["karma:global:cacheratio"], "type": "code"}, ")"]}], "indent": 0, "text": ["Cache Limit"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:usecacheratio"}, "extent": [5603, 5618], "type": "parameters_item", "id": "karma:global:usecacheratio"}, {"body": [{"indent": 4, "type": "para", "extent": [5910, 5987], "text": ["The proportion of physical memory Karma will use for its unified cache."]}, {"indent": 4, "type": "para", "extent": [5987, 6125], "text": ["For example, with the default ", {"text": ["vm_cacheratio"], "type": "code"}, " of ", {"text": ["0.25"], "type": "code"}, " and 16 Gb of\n    physical memory, Karma will use 4 Gb for its unified cache."]}, {"indent": 4, "type": "para", "extent": [6125, 6228], "text": ["The unified cache stores dynamic, unloadable data used by the render\n    including the following:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [6228, 6258], "text": ["2D ", {"text": [".rat"], "type": "code"}, " texture tiles"]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6258, 6288], "text": ["3D ", {"text": [".i3d"], "type": "code"}, " texture tiles"]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6288, 6355], "text": ["3D ", {"text": [".pc"], "type": "code"}, " point cloud pages (when not preloaded into memory)"]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [6355, 6424], "text": ["Note:  This value is only used for off-line rendering, not IPR."]}], "indent": 0, "text": ["Cache Memory Ratio"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:cacheratio"}, "extent": [5827, 5849], "type": "parameters_item", "id": "karma:global:cacheratio"}, {"body": [{"indent": 4, "type": "para", "extent": [6503, 6634], "text": ["An explicit memory limit for the unified shading cache.  This is deprecated\n    in favor of using the ", {"text": ["Cache Memory Ratio"], "type": "ui"}, "."]}, {"indent": 4, "type": "para", "extent": [6634, 6703], "text": ["Note:  This value is only used for off-line rendering, not IPR."]}], "indent": 0, "text": ["Cache Size (MB)"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:cachesize"}, "extent": [6424, 6443], "type": "parameters_item", "id": "karma:global:cachesize"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Render"], "extent": [6228, 6243], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [9105, 9699], "text": ["This parameter controls the shading quality scale factor for geometry that\n    is not directly visible to the camera. For geometry that is outside the\n    field of view (ie. visible only to secondary rays), mantra will smoothly\n    reduce the shading quality based on the angle between the geometry and the\n    edge of the viewing frustum.  Smaller values can increase performance\n    particularly in scenes where the camera is within the displacement bound of\n    nearby geometry, where it permits the hidden primitives to be diced more\n    coarsely than those that are directly visible."]}], "indent": 0, "text": ["Offscreen Quality"], "role": "item", "attrs": {"kagroup": "Rendering", "hprop": "karma:global:offscreenquality"}, "extent": [9017, 9038], "type": "parameters_item", "id": "karma:global:offscreenquality"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Dicing"], "extent": [6637, 6652], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [382, 641], "text": ["As rendering progresses, print out progress using the Alfred progress\n    format.  For multi-frame renders, this progress will be cumulative across\n    frames (i.e. if there are 4 frames, percent complete will be 25% after the\n    first frame finishes)."]}], "indent": 0, "text": ["Show Alfred Progress"], "role": "item", "attrs": {"kagroup": "Statistics", "hprop": "karma:global:alfred"}, "extent": [300, 324], "type": "parameters_item", "id": "karma:global:alfred"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Statistics"], "extent": [6752, 6771], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Rendering"], "extent": [5422, 5439], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [183, 300], "text": ["Enabling this option will cause karma to abort the render with an error if it encounters a missing texture map."]}], "indent": 0, "text": ["Abort Missing Texture"], "role": "item", "attrs": {"kagroup": "Control", "hprop": "karma:global:abortmissingtexture"}, "extent": [89, 115], "type": "parameters_item", "id": "karma:global:abortmissingtexture"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Driver"], "extent": [6813, 6826], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [397, 409], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [6891, 6929], "text": [{"text": "", "fullpath": "/nodes/lop/additionalrendervars", "scheme": "Node", "type": "link", "value": "/nodes/lop/additionalrendervars"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6929, 6952], "text": [{"text": "", "fullpath": "/nodes/lop/karma", "scheme": "Node", "type": "link", "value": "/nodes/lop/karma"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6952, 6993], "text": [{"text": "", "fullpath": "/nodes/lop/karmastandardrendervars", "scheme": "Node", "type": "link", "value": "/nodes/lop/karmastandardrendervars"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6993, 7024], "text": [{"text": "", "fullpath": "/nodes/lop/renderproduct", "scheme": "Node", "type": "link", "value": "/nodes/lop/renderproduct"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7024, 7056], "text": [{"text": "", "fullpath": "/nodes/lop/rendersettings", "scheme": "Node", "type": "link", "value": "/nodes/lop/rendersettings"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7056, 7083], "text": [{"text": "", "fullpath": "/nodes/lop/rendervar", "scheme": "Node", "type": "link", "value": "/nodes/lop/rendervar"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7083, 7126], "text": [{"text": ["Light Path Expressions"], "fullpath": "/render/lpe", "scheme": null, "type": "link", "value": "/render/lpe"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [7126, 7149], "text": [{"text": ["OCIO"], "fullpath": "/io/ocio", "scheme": null, "type": "link", "value": "/io/ocio"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [6882, 6891], "container": true, "type": "related_section", "id": "related"}], "title": ["Karma Render Properties"], "summary": ["Configure Render Properties for Karma (Beta)."], "attrs": {"version": null, "tags": "rendering,karma", "namespace": null, "internal": "karmarenderproperties", "context": "lop", "type": "node", "icon": "LOP/karmarenderproperties"}, "included": ["/nodes/lop/_simple_prims", "/nodes/lop/karmastandardrendervars", "/nodes/lop/rendersettings", "/props/_minmax_styles", "/props/karma", "/props/mantra"], "type": "root"}