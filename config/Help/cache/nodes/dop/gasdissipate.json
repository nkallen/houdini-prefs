{"body": [{"indent": 0, "text": ["Gas Dissipate"], "type": "title", "extent": [66, 84], "level": 0}, {"indent": 0, "type": "summary", "extent": [84, 131], "text": ["A microsolver that dissipates a field."]}, {"indent": 0, "type": "para", "extent": [131, 500], "text": ["The Gas Dissipate DOP is a microsolver used in building larger fluid\nsimulations. The ", {"text": ["Fluid Solver"], "fullpath": "/nodes/dop/fluidsolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/fluidsolver"}, " and ", {"text": ["Smoke Solver"], "fullpath": "/nodes/dop/smokesolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/smokesolver"}, " DOPs allow\nmicrosolvers to be added before or after the main solver step to extend\nor tweak the simulation. Alternatively, enterprising people may attempt\nto build an entire new solver out of microsolvers."]}, {"indent": 0, "type": "para", "extent": [500, 929], "text": ["The Gas Dissipate DOP performs several types of dissipation on the\nspecified field.  This will drive the fields value to zero,\ncausing the smoke to disappear over time.  An optional control field\ncan be used to affect when the dissipation occurs.  Using the heat\nfield for a control, if the solver is set to add the heat field, will\nallow having dissipation be dependent on how long since the smoke was\nadded to the simulation."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [949, 1009], "text": ["The field to dissipate. This is a single scalar field."]}], "indent": 0, "text": ["Field"], "role": "item", "extent": [941, 949], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [30, 245], "text": ["A scalar field to use as a stencil for where to perform this node\u2019s\n    computations. Voxels whose stencil value strictly exceeds 0.5 will have the\n    operation applied, while the rest will be left unchanged."]}, {"body": [{"body": [{"type": "para", "indent": 8, "extent": [255, 368], "text": ["If a stencil field isn\u2019t provided or does not exist, the operation will\n        be performed everywhere."]}], "role": "item", "indent": 4, "extent": [245, 255], "type": "note"}], "role": "item_group", "container": true, "type": "note_group"}], "indent": 0, "text": ["Stencil Field"], "role": "item", "extent": [15, 30], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1056, 1267], "text": ["The field to use for looking up in the ramps.  This is a\n    single scalar field.  If it is the heat field, it can be\n    thought of as measuring the time since a voxel was added to\n    the simulation."]}], "indent": 0, "text": ["Control Field"], "role": "item", "extent": [1041, 1056], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1278, 1380], "text": ["A fixed diffusion of the field in all directions.  This is a\n    time based blurring effect."]}], "indent": 0, "text": ["Diffusion"], "role": "item", "extent": [1267, 1278], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1398, 1905], "text": ["The rate at which the field will be reduced. An evaporation of 0.1 means 10% of the field will be lost in one second. The ", {"text": ["Evaporation Rate"], "type": "ui"}, " is a multiplicative factor which acts as a sort of half life for the smoke. The rate is what % of smoke should disappear after 1 second. So a rate of 1 means all the smoke disappears in a second, which for a halflife effect means it disappears immediately. 0 means no effect. 0.5 means that after 1 second you have 50% of the smoke left you did at the start."]}, {"indent": 4, "type": "para", "extent": [1905, 2226], "text": ["Since this uses multiplication to achieve its effect over one second, the per frame action may be a lot less than expected. A value of 0.75, which removes 75% of the field over one second, only removes 5.6% of the field every frame at 24 FPS. This compounds over the 24 frames to get the final desired 75% removal. "]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [2237, 2355], "text": [{"text": ["Evaporation Rate"], "type": "ui"}, " and ", {"text": ["Evaporate by Subtraction"], "type": "ui"}, " do not work together, they layer on top of each other."]}], "indent": 4, "text": [" "], "role": "item", "extent": [2226, 2237], "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Evaporation Rate"], "role": "item", "extent": [1380, 1398], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2381, 2805], "text": ["Evaporation uses a multiplicative process which tails smoothly to zero. You may want a harsher linear reduction on smoke values. This is done by subtracting a fixed amount from the field proportional to the timestep. The given subtraction amount will be subtracted every second. The ramp will be multiplied by the subtraction amount to give a per-voxel control of the subtraction rate dependent on the control volume. "]}, {"indent": 4, "type": "para", "extent": [2805, 3025], "text": ["Subtraction, as the name suggests, just subtracts the subtraction amount times the timestep away from all the density every timestep. So a value of 0.1 means that 0.1 of density will be lost per voxel every second."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3035, 3153], "text": [{"text": ["Evaporation Rate"], "type": "ui"}, " and ", {"text": ["Evaporate by Subtraction"], "type": "ui"}, " do not work together, they layer on top of each other."]}], "indent": 4, "role": "item", "type": "note", "extent": [3025, 3035]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Evaporate by Subtraction"], "role": "item", "extent": [2355, 2381], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3188, 3367], "text": ["The specified evaporation will be multiplied by this ramp\n    value.  This allows one to turn on evaporation on cooler or\n    older smoke by tying it to a control field."]}], "indent": 0, "text": ["Scale Evaporation Rate by Control"], "role": "item", "extent": [3153, 3188], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3385, 3536], "text": ["The field is clamped from below by this value.  This can\n    ensure the evaporate by subtraction option does not create a\n    negative field."]}], "indent": 0, "text": ["Clamp To Minimum"], "role": "item", "extent": [3367, 3385], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3554, 3725], "text": ["A per voxel maximum is calculated using the control field.\n    This is then multiplied by the maximum value to get a clamp to\n    clamp the maximum of the field."]}], "indent": 0, "text": ["Clamp To Maximum"], "role": "item", "extent": [3536, 3554], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3746, 4167], "text": ["The ramps all expect a control field in the 0 to 1 range, with\n    0 meaning the left hand of the ramp and 1 meaning the right\n    hand.  However, heat and temperature fields are 1 when first\n    created and decay to 0 over time, and since one often expects\n    the right side to control the \"older\" smoke, the default\n    mapping has been reversed here. The range can also be\n    adjusted for other control fields."]}], "indent": 0, "text": ["Remap Control Field"], "role": "item", "extent": [3725, 3746], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [929, 941], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [27, 184], "text": ["Any microsolvers wired into these inputs will be executed prior to this node executing.  The chain of nodes will thus be processed in a top-down manner."]}], "type": "dt", "indent": 0, "extent": [15, 27], "text": ["All Inputs"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [4167, 4175], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 296], "text": ["The operation of this output depends on what inputs are connected\n    to this node. If an object stream is input to this node, the output\n    is also an object stream containing the same objects as the input\n    (but with the data from this node attached). "]}, {"type": "para", "indent": 4, "extent": [296, 606], "text": ["If no object stream is\n    connected to this node, the output is a data output. This data\n    output can be connected to an ", {"text": ["Apply Data DOP"], "fullpath": "/nodes/dop/applydata", "scheme": "Node", "type": "link", "value": "/nodes/dop/applydata"}, ",\n    or connected directly to a data input of another data node, to\n    attach the data from this node to an object or another piece of\n    data."]}], "type": "dt", "indent": 0, "extent": [15, 29], "text": ["First Output"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [4219, 4228], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 325], "text": ["This DOP node defines a local variable for each channel and\n    parameter on the Data Options page, with the same name as the\n    channel. So for example, the node may have channels for Position\n    (positionx, positiony, positionz) and a parameter for an object name\n    (objectname). "]}, {"type": "para", "indent": 4, "extent": [325, 519], "text": ["Then there will also be local variables with the names\n    positionx, positiony, positionz, and objectname. These variables\n    will evaluate to the previous value for that parameter. "]}, {"type": "para", "indent": 4, "extent": [519, 692], "text": ["This previous value is always stored as part of the data attached to the\n    object being processed. This is essentially a shortcut for a\n    dopfield expression like:"]}, {"lang": null, "type": "pre", "indent": 4, "extent": [692, 775], "text": ["\n    dopfield($DOPNET, $OBJID, dataName, \"Options\", 0, channelname)\n    "]}, {"type": "para", "indent": 4, "extent": [775, 883], "text": ["If the data does not already exist, then a value of zero or an\n    empty string will be returned."]}], "type": "dt", "indent": 0, "extent": [16, 29], "text": ["channelname"]}, {"body": [{"type": "para", "indent": 4, "extent": [891, 1132], "text": ["This value is the simulation time (see variable ST) at which the\n    current data was created. This value may not be the same as the\n    current simulation time if this node is modifying existing data,\n    rather than creating new data."]}], "type": "dt", "indent": 0, "extent": [883, 891], "text": ["DATACT"]}, {"body": [{"type": "para", "indent": 4, "extent": [1140, 1383], "text": ["This value is the simulation frame (see variable SF) at which the\n    current data was created. This value may not be the same as the\n    current simulation frame if this node is modifying existing data,\n    rather than creating new data."]}], "type": "dt", "indent": 0, "extent": [1132, 1140], "text": ["DATACF"]}, {"body": [{"type": "para", "indent": 4, "extent": [1392, 1594], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [1594, 1712], "text": ["In this case, this value is set to the\n    name of the relationship the data to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [1383, 1392], "text": ["RELNAME"]}, {"body": [{"type": "para", "indent": 4, "extent": [1723, 1925], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [1925, 2128], "text": ["In this case, this value is set to a\n    string that is a space separated list of the object identifiers for all\n    the Affected Objects of the relationship to which the data is being\n    attached."]}], "type": "dt", "indent": 0, "extent": [1712, 1723], "text": ["RELOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [2141, 2343], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [2343, 2528], "text": ["In this case, this value is set to a\n    string that is a space separated list of the names of all the Affected\n    Objects of the relationship to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [2128, 2141], "text": ["RELOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [2542, 2744], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [2744, 2947], "text": ["In this case, this value is set to a\n    string that is a space separated list of the object identifiers for all\n    the Affector Objects of the relationship to which the data is being\n    attached."]}], "type": "dt", "indent": 0, "extent": [2528, 2542], "text": ["RELAFFOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [2963, 3165], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [3165, 3350], "text": ["In this case, this value is set to a\n    string that is a space separated list of the names of all the Affector\n    Objects of the relationship to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [2947, 2963], "text": ["RELAFFOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [20, 107], "text": ["This value is the simulation time for which the node is being\n    evaluated. "]}, {"type": "para", "indent": 4, "extent": [107, 326], "text": ["This value may not be equal to the current Houdini time\n    represented by the variable T, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " ", {"text": ["Offset Time"], "type": "ui"}, " and ", {"text": ["Time Scale"], "type": "ui"}, "\n    parameters. "]}, {"type": "para", "indent": 4, "extent": [326, 555], "text": ["This value is guaranteed to have a value of zero at the\n    start of a simulation, so when testing for the first timestep of a\n    simulation, it is best to use a test like ", {"text": ["$ST == 0"], "type": "code"}, " rather than\n    ", {"text": ["$T == 0"], "type": "code"}, " or ", {"text": ["$FF == 1"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [16, 20], "text": ["ST"]}, {"body": [{"type": "para", "indent": 4, "extent": [559, 700], "text": ["This value is the simulation frame (or more accurately, the\n    simulation time step number) for which the node is being evaluated."]}, {"type": "para", "indent": 4, "extent": [700, 999], "text": ["This value may not be equal to the current Houdini frame number\n    represented by the variable F, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " parameters. Instead, this value is equal to\n    the simulation time (ST) divided by the simulation timestep size\n    (TIMESTEP)."]}], "type": "dt", "indent": 0, "extent": [555, 559], "text": ["SF"]}, {"body": [{"type": "para", "indent": 4, "extent": [1009, 1181], "text": ["This value is the size of a simulation timestep. This value is\n    useful to scale values that are expressed in units per second, but\n    are applied on each timestep."]}], "type": "dt", "indent": 0, "extent": [999, 1009], "text": ["TIMESTEP"]}, {"body": [{"type": "para", "indent": 4, "extent": [1187, 1305], "text": ["This value is the inverse of the TIMESTEP value. It is the number\n    of timesteps per second of simulation time."]}], "type": "dt", "indent": 0, "extent": [1181, 1187], "text": ["SFPS"]}, {"body": [{"type": "para", "indent": 4, "extent": [1312, 1523], "text": ["This is the number of objects in the simulation. For nodes that\n    create objects such as the ", {"text": ["Empty Object"], "fullpath": "/nodes/dop/emptyobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/emptyobject"}, " node,\n    this value will increase for each object that is evaluated. "]}, {"type": "para", "indent": 4, "extent": [1523, 1621], "text": ["A good way to guarantee unique object names is to use an expression\n    like ", {"text": ["object_$SNOBJ"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [1305, 1312], "text": ["SNOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1627, 1859], "text": ["This value is the number of objects that will be evaluated by the\n    current node during this timestep. This value will often be\n    different from SNOBJ, as many nodes do not process all the objects\n    in a simulation. "]}, {"type": "para", "indent": 4, "extent": [1859, 1991], "text": ["This value may return 0 if the node does not\n    process each object sequentially (such as the ", {"text": ["Group\n    DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1621, 1627], "text": ["NOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1996, 2322], "text": ["This value is the index of the specific object being processed by\n    the node. This value will always run from zero to NOBJ-1 in a given\n    timestep. This value does not identify the current object within the\n    simulation like OBJID or OBJNAME, just the object\u2019s position in the\n    current order of processing. "]}, {"type": "para", "indent": 4, "extent": [2322, 2616], "text": ["This value is useful for generating a\n    random number for each object, or simply splitting the objects into\n    two or more groups to be processed in different ways. This value\n    will be -1 if the node does not process objects sequentially (such\n    as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1991, 1996], "text": ["OBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [2623, 2883], "text": ["This is the unique object identifier for the object being\n    processed. Every object is assigned an integer value that is unique\n    among all objects in the simulation for all time. Even if an object\n    is deleted, its identifier is never reused. "]}, {"type": "para", "indent": 4, "extent": [2883, 3168], "text": ["The object identifier\n    can always be used to uniquely identify a given object. This makes\n    this variable very useful in situations where each object needs to\n    be treated differently. It can be used to produce a unique random\n    number for each object, for example. "]}, {"type": "para", "indent": 4, "extent": [3168, 3406], "text": ["This value is also the best way\n    to look up information on an object using the dopfield expression\n    function. This value will be -1 if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [2616, 2623], "text": ["OBJID"]}, {"body": [{"type": "para", "indent": 4, "extent": [3417, 3556], "text": ["This string contains a space separated list of the unique object\n    identifiers for every object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3406, 3417], "text": ["ALLOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [3569, 3687], "text": ["This string contains a space separated list of the names of every\n    object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3556, 3569], "text": ["ALLOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [3694, 3801], "text": ["This value is the simulation time (see variable ST) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [3801, 4057], "text": ["Therefore, to check if an object was created\n    on the current timestep, the expression ", {"text": ["$ST == $OBJCT"], "type": "code"}, " should\n    always be used. This value will be zero if the node does not process\n    objects sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [3687, 3694], "text": ["OBJCT"]}, {"body": [{"type": "para", "indent": 4, "extent": [4064, 4172], "text": ["This value is the simulation frame (see variable SF) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [4172, 4389], "text": ["This value is equivalent to using the\n    dopsttoframe expression on the OBJCT variable. This value will be\n    zero if the node does not process objects sequentially (such as the\n    ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4057, 4064], "text": ["OBJCF"]}, {"body": [{"type": "para", "indent": 4, "extent": [4398, 4486], "text": ["This is a string value containing the name of the object being\n    processed. "]}, {"type": "para", "indent": 4, "extent": [4486, 4748], "text": ["Object names are not guaranteed to be unique within a\n    simulation. However, if you name your objects carefully so that they\n    are unique, the object name can be a much easier way to identify an\n    object than the unique object identifier, OBJID. "]}, {"type": "para", "indent": 4, "extent": [4748, 5194], "text": ["The object name can\n    also be used to treat a number of similar objects (with the same\n    name) as a virtual group. If there are 20 objects named \"myobject\",\n    specifying ", {"text": ["strcmp($OBJNAME, \"myobject\") == 0"], "type": "code"}, " in the activation field\n    of a DOP will cause that DOP to operate only on those 20 objects. This\n    value will be the empty string if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4389, 4398], "text": ["OBJNAME"]}, {"body": [{"type": "para", "indent": 4, "extent": [5202, 5425], "text": ["This is a string value containing the full path of the current DOP\n    Network. This value is most useful in DOP subnet digital assets\n    where you want to know the path to the DOP Network that contains the\n    node."]}], "type": "dt", "indent": 0, "extent": [5194, 5202], "text": ["DOPNET"]}], "type": "dt_group", "container": true}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [5431, 5620], "text": ["Most dynamics nodes have local variables with the same names as the\n    node\u2019s parameters. For example, in a ", {"text": ["Position node"], "fullpath": "/nodes/dop/position", "scheme": "Node", "type": "link", "value": "/nodes/dop/position"}, ",\n    you could write the expression:"]}, {"lang": null, "type": "pre", "indent": 4, "extent": [5620, 5650], "text": ["\n    $tx + 0.1\n    "]}, {"type": "para", "indent": 4, "extent": [5650, 5730], "text": ["\u2026to make the object move 0.1 units along the X axis at each timestep."]}], "role": "item", "indent": 0, "extent": [5425, 5431], "type": "note"}], "role": "item_group", "container": true, "type": "note_group"}], "indent": 0, "level": 1, "text": "Locals", "role": "section", "extent": [4262, 4270], "container": true, "type": "locals_section", "id": "locals"}], "title": ["Gas Dissipate"], "summary": ["A microsolver that dissipates a field."], "attrs": {"version": null, "namespace": null, "internal": "gasdissipate", "context": "dop", "type": "node", "icon": "DOP/gas"}, "included": ["/nodes/dop/standard_data_locals", "/nodes/dop/standard_data_outputs", "/nodes/dop/standard_gas_stencil", "/nodes/dop/standard_locals", "/nodes/dop/standard_microsolver_inputs"], "type": "root"}