{"body": [{"indent": 0, "text": ["Volume Source"], "type": "title", "extent": [75, 93], "level": 0}, {"indent": 0, "type": "summary", "extent": [93, 170], "text": ["Imports SOP source geometry into smoke, pyro, and FLIP simulations. "]}, {"indent": 0, "type": "para", "extent": [170, 388], "text": ["The Volume Source node imports SOP data into DOP fields and geometry. This node\nis capable of merging an arbitrary number of SOP volumes and VDBs with fields,\nas well as importing and destroying simulation particles."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [394, 619], "text": ["If instancing is enabled, volumes corresponding to instance ", {"text": ["k"], "type": "code"}, " are\n    suffixed with \"", {"text": ["_k"], "type": "code"}, "\". For example, ", {"text": ["density"], "type": "code"}, " volume for the second object\n    should be named ", {"text": ["density_1"], "type": "code"}, " (as cluster numbers normally start at 0)."]}, {"indent": 4, "type": "para", "extent": [619, 803], "text": ["A DOP object\u2019s instance is deduced from its ", {"text": ["init_cluster"], "type": "code"}, " data. This data\n    can be created automatically by enabling instancing on the\n    ", {"text": ["Smoke Object"], "fullpath": "/nodes/dop/smokeobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/smokeobject"}, "."]}], "indent": 0, "role": "item", "type": "note", "extent": [388, 394]}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [848, 914], "text": ["Configures the microsolver according to the selected preset."]}], "indent": 0, "text": ["Initialize"], "role": "item", "attrs": {"id": "initialize"}, "extent": [815, 828], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [946, 1003], "text": ["Controls whether or not the source will be applied."]}], "indent": 0, "text": ["Activation"], "role": "item", "attrs": {"id": "activation"}, "extent": [914, 926], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1025, 1263], "text": ["Specifies where to fetch the SOP volumes from. Context geometries refer to\n    SOP nodes attached to inputs of the containing DOP network, while the ", {"text": ["SOP"], "type": "code"}, "\n    option can be used to direct Volume Source to an arbitrary geometry node."]}], "indent": 0, "text": ["Input"], "role": "item", "attrs": {"id": "input"}, "extent": [1003, 1010], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1290, 1368], "text": ["The path of the SOP node containing the geometry that is to be imported."]}], "indent": 0, "text": ["SOP Path"], "role": "item", "attrs": {"id": "soppath"}, "extent": [1263, 1273], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1398, 1845], "text": ["The source geometry can be transformed to account for differences between\n    transforms of the input SOP and a reference object. ", {"text": ["None"], "type": "ui"}, " will prevent\n    any corrective transform from being applied. ", {"text": ["Into This Object"], "type": "ui"}, " will\n    ensure that the object-level transform of the input SOP is accounted for.\n    ", {"text": ["Into Specified Object"], "type": "ui"}, " will first transform the input SOP into the space\n    of ", {"text": ["Transform Object"], "type": "ui"}, " before sourcing takes place."]}], "indent": 0, "text": ["Transform"], "role": "item", "attrs": {"id": "xformtype"}, "extent": [1368, 1379], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1882, 2085], "text": ["The reference transformation object. When ", {"text": ["Transform"], "type": "ui"}, " is set to\n    ", {"text": ["Into Specified Object"], "type": "ui"}, ", the input SOP will first be transformed into this\n    object\u2019s space before sourcing is carried out."]}], "indent": 0, "text": ["Transform Object"], "role": "item", "attrs": {"id": "xformpath"}, "extent": [1845, 1863], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2146, 2280], "text": ["When enabled, merging into a non-existent DOP field will cause this node to\n    create a field of the appropriate rank and name."]}], "indent": 0, "text": ["Create Missing Fields"], "role": "item", "attrs": {"id": "createmissing"}, "extent": [2099, 2123], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2316, 2585], "text": ["When ", {"text": ["Create Missing Fields"], "type": "ui"}, " is enabled, fields that need to be created\n    will match the size and sampling of this DOP field. If the operation is set\n    to ", {"text": ["Blend"], "type": "ui"}, ", target and weight fields will be enlarged to enclose both the\n    source volume and weight."]}], "indent": 0, "text": ["Field to Match"], "role": "item", "attrs": {"id": "matchfield"}, "extent": [2280, 2296], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2642, 2763], "text": ["Each ", {"text": ["Target Field"], "type": "ui"}, " will be enlarged to enclose its respective ", {"text": ["Source\n    Volume"], "type": "ui"}, " when this option is enabled."]}], "indent": 0, "text": ["Enlarge Fields to Contain Sources"], "role": "item", "attrs": {"id": "resizefields"}, "extent": [2585, 2620], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2805, 2955], "text": ["When enabled (along with ", {"text": ["Enlarge Fields to Contain Sources"], "type": "ui"}, "), size\n    increases to each field will be carried out in multiples of 16 voxels."]}], "indent": 0, "text": ["Enlarge by Full Tiles"], "role": "item", "attrs": {"id": "fulltiles"}, "extent": [2763, 2786], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2987, 3044], "text": ["The number of volume merging operations to perform."]}], "indent": 0, "text": ["Operations"], "role": "item", "attrs": {"id": "numvolumes"}, "extent": [2955, 2967], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3071, 3199], "text": ["When enabled, only parts of the ", {"text": ["Target Field"], "type": "ui"}, " that fall within the\n    active region of ", {"text": ["Source Volume"], "type": "ui"}, " are modified."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3209, 3515], "text": ["Active region for a native Houdini volume is defined to be the area\n        inside its bounding box. VDBs, on the other hand, may have an arbitrary\n        active region. The ", {"text": ["VDB Visualize Tree"], "fullpath": "/nodes/sop/vdbvisualizetree", "scheme": "Node", "type": "link", "value": "/nodes/sop/vdbvisualizetree"}, " SOP\n        can be used to visualize the active voxels of a VDB primitive."]}], "indent": 4, "role": "item", "type": "note", "extent": [3199, 3209]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Clamped"], "role": "item", "attrs": {"id": "clamped#"}, "extent": [3044, 3053], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3542, 3573], "text": ["Rank of the target field."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3583, 3855], "text": ["It is extremely important to identify data type for fields that the\n        DOP object does not already contain. In these cases, a new field is\n        created with rank governed by value of ", {"text": ["Field Rank"], "type": "ui"}, " (assuming\n        ", {"text": ["Create Missing Fields"], "type": "ui"}, " is enabled)."]}], "indent": 4, "role": "item", "type": "note", "extent": [3573, 3583]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Field Rank"], "role": "item", "attrs": {"id": "rank#"}, "extent": [3515, 3527], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3887, 4050], "text": ["Name of the SOP volume or VDB to merge. For vector fields, this can be a\n    single vector VDB or a space separated list of three scalar volumes or\n    VBDs."]}], "indent": 0, "text": ["Source Volume"], "role": "item", "attrs": {"id": "volume#"}, "extent": [3855, 3870], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4081, 4233], "text": ["Name of the SOP scalar volume or VDB containing the weights for ", {"text": ["Source\n    Volume"], "type": "ui"}, "; applicable only when the ", {"text": ["Operation"], "type": "ui"}, " is set to ", {"text": ["Blend"], "type": "ui"}, "."]}], "indent": 0, "text": ["Weight"], "role": "item", "attrs": {"id": "weightvolume#"}, "extent": [4050, 4058], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4264, 4307], "text": ["The DOP field that is to be modified."]}], "indent": 0, "text": ["Target Field"], "role": "item", "attrs": {"id": "vfield#"}, "extent": [4233, 4247], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4338, 4453], "text": ["Name of the weight field for the destination; applicable only when the\n    ", {"text": ["Operation"], "type": "ui"}, " is set to ", {"text": ["Blend"], "type": "ui"}, "."]}], "indent": 0, "text": ["Weight"], "role": "item", "attrs": {"id": "vweightfield#"}, "extent": [4307, 4315], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4481, 4610], "text": ["Name of the SOP scalar volume or VDB by which ", {"text": ["Source Volume"], "type": "ui"}, " is\n    multiplied before merging with the ", {"text": ["Target Field"], "type": "ui"}, "."]}], "indent": 0, "text": ["SOP Mask"], "role": "item", "attrs": {"id": "sopmask#"}, "extent": [4453, 4463], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4635, 4753], "text": ["Name of the DOP field by which the ", {"text": ["Source Volume"], "type": "ui"}, " is multiplied before\n    merging with the ", {"text": ["Target Field"], "type": "ui"}, "."]}], "indent": 0, "text": ["DOP Mask"], "role": "item", "attrs": {"id": "mask#"}, "extent": [4610, 4620], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4797, 4919], "text": ["When this option is enabled, negative mask values are interpreted as 0 and\n    positive values are interpreted as 1."]}], "indent": 0, "text": ["Absolute"], "role": "item", "attrs": {"id": "sopmabsolute# mabsolute#"}, "extent": [4753, 4763], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4947, 5095], "text": ["When this option is enabled (along with ", {"text": ["Absolute"], "type": "ui"}, "), negative mask values\n    are interpreted as 1 and positive values are interpreted as 0."]}], "indent": 0, "text": ["SDF"], "role": "item", "attrs": {"id": "sopsdf# msdf#"}, "extent": [4919, 4924], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5126, 5154], "text": ["The merging operation."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [5164, 5266], "text": ["Values in the ", {"text": ["Target Field"], "type": "ui"}, " will be overwritten by those in the\n        ", {"text": ["Source Volume"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5154, 5164], "text": ["Copy"]}, {"body": [{"indent": 8, "type": "para", "extent": [5275, 5354], "text": ["Result is the sum of values in ", {"text": ["Target Field"], "type": "ui"}, " and ", {"text": ["Source Volume"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5266, 5275], "text": ["Add"]}, {"body": [{"indent": 8, "type": "para", "extent": [5368, 5562], "text": ["Result is the difference between values in ", {"text": ["Target Field"], "type": "ui"}, " and\n        ", {"text": ["Source Volume"], "type": "ui"}, "; the difference can optionally be clamped against\n        zero by enabling ", {"text": ["Avoid Negatives"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5354, 5368], "text": ["Subtract"]}, {"body": [{"indent": 8, "type": "para", "extent": [5576, 5667], "text": ["Result is the product of values in ", {"text": ["Target Field"], "type": "ui"}, " and ", {"text": ["Source\n        Volume"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5562, 5576], "text": ["Multiply"]}, {"body": [{"indent": 8, "type": "para", "extent": [5679, 5796], "text": ["Values in the ", {"text": ["Target Field"], "type": "ui"}, " will be divided by the corresponding\n        values in the ", {"text": ["Source Volume"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5667, 5679], "text": ["Divide"]}, {"body": [{"indent": 8, "type": "para", "extent": [5809, 6005], "text": ["Result is the larger of the values in ", {"text": ["Target Field"], "type": "ui"}, " and ", {"text": ["Source\n        Volume"], "type": "ui"}, ". For vector fields, comparison can be performed length-wise by\n        enabling ", {"text": ["Use Vector Length"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [5796, 5809], "text": ["Maximum"]}, {"body": [{"indent": 8, "type": "para", "extent": [6018, 6215], "text": ["Result is the smaller of the values in ", {"text": ["Target Field"], "type": "ui"}, " and ", {"text": ["Source\n        Volume"], "type": "ui"}, ". For vector fields, comparison can be performed length-wise by\n        enabling ", {"text": ["Use Vector Length"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [6005, 6018], "text": ["Minimum"]}, {"body": [{"indent": 8, "type": "para", "extent": [6228, 6319], "text": ["Result is the average of values in ", {"text": ["Target Field"], "type": "ui"}, " and ", {"text": ["Source\n        Volume"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [6215, 6228], "text": ["Average"]}, {"body": [{"indent": 8, "type": "para", "extent": [6329, 6570], "text": ["Values in the ", {"text": ["Target Field"], "type": "ui"}, " are pushed towards the corresponding\n        entries in ", {"text": ["Source Volume"], "type": "ui"}, ", in accordance to settings of\n        ", {"text": ["Acceleration Strength"], "type": "ui"}, ", ", {"text": ["Deceleration Strength"], "type": "ui"}, ", and ", {"text": ["Direction\n        Strength"], "type": "ui"}, "."]}], "indent": 4, "type": "dt", "extent": [6319, 6329], "text": ["Pull"]}, {"body": [{"indent": 8, "type": "para", "extent": [6581, 6882], "text": ["Result stored in the ", {"text": ["Target Field"], "type": "ui"}, " is ", {"text": ["(s * v + d * w) / (v + w)"], "type": "code"}, ",\n        where ", {"text": ["s"], "type": "code"}, ", ", {"text": ["v"], "type": "code"}, ", ", {"text": ["d"], "type": "code"}, ", ", {"text": ["w"], "type": "code"}, " represent values of the source, source weight,\n        target field, and target weight, respectively. Additionally, the values\n        of source weight are added to the target weight field."]}], "indent": 4, "type": "dt", "extent": [6570, 6581], "text": ["Blend"]}, {"body": [{"indent": 8, "type": "para", "extent": [6892, 6941], "text": ["The ", {"text": ["Target Field"], "type": "ui"}, " is left untouched."]}], "indent": 4, "type": "dt", "extent": [6882, 6892], "text": ["None"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Operation"], "role": "item", "attrs": {"id": "voperator#"}, "extent": [5095, 5106], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6978, 7195], "text": ["With vector fields, when ", {"text": ["Operation"], "type": "ui"}, " is set to ", {"text": ["Maximum"], "type": "ui"}, " or ", {"text": ["Minimum"], "type": "ui"}, ",\n    this option can be enabled to signal that comparisons are to be done using\n    lengths of the vectors, rather than component-wise."]}], "indent": 0, "text": ["Use Vector Length"], "role": "item", "attrs": {"id": "usenorm#"}, "extent": [6941, 6960], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7229, 7348], "text": ["When ", {"text": ["Operation"], "type": "ui"}, " is set to ", {"text": ["Subtract"], "type": "code"}, " and this option is enabled,\n    negative results will be changed to zero."]}], "indent": 0, "text": ["Avoid Negatives"], "role": "item", "attrs": {"id": "nonneg#"}, "extent": [7195, 7212], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7393, 7599], "text": ["Controls how strongly the ", {"text": ["Target Field"], "type": "ui"}, "'s values are pushed towards the\n    ", {"text": ["Source Volume"], "type": "ui"}, ". Applies for the voxels in which the ", {"text": ["Source Volume"], "type": "ui"}, "\n    has larger values than the ", {"text": ["Target Field"], "type": "ui"}, "."]}], "indent": 0, "text": ["Acceleration Strength"], "role": "item", "attrs": {"id": "accguidestr#"}, "extent": [7348, 7371], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7644, 7851], "text": ["Controls how strongly the ", {"text": ["Target Field"], "type": "ui"}, "'s values are pushed towards the\n    ", {"text": ["Source Volume"], "type": "ui"}, ". Applies for the voxels in which the ", {"text": ["Source Volume"], "type": "ui"}, "\n    has smaller values than the ", {"text": ["Target Field"], "type": "ui"}, "."]}], "indent": 0, "text": ["Deceleration Strength"], "role": "item", "attrs": {"id": "decguidestr#"}, "extent": [7599, 7622], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7909, 8200], "text": ["When enabled, controls how strongly the ", {"text": ["Target Field"], "type": "ui"}, "'s vectors are\n    pushed to align with ", {"text": ["Source Volume"], "type": "ui"}, "'s. This option can only be used with\n    vector fields; when disabled for vector fields, guiding is performed\n    independently for each component of the ", {"text": ["Target Field"], "type": "ui"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [8210, 8340], "text": [{"text": ["Acceleration Strength"], "type": "ui"}, " and ", {"text": ["Deceleration Strength"], "type": "ui"}, " apply to the\n        vector lengths when this option is enabled."]}], "indent": 4, "role": "item", "type": "note", "extent": [8200, 8210]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": ["Direction Strength"], "role": "item", "attrs": {"id": "enabledirblend# dirguidestr#"}, "extent": [7851, 7871], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [8364, 8427], "text": ["A multiplier applied to the source values before merging."]}], "indent": 0, "text": ["Scale"], "role": "item", "attrs": {"id": "vscale#"}, "extent": [8340, 8347], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [8462, 8662], "text": ["Normalizes the ", {"text": ["Scale"], "type": "ui"}, " against the timestep and the canonical frame rate\n    of 24. This ensures that sourcing is performed to the same real extent,\n    regardless of the simulation timescale."]}, {"indent": 4, "type": "para", "extent": [8662, 8923], "text": ["For example, with the default frame rate of 24, normalization causes the\n    ", {"text": ["Scale"], "type": "ui"}, " to be used as is for every frame. If frame rate is increased to\n    48, effective scale will be halved per frame, resulting in the same amount\n    of additive sourcing."]}], "indent": 0, "text": ["Use Timestep"], "role": "item", "attrs": {"id": "vnormalize#"}, "extent": [8427, 8441], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Volumes"], "extent": [2085, 2099], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [8983, 9059], "text": ["Add the points from the input SOP to the simulation object\u2019s geometry."]}], "indent": 0, "text": ["Source Particles"], "role": "item", "attrs": {"id": "sourceparticles"}, "extent": [8939, 8958], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [9087, 9162], "text": ["Only points in this ", {"text": ["Group"], "type": "ui"}, " will be imported into the DOP geometry."]}], "indent": 0, "text": ["Group"], "role": "item", "attrs": {"id": "sourcegroup"}, "extent": [9059, 9066], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [9202, 9432], "text": ["Offset any new particles by adding their scaled velocity multiplied by a\n    random portion of the current timestep. This can help ensure the emitted\n    stream of particles appears regular even at lower simulation substeps."]}], "indent": 0, "text": ["Time Offset Scale"], "role": "item", "attrs": {"id": "offsetscale"}, "extent": [9162, 9181], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [9465, 9602], "text": ["The seed used to randomly offset the particles by their velocities. Also\n    used for random seeding of particle life expectancies."]}], "indent": 0, "text": ["Global Seed"], "role": "item", "attrs": {"id": "offsetseed"}, "extent": [9432, 9445], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [9640, 9934], "text": ["If enabled, set the particles' ", {"text": ["life"], "type": "code"}, " attribute to control how long the\n    particle will live. If sourcing particles to the\n    ", {"text": ["FLIP Solver"], "fullpath": "/nodes/dop/flipsolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/flipsolver"}, ", then ", {"text": ["Apply POP Solver"], "type": "ui"}, " and ", {"text": ["Reap\n    Particles"], "type": "ui"}, " must be enabled on the solver for this attribute to have an\n    effect."]}], "indent": 0, "text": ["Life Expectancy"], "role": "item", "attrs": {"id": "dolife life"}, "extent": [9602, 9619], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [9966, 10102], "text": ["Particles will live the number of seconds in ", {"text": ["Life Expectancy"], "type": "ui"}, ", plus or\n    minus this number of seconds. Use 0 for no variance."]}], "indent": 0, "text": ["Life Variance"], "role": "item", "attrs": {"id": "lifevar"}, "extent": [9934, 9949], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [10142, 10404], "text": ["Kill any particles within the specified SOP SDF primitive. If ", {"text": ["Source\n    Particles"], "type": "ui"}, " is enabled, only particles added in the current timestep are\n    eligible to be killed. If ", {"text": ["Source Particles"], "type": "ui"}, " is disabled, all particles\n    are eligible to be killed."]}], "indent": 0, "text": ["Kill Inside SOP"], "role": "item", "attrs": {"id": "killinsidesop"}, "extent": [10102, 10119], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [10444, 10696], "text": ["Kill any particles within the specified DOP SDF. If ", {"text": ["Source Particles"], "type": "ui"}, " is\n    enabled, only particles added in the current timestep are eligible to be\n    killed. If ", {"text": ["Source Particles"], "type": "ui"}, " is disabled, all particles are eligible to\n    be killed."]}], "indent": 0, "text": ["Kill Inside DOP"], "role": "item", "attrs": {"id": "killinsidedop"}, "extent": [10404, 10421], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [10729, 10786], "text": ["Any emitted particles will be placed in this group."]}], "indent": 0, "text": ["Stream Name"], "role": "item", "attrs": {"id": "streamname"}, "extent": [10696, 10709], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Particles"], "extent": [8923, 8939], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [10836, 11092], "text": ["When performing clustered simulations it is important that each cluster\n    receives its own individual sources. For the merged SOP primitives, the\n    cluster number is affixed to the name of the volume that is sourced\n    (following an underscore)."]}, {"indent": 4, "type": "para", "extent": [11092, 11431], "text": ["This option controls if this cluster identification is performed. ", {"text": ["Auto\n    Detect"], "type": "code"}, " will attempt to determine it based on the instancing settings of\n    the ", {"text": ["Smoke Object"], "fullpath": "/nodes/dop/smokeobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/smokeobject"}, ". However, sometimes one wishes to\n    use the same source across many instances, in which cases ", {"text": ["Instancing"], "type": "ui"}, "\n    should be set to ", {"text": ["Off"], "type": "ui"}, "."]}], "indent": 0, "text": ["Instancing"], "role": "item", "attrs": {"id": "instancing"}, "extent": [10803, 10816], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Instancing"], "extent": [10786, 10803], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [803, 815], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [28, 246], "text": ["This optional input can be used to control which simulation objects\n    are modified by this node. Any objects connected through this input\n    and which match the ", {"text": ["Group"], "type": "ui"}, " parameter field will be modified. "]}, {"type": "para", "indent": 4, "extent": [246, 397], "text": ["If this input is not connected, this node can be used in conjunction with an\n    Apply Data node, or can be used as an input to another data node."]}], "type": "dt", "indent": 0, "extent": [15, 28], "text": ["First Input"]}, {"body": [{"type": "para", "indent": 4, "extent": [415, 557], "text": ["If this node has more input connectors, other data nodes can be\n    attached to act as modifiers for the data created by this node. "]}, {"type": "para", "indent": 4, "extent": [557, 749], "text": ["The specific types of subdata that are meaningful vary from node to\n    node. Click ", {"keys": ["MMB"], "text": null, "type": "keys"}, " an input connector to see a list of available\n    data nodes that can be meaningfully attached."]}], "type": "dt", "indent": 0, "extent": [397, 415], "text": ["All Other Inputs"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [11431, 11439], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 296], "text": ["The operation of this output depends on what inputs are connected\n    to this node. If an object stream is input to this node, the output\n    is also an object stream containing the same objects as the input\n    (but with the data from this node attached). "]}, {"type": "para", "indent": 4, "extent": [296, 606], "text": ["If no object stream is\n    connected to this node, the output is a data output. This data\n    output can be connected to an ", {"text": ["Apply Data DOP"], "fullpath": "/nodes/dop/applydata", "scheme": "Node", "type": "link", "value": "/nodes/dop/applydata"}, ",\n    or connected directly to a data input of another data node, to\n    attach the data from this node to an object or another piece of\n    data."]}], "type": "dt", "indent": 0, "extent": [15, 29], "text": ["First Output"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [11472, 11481], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 325], "text": ["This DOP node defines a local variable for each channel and\n    parameter on the Data Options page, with the same name as the\n    channel. So for example, the node may have channels for Position\n    (positionx, positiony, positionz) and a parameter for an object name\n    (objectname). "]}, {"type": "para", "indent": 4, "extent": [325, 519], "text": ["Then there will also be local variables with the names\n    positionx, positiony, positionz, and objectname. These variables\n    will evaluate to the previous value for that parameter. "]}, {"type": "para", "indent": 4, "extent": [519, 692], "text": ["This previous value is always stored as part of the data attached to the\n    object being processed. This is essentially a shortcut for a\n    dopfield expression like:"]}, {"lang": null, "type": "pre", "indent": 4, "extent": [692, 775], "text": ["\n    dopfield($DOPNET, $OBJID, dataName, \"Options\", 0, channelname)\n    "]}, {"type": "para", "indent": 4, "extent": [775, 883], "text": ["If the data does not already exist, then a value of zero or an\n    empty string will be returned."]}], "type": "dt", "indent": 0, "extent": [16, 29], "text": ["channelname"]}, {"body": [{"type": "para", "indent": 4, "extent": [891, 1132], "text": ["This value is the simulation time (see variable ST) at which the\n    current data was created. This value may not be the same as the\n    current simulation time if this node is modifying existing data,\n    rather than creating new data."]}], "type": "dt", "indent": 0, "extent": [883, 891], "text": ["DATACT"]}, {"body": [{"type": "para", "indent": 4, "extent": [1140, 1383], "text": ["This value is the simulation frame (see variable SF) at which the\n    current data was created. This value may not be the same as the\n    current simulation frame if this node is modifying existing data,\n    rather than creating new data."]}], "type": "dt", "indent": 0, "extent": [1132, 1140], "text": ["DATACF"]}, {"body": [{"type": "para", "indent": 4, "extent": [1392, 1594], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [1594, 1712], "text": ["In this case, this value is set to the\n    name of the relationship the data to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [1383, 1392], "text": ["RELNAME"]}, {"body": [{"type": "para", "indent": 4, "extent": [1723, 1925], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [1925, 2128], "text": ["In this case, this value is set to a\n    string that is a space separated list of the object identifiers for all\n    the Affected Objects of the relationship to which the data is being\n    attached."]}], "type": "dt", "indent": 0, "extent": [1712, 1723], "text": ["RELOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [2141, 2343], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [2343, 2528], "text": ["In this case, this value is set to a\n    string that is a space separated list of the names of all the Affected\n    Objects of the relationship to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [2128, 2141], "text": ["RELOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [2542, 2744], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [2744, 2947], "text": ["In this case, this value is set to a\n    string that is a space separated list of the object identifiers for all\n    the Affector Objects of the relationship to which the data is being\n    attached."]}], "type": "dt", "indent": 0, "extent": [2528, 2542], "text": ["RELAFFOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [2963, 3165], "text": ["This value will be set only when data is being attached to a relationship\n    (such as when Constraint Anchor DOP is connected to the second, third, of\n    fourth inputs of a Constraint DOP). "]}, {"type": "para", "indent": 4, "extent": [3165, 3350], "text": ["In this case, this value is set to a\n    string that is a space separated list of the names of all the Affector\n    Objects of the relationship to which the data is being attached."]}], "type": "dt", "indent": 0, "extent": [2947, 2963], "text": ["RELAFFOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [20, 107], "text": ["This value is the simulation time for which the node is being\n    evaluated. "]}, {"type": "para", "indent": 4, "extent": [107, 326], "text": ["This value may not be equal to the current Houdini time\n    represented by the variable T, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " ", {"text": ["Offset Time"], "type": "ui"}, " and ", {"text": ["Time Scale"], "type": "ui"}, "\n    parameters. "]}, {"type": "para", "indent": 4, "extent": [326, 555], "text": ["This value is guaranteed to have a value of zero at the\n    start of a simulation, so when testing for the first timestep of a\n    simulation, it is best to use a test like ", {"text": ["$ST == 0"], "type": "code"}, " rather than\n    ", {"text": ["$T == 0"], "type": "code"}, " or ", {"text": ["$FF == 1"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [16, 20], "text": ["ST"]}, {"body": [{"type": "para", "indent": 4, "extent": [559, 700], "text": ["This value is the simulation frame (or more accurately, the\n    simulation time step number) for which the node is being evaluated."]}, {"type": "para", "indent": 4, "extent": [700, 999], "text": ["This value may not be equal to the current Houdini frame number\n    represented by the variable F, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " parameters. Instead, this value is equal to\n    the simulation time (ST) divided by the simulation timestep size\n    (TIMESTEP)."]}], "type": "dt", "indent": 0, "extent": [555, 559], "text": ["SF"]}, {"body": [{"type": "para", "indent": 4, "extent": [1009, 1181], "text": ["This value is the size of a simulation timestep. This value is\n    useful to scale values that are expressed in units per second, but\n    are applied on each timestep."]}], "type": "dt", "indent": 0, "extent": [999, 1009], "text": ["TIMESTEP"]}, {"body": [{"type": "para", "indent": 4, "extent": [1187, 1305], "text": ["This value is the inverse of the TIMESTEP value. It is the number\n    of timesteps per second of simulation time."]}], "type": "dt", "indent": 0, "extent": [1181, 1187], "text": ["SFPS"]}, {"body": [{"type": "para", "indent": 4, "extent": [1312, 1523], "text": ["This is the number of objects in the simulation. For nodes that\n    create objects such as the ", {"text": ["Empty Object"], "fullpath": "/nodes/dop/emptyobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/emptyobject"}, " node,\n    this value will increase for each object that is evaluated. "]}, {"type": "para", "indent": 4, "extent": [1523, 1621], "text": ["A good way to guarantee unique object names is to use an expression\n    like ", {"text": ["object_$SNOBJ"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [1305, 1312], "text": ["SNOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1627, 1859], "text": ["This value is the number of objects that will be evaluated by the\n    current node during this timestep. This value will often be\n    different from SNOBJ, as many nodes do not process all the objects\n    in a simulation. "]}, {"type": "para", "indent": 4, "extent": [1859, 1991], "text": ["This value may return 0 if the node does not\n    process each object sequentially (such as the ", {"text": ["Group\n    DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1621, 1627], "text": ["NOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1996, 2322], "text": ["This value is the index of the specific object being processed by\n    the node. This value will always run from zero to NOBJ-1 in a given\n    timestep. This value does not identify the current object within the\n    simulation like OBJID or OBJNAME, just the object\u2019s position in the\n    current order of processing. "]}, {"type": "para", "indent": 4, "extent": [2322, 2616], "text": ["This value is useful for generating a\n    random number for each object, or simply splitting the objects into\n    two or more groups to be processed in different ways. This value\n    will be -1 if the node does not process objects sequentially (such\n    as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1991, 1996], "text": ["OBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [2623, 2883], "text": ["This is the unique object identifier for the object being\n    processed. Every object is assigned an integer value that is unique\n    among all objects in the simulation for all time. Even if an object\n    is deleted, its identifier is never reused. "]}, {"type": "para", "indent": 4, "extent": [2883, 3168], "text": ["The object identifier\n    can always be used to uniquely identify a given object. This makes\n    this variable very useful in situations where each object needs to\n    be treated differently. It can be used to produce a unique random\n    number for each object, for example. "]}, {"type": "para", "indent": 4, "extent": [3168, 3406], "text": ["This value is also the best way\n    to look up information on an object using the dopfield expression\n    function. This value will be -1 if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [2616, 2623], "text": ["OBJID"]}, {"body": [{"type": "para", "indent": 4, "extent": [3417, 3556], "text": ["This string contains a space separated list of the unique object\n    identifiers for every object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3406, 3417], "text": ["ALLOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [3569, 3687], "text": ["This string contains a space separated list of the names of every\n    object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3556, 3569], "text": ["ALLOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [3694, 3801], "text": ["This value is the simulation time (see variable ST) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [3801, 4057], "text": ["Therefore, to check if an object was created\n    on the current timestep, the expression ", {"text": ["$ST == $OBJCT"], "type": "code"}, " should\n    always be used. This value will be zero if the node does not process\n    objects sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [3687, 3694], "text": ["OBJCT"]}, {"body": [{"type": "para", "indent": 4, "extent": [4064, 4172], "text": ["This value is the simulation frame (see variable SF) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [4172, 4389], "text": ["This value is equivalent to using the\n    dopsttoframe expression on the OBJCT variable. This value will be\n    zero if the node does not process objects sequentially (such as the\n    ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4057, 4064], "text": ["OBJCF"]}, {"body": [{"type": "para", "indent": 4, "extent": [4398, 4486], "text": ["This is a string value containing the name of the object being\n    processed. "]}, {"type": "para", "indent": 4, "extent": [4486, 4748], "text": ["Object names are not guaranteed to be unique within a\n    simulation. However, if you name your objects carefully so that they\n    are unique, the object name can be a much easier way to identify an\n    object than the unique object identifier, OBJID. "]}, {"type": "para", "indent": 4, "extent": [4748, 5194], "text": ["The object name can\n    also be used to treat a number of similar objects (with the same\n    name) as a virtual group. If there are 20 objects named \"myobject\",\n    specifying ", {"text": ["strcmp($OBJNAME, \"myobject\") == 0"], "type": "code"}, " in the activation field\n    of a DOP will cause that DOP to operate only on those 20 objects. This\n    value will be the empty string if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4389, 4398], "text": ["OBJNAME"]}, {"body": [{"type": "para", "indent": 4, "extent": [5202, 5425], "text": ["This is a string value containing the full path of the current DOP\n    Network. This value is most useful in DOP subnet digital assets\n    where you want to know the path to the DOP Network that contains the\n    node."]}], "type": "dt", "indent": 0, "extent": [5194, 5202], "text": ["DOPNET"]}], "type": "dt_group", "container": true}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [5431, 5620], "text": ["Most dynamics nodes have local variables with the same names as the\n    node\u2019s parameters. For example, in a ", {"text": ["Position node"], "fullpath": "/nodes/dop/position", "scheme": "Node", "type": "link", "value": "/nodes/dop/position"}, ",\n    you could write the expression:"]}, {"lang": null, "type": "pre", "indent": 4, "extent": [5620, 5650], "text": ["\n    $tx + 0.1\n    "]}, {"type": "para", "indent": 4, "extent": [5650, 5730], "text": ["\u2026to make the object move 0.1 units along the X axis at each timestep."]}], "role": "item", "indent": 0, "extent": [5425, 5431], "type": "note"}], "role": "item_group", "container": true, "type": "note_group"}], "indent": 0, "level": 1, "text": "Locals", "role": "section", "extent": [11515, 11523], "container": true, "type": "locals_section", "id": "locals"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [11592, 11629], "text": [{"text": ["FLIP Source"], "fullpath": "/nodes/sop/flipsource", "scheme": "Node", "type": "link", "value": "/nodes/sop/flipsource"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [11629, 11666], "text": [{"text": ["Pyro Source"], "fullpath": "/nodes/sop/pyrosource", "scheme": "Node", "type": "link", "value": "/nodes/sop/pyrosource"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [11583, 11592], "container": true, "type": "related_section", "id": "related"}], "title": ["Volume Source"], "summary": ["Imports SOP source geometry into smoke, pyro, and FLIP simulations. "], "attrs": {"version": null, "namespace": null, "internal": "volumesource", "context": "dop", "type": "node", "icon": "DOP/volumesource"}, "included": ["/nodes/dop/standard_data_inputs", "/nodes/dop/standard_data_locals", "/nodes/dop/standard_data_outputs", "/nodes/dop/standard_locals"], "type": "root"}