{"body": [{"indent": 0, "text": ["FEM Solver"], "type": "title", "extent": [103, 118], "level": 0}, {"indent": 0, "type": "summary", "extent": [118, 171], "text": ["Sets and configures a Finite Element solver."]}, {"indent": 0, "type": "para", "extent": [171, 227], "text": ["The FEM Solver DOP sets objects to use the FEM solver."]}, {"indent": 0, "type": "para", "extent": [227, 320], "text": ["If an object has this DOP as its ", {"text": ["Solver"], "type": "code"}, " subdata, it will evolve\nitself as a cloth object."]}, {"indent": 0, "type": "para", "extent": [320, 387], "text": ["This solver recognizes the following special subdata, if present:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [387, 482], "text": [{"text": ["Shell Mass Properties"], "fullpath": "/nodes/dop/shellmassproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/shellmassproperties"}, " data with the name `ShellMassProperties"]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [482, 577], "text": [{"text": ["Solid Mass Properties"], "fullpath": "/nodes/dop/solidmassproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/solidmassproperties"}, " data with the name `SolidMassProperties"]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [577, 834], "text": [{"text": ["Soft Body Material Behavior"], "fullpath": "/nodes/dop/softbodymaterialbehavior", "scheme": "Node", "type": "link", "value": "/nodes/dop/softbodymaterialbehavior"}, " data with the names ", {"text": ["ShellStretchBehavior"], "type": "code"}, ", ", {"text": ["ShellShearBehavior"], "type": "code"}, ", ", {"text": ["ShellWeakBendBehavior"], "type": "code"}, ", ", {"text": ["ShellStrongBendBehavior"], "type": "code"}, ", ", {"text": ["SolidStretchBehavior"], "type": "code"}, ", ", {"text": ["SolidShearBehavior"], "type": "code"}, ", and ", {"text": ["SolidVolumeBehavior"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [834, 929], "text": [{"text": ["Solid Aniso Properties"], "fullpath": "/nodes/dop/solidanisoproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/solidanisoproperties"}, " with the name ", {"text": ["SolidAnisoProperties"], "type": "code"}, "]"]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [929, 1004], "text": [{"text": ["Seam Properties"], "fullpath": "/nodes/dop/seamproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/seamproperties"}, " with the name ", {"text": ["SeamProperties"], "type": "code"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1004, 1098], "text": [{"text": ["Soft Body Rest Properties"], "fullpath": "/nodes/dop/softbodyrestproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/softbodyrestproperties"}, " with the name ", {"text": ["RestProperties"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1098, 1198], "text": [{"text": ["Soft Body Target Properties"], "fullpath": "/nodes/dop/softbodytargetproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/softbodytargetproperties"}, " with the name ", {"text": ["TargetProperties"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1198, 1312], "text": [{"text": ["Soft Body Collision Properties"], "fullpath": "/nodes/dop/softbodycollisionproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/softbodycollisionproperties"}, " data with the name ", {"text": ["CollisionProperties"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1312, 1412], "text": [{"text": ["Soft Body Drag Properties"], "fullpath": "/nodes/dop/softbodydragproperties", "scheme": "Node", "type": "link", "value": "/nodes/dop/softbodydragproperties"}, " data with the name ", {"text": ["DragProperties"], "type": "code"}, "."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [1412, 1455], "text": ["It also recognizes most standard subdata:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [1455, 1497], "text": ["Geometry data with the name ", {"text": ["Geometry"], "type": "code"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1497, 1516], "text": ["Constraint data"]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1516, 1530], "text": ["Force data"]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [1530, 2029], "text": ["Before each solve, the finite element solver reads the simulation state of each object from the attributes on the simulation geometry ", {"text": ["Geometry"], "type": "code"}, " to get the previous state.\nAfter the solve, the new state is written to attributes the ", {"text": ["Geometry"], "type": "code"}, ".\nIn addition, the solver may maintain an ", {"text": ["EmbeddedGeometry"], "type": "code"}, ". This would typically be a more higher-resolution geometry that moves and fractures along with ", {"text": ["Geometry"], "type": "code"}, ". The embedded geometry can consists of polygons or tetrahedrons (or a mix of these two)."]}, {"indent": 0, "type": "para", "extent": [2029, 2823], "text": ["The finite element solver approximates the physics of continuous materials by splitting them up into a finite number of elements. In the case of the Solid object, the elements are determined by the tetrahedrons. In the case of the ", {"text": ["Cloth Object"], "fullpath": "/nodes/dop/clothobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/clothobject"}, ", the elements are determined by triangles and quadrangles. The resolution of the tetrahedrons and the orientations of the individual tetrahedrons have little influence over the overall movement; as long as the overall solid shape is the same the behavior is roughly the same (except for very coarse meshes). The finite element method (FEM) treats the elements an approximation of a continuous material. This property makes the results very predictable when you simulate the same shape using a lower-res and a higher-res mesh."]}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2865, 3421], "text": ["This is the number of substeps per frame. The higher this value, the better the quality and the accuracy of your simulation will be. However, the solve time per frame may increase. When you're having trouble with a simulation\u2019s quality or stability, the first thing to try is increasing the ", {"text": ["Substeps"], "type": "ui"}, ". One particular case where this may be needed is when you have fast moving objects that collide. When the relative velocity is large compared with the feature size, you may need to manually increase the ", {"text": ["Substeps"], "type": "ui"}, " to get better looking results."]}], "indent": 0, "text": ["Substeps"], "role": "item", "extent": [2854, 2865], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Substepping"], "extent": [2835, 2854], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [3460, 3733], "text": ["When this is disabled, no collisions will happen in the simulation, regardless of any other collision settings on the solver or on any of the objects that are solved. This is a convenient toggle that allows you to quickly see how an object behaves without collisions."]}], "indent": 0, "text": ["Enable Collisions"], "role": "item", "extent": [3440, 3460], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3752, 3932], "text": ["When this is disabled, no fracturing or tearing will occur on any of the ", {"text": ["Solid Objects"], "fullpath": "/nodes/dop/solidobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/solidobject"}, " or ", {"text": ["Cloth Objects"], "fullpath": "/nodes/dop/clothobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/clothobject"}, " attached to this solver."]}], "indent": 0, "text": ["Enable Fracturing"], "role": "item", "extent": [3733, 3752], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Capabilities"], "extent": [3421, 3440], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [3983, 4335], "text": ["The absolute tolerance that is used to decide when the finite element solver has found a good enough approximate solution for the implicit integration step. This roughly indicates the amount of error allowed in the acceleration that is computed in each integration step. It is not recommended to increase this tolerance too much from its default."]}], "indent": 0, "text": ["Absolute Tolerance Implicit Solve"], "role": "item", "extent": [3947, 3983], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4370, 4982], "text": ["The relative tolerance that is used to decide when the finite element solver has found a good enough approximate solution for implicit integration step. In contrast with the absolute tolerance, this parameter has no units. It is not recommended to increase this tolerance from its default, because this may produce results that are unstable or poor quality. In some types of simulations, it may be necessary to reduce the ", {"text": ["Relative Tolerance Implicit Solve"], "type": "ui"}, " to a lower value, say 0.0001 or even smaller. For example, the tolerance may need to be lowered in fracturing simulations with very stiff objects."]}], "indent": 0, "text": ["Relative Tolerance Implicit Solve"], "role": "item", "extent": [4335, 4370], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5004, 5258], "text": ["This is the maximum number of times, within a single substep, that the solver is allowed to detect and resolve new collisions. The collision resolution step in each pass may introduce new, secondary collisions that must be resolved in later passes."]}], "indent": 0, "text": ["Max Collision Passes"], "role": "item", "extent": [4982, 5004], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Accuracy"], "extent": [3932, 3947], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [5303, 5600], "text": ["This creates float-valued primitive attribute ", {"text": ["quality"], "type": "code"}, " on the simulation geometry. This attribute allows you to find primitives that have a bad effect on the simulation. The closer the value is to 1, the better. Bad tetrahedrons have a value close to 0 and should be removed or improved."]}], "indent": 0, "text": ["Create Quality Attributes"], "role": "item", "extent": [5275, 5303], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5626, 5895], "text": ["This creates float-valued vertex attributes on the simulation geometry. These attributes ", {"text": ["potentialdensity"], "type": "code"}, ", ", {"text": ["dissipationdensity"], "type": "code"}, ", and ", {"text": ["kineticdensity"], "type": "code"}, " show the potential energy density, the density of energy dissipation, and the kinetic energy, respectively."]}], "indent": 0, "text": ["Create Energy Attributes"], "role": "item", "extent": [5600, 5626], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [5923, 6105], "text": ["This allows the ", {"text": ["fracturecount"], "type": "code"}, " point attribute to be created. Any point that was fractured at any time in the simulation will have a ", {"text": ["fracturecount"], "type": "code"}, " of 1 or higher ever after."]}], "indent": 0, "text": ["Create Fracture Attributes"], "role": "item", "extent": [5895, 5923], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Attributes"], "extent": [5258, 5275], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [6138, 6530], "text": ["This determines the floating point precision that is used internally by the finite element solver. ", {"text": ["Float 32 bit"], "type": "ui"}, " uses less memory and is generally faster than ", {"text": ["Float 64 bit"], "type": "ui"}, ". However, the extra accuracy of 64-bit floating point numbers may be needed when you are simulating object with very high overall stiffness or when your geometry is positioned very far away from the origin. "]}], "indent": 0, "text": ["Float Precision"], "role": "item", "extent": [6120, 6138], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6547, 6907], "text": ["This determines the type of integration that is used. The default is ", {"text": ["Implicit"], "type": "code"}, ", which is the most stable option for simulations that have fracturing stiff objects. The ", {"text": ["Implicit Order 2"], "type": "code"}, " allows more lively looking simulations of higher quality for about the same solve time. This is best used when doing finite element simulation of flesh on characters."]}], "indent": 0, "text": ["Integrator Type"], "role": "item", "extent": [6530, 6547], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6934, 7188], "text": ["For highly nonlinear finite element simulations, increasing this parameter may result in better quality without having to increase the sub-steps. This may be needed for simulations in which the deformations of the tetrahedrons are relatively large."]}], "indent": 0, "text": ["Max Fully Implicit Passes"], "role": "item", "extent": [6907, 6934], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Advanced"], "extent": [6105, 6120], "container": true, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [16, 442], "text": ["The finite element solver will recognize and use ", {"text": ["attributes"], "fullpath": "/model/attributes", "scheme": null, "type": "link", "value": "/model/attributes"}, " on the simulated geometry. In the DOP network, this simulation geometry is attached to the simulated object as a sim-data with name ", {"text": ["Geometry"], "type": "code"}, ". When an object is created, then the geometry and all the corresponding attributes are read from the ", {"text": ["Initial Geometry"], "type": "ui"}, ". This includes the standard position and velocity point attributes ", {"text": ["P"], "type": "code"}, " and ", {"text": ["v"], "type": "code"}, "."]}, {"type": "para", "indent": 0, "extent": [442, 946], "text": ["The finite element solve supports input attributes and output attributes.\nSome attributes, such as the simulation state, are both input and output attributes.\nThe input attributes include multiplier attributes for material properties,\nfracture attributes, and attributes for controlling target positions and corresponding hard/soft constraints.\nThe output attributes include optional attributes for tet quality, energy densities, FEM node forces, collision info attributes and fracture info attributes."]}, {"body": [{"type": "para", "indent": 0, "extent": [992, 1425], "text": ["Each of the material properties of a simulated object can be locally modified using multiplier point attributes. As a rule, each of the material properties in the ", {"text": ["Model"], "type": "ui"}, " tab of an object can be affected by a multiplier attribute. As a rule, the name of the parameter is the name of the attribute. The name of the attribute is the name that is displayed after \"Parameter:\" when you hover over a parameter with your mouse cursor."]}, {"type": "para", "indent": 0, "extent": [1425, 1832], "text": ["You can locally change the material properties of the object using point attributes.\nFor example, you can make some polygons resists stretching and bending more than other polygons.\nThese attributes work as multipliers for the parameters in the ", {"text": ["Model"], "type": "ui"}, " tab:\nThe stiffness multiplier is a convenient way to modify the local stiffness for all object types that are recognized by the finite element solver:"]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [1849, 1867], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [1867, 1886], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [1886, 1904], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [1904, 1929], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [1840, 1849], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["stiffness"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [1938, 1963], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [1963, 1982], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [1982, 2001], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for all types of stiffnesses."], "tag": "td", "attrs": {}, "extent": [2001, 2055], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [1929, 1938], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["dampingratio"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2064, 2092], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [2092, 2111], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [2111, 2130], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for all damping ratios."], "tag": "td", "attrs": {}, "extent": [2130, 2178], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2055, 2064], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["massdensity"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2187, 2214], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [2214, 2233], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [2233, 2252], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for all mass densities."], "tag": "td", "attrs": {}, "extent": [2252, 2300], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2178, 2187], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [1832, 1840], "type": "pxml"}, {"type": "para", "indent": 0, "extent": [2300, 2405], "text": ["For solid objects, the following multiplier point attributes can be used to modify the local behavior:"]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [2422, 2440], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [2440, 2459], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [2459, 2477], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [2477, 2502], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2413, 2422], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["solidstiffness"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2511, 2541], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [2541, 2560], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [2560, 2579], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for both the shape stiffness and the volume stiffness of a Solid Object."], "tag": "td", "attrs": {}, "extent": [2579, 2676], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2502, 2511], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["solidshapestiffness"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2685, 2720], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [2720, 2739], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [2739, 2758], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the shape stiffness of a Solid Object."], "tag": "td", "attrs": {}, "extent": [2758, 2825], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2676, 2685], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["solidvolumestiffness"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2834, 2870], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [2870, 2889], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [2889, 2908], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the volume stiffness of a Solid Object."], "tag": "td", "attrs": {}, "extent": [2908, 2976], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2825, 2834], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["solidmassdensity"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [2985, 3017], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [3017, 3036], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [3036, 3055], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the mass density of a Solid Object."], "tag": "td", "attrs": {}, "extent": [3055, 3119], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [2976, 2985], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [2405, 2413], "type": "pxml"}], "container": true, "level": 3, "text": ["Material Property Multiplier Attributes"], "extent": [946, 992], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [3155, 4079], "text": ["The FEM solver looks at collision identifiers to decide which primitive pairs are allowed to collide.\nThe rule is that a pair of primitives may collide if they have the same collision identifier.\n(This mechanism may possibly be extended in a future release, allowing the user to specify exactly which collision identifier pairs may collide.)\nCollisions can be suppressed altogether for certain primitives by setting the special value -1.\nA collision id may be specified separately for the interior and the exterior side of each polygon and tetrahedron.\nThe exterior side of a polygon is decided using the winding order convention, just like the normal direction.\nIf interiorcollisionid is not specified, then the default collision id of 0 is used for triangles, but interior collisions are disabled for tets.\nIf exteriorcollisionid is not specified, then the default collision id of 0 is used for both tets and triangles."]}, {"type": "para", "indent": 0, "extent": [4079, 4290], "text": ["Consider, as an example, an FEM muscle simulation, we may want the muscles to collide only with the interior side of the skin polygons, so the exteriorcollisionid for those polygons may be set to -1 (disable)."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [4307, 4325], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [4325, 4344], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [4344, 4362], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [4362, 4387], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [4298, 4307], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["exteriorcollisionid"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [4396, 4431], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [4431, 4454], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [4454, 4475], "type": "pxml"}, {"indent": 8, "text": [" Collision identifier for the exterior side of a polygon or tet surface"], "tag": "td", "attrs": {}, "extent": [4475, 4559], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [4387, 4396], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["interiorcollisionid"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [4568, 4603], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [4603, 4626], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [4626, 4647], "type": "pxml"}, {"indent": 8, "text": [" Collision identifier for the interior side of a polygon or tet surface"], "tag": "td", "attrs": {}, "extent": [4647, 4731], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [4559, 4568], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [4290, 4298], "type": "pxml"}], "container": true, "level": 3, "text": ["Collision Control Attributes"], "extent": [3119, 3155], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [4764, 5313], "text": ["The attribute ", {"text": ["materialP"], "type": "code"}, " can be thought of as the positions of the simulated object in the material space.\n", {"text": ["materialP"], "type": "code"}, " is the undeformed configuration relative to which the current position ", {"text": ["P"], "type": "code"}, " determines the deformation of a simulated object. \n", {"text": ["materialP"], "type": "code"}, " must stay the same throughout the entire simulation.\nThe finite element solver relies on assumption that the ", {"text": ["materialP"], "type": "code"}, " attribute remains unchanged from frame to frame; it should never be modified externally (e.g., through a SOP solver) otherwise bad simulation results will be produced."]}, {"type": "para", "indent": 0, "extent": [5313, 5789], "text": ["In the case where no ", {"text": ["Rest Shape"], "type": "ui"}, " is specified and nor ", {"text": ["restP"], "type": "code"}, " attribute is provided, ", {"text": ["materialP"], "type": "code"}, " can be thought of as a permanent rest position.\nIf no animation of the rest position is required in a sim, only ", {"text": ["materialP"], "type": "code"}, " should be specified (no ", {"text": ["restP"], "type": "code"}, ").\nAt any stage in the simulation, it is the mapping from ", {"text": ["materialP"], "type": "code"}, " to the current ", {"text": ["P"], "type": "code"}, " that determines the deformation of tets in simulated objects.\nThe deformation in turn defines the energy stored inside the object."]}, {"type": "para", "indent": 0, "extent": [5789, 6446], "text": ["To help determine the anisotropic behavior of solids, including fiber contraction, the solver can makes use of local UVW frames. These UVW frames may be specified directly using the vertex/point attributes ", {"text": ["materialU"], "type": "code"}, ", ", {"text": ["materialV"], "type": "code"}, ", and ", {"text": ["materialW"], "type": "code"}, ". Alternatively, they may be inferred from UVW positions that may be specified by a vertex/point position attribute ", {"text": ["materialuvw"], "type": "code"}, ". The FEM solver embeds the UVW directions within the material space that may be specified by the attribute ", {"text": ["materialP"], "type": "code"}, ". To get the correct idea of how this works, UVW directions that are fed into the FEM solver should be visualized relative to the material position ", {"text": ["materialP"], "type": "code"}, "."]}, {"type": "para", "indent": 0, "extent": [6446, 6765], "text": ["For FEM muscle simulations, the easiest way to specify the muscle fiber direction is through vertex/point attribute ", {"text": ["materialW"], "type": "code"}, ". It is fine if no ", {"text": ["materialU"], "type": "code"}, " and ", {"text": ["materialV"], "type": "code"}, " directions are specified in this case, as the solver will infer arbitrary ", {"text": ["materialU"], "type": "code"}, " and ", {"text": ["materialV"], "type": "code"}, " directions from ", {"text": ["materialW"], "type": "code"}, " in that case."]}, {"type": "para", "indent": 0, "extent": [6765, 7142], "text": ["The attribute ", {"text": ["materialuvw"], "type": "code"}, " can be used to specify a UVW parametrization of the material space.\nThe U, V and W directions that are implied by ", {"text": ["materialuvw"], "type": "code"}, " matter if the anisotropic controls are used or when the fiber controls are used on a simulated object.\nFor the FEM muscle simulation use case, the fiber controls are an important tool for controlling muscle contraction."]}, {"type": "para", "indent": 0, "extent": [7142, 7360], "text": ["Similar to ", {"text": ["materialuvw"], "type": "code"}, ", the ", {"text": ["materialuv"], "type": "code"}, " attribute can be used to specify UV directions for cloth. This attribute is essential for triangle meshes, in particular, to define the warped and weft directions for cloth."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [7377, 7395], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [7395, 7414], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [7414, 7432], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [7432, 7457], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [7368, 7377], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialP"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [7466, 7491], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [7491, 7520], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [7520, 7540], "type": "pxml"}, {"indent": 8, "text": [" Material position of each point, defining the material space"], "tag": "td", "attrs": {}, "extent": [7540, 7614], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [7457, 7466], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialU"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [7623, 7648], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [7648, 7677], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [7677, 7697], "type": "pxml"}, {"indent": 8, "text": [" The U direction within the material space"], "tag": "td", "attrs": {}, "extent": [7697, 7752], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [7614, 7623], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialV"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [7761, 7786], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [7786, 7815], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [7815, 7835], "type": "pxml"}, {"indent": 8, "text": [" The V direction within the material space"], "tag": "td", "attrs": {}, "extent": [7835, 7890], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [7752, 7761], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialW"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [7899, 7924], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [7924, 7953], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [7953, 7973], "type": "pxml"}, {"indent": 8, "text": [" The W direction within the material space"], "tag": "td", "attrs": {}, "extent": [7973, 8028], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [7890, 7899], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialuvw"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [8037, 8064], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [8064, 8093], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [8093, 8113], "type": "pxml"}, {"indent": 8, "text": [" Local material uvw coordinates for each point or vertex of a tet."], "tag": "td", "attrs": {}, "extent": [8113, 8192], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [8028, 8037], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["materialuv"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [8201, 8227], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [8227, 8256], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [8256, 8276], "type": "pxml"}, {"indent": 8, "text": [" Local material uvw coordinates for each point or vertex of a polygon or polysoup."], "tag": "td", "attrs": {}, "extent": [8276, 8371], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [8192, 8201], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [7360, 7368], "type": "pxml"}], "container": true, "level": 3, "text": ["Material Space Attributes"], "extent": [4731, 4764], "indent": 0, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "text": [" ", {"text": ["fracturepart"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [8436, 8464], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [8464, 8487], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [8487, 8508], "type": "pxml"}, {"indent": 8, "text": [" Partitions the object into unbreakable parts. Must be either -1 (no part) or a nonnegative number that indicates a part."], "tag": "td", "attrs": {}, "extent": [8508, 8642], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [8427, 8436], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["enablefracturing"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [8651, 8683], "type": "pxml"}, {"indent": 8, "text": [" Point/Vertex"], "tag": "td", "attrs": {}, "extent": [8683, 8709], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [8709, 8730], "type": "pxml"}, {"indent": 8, "text": [" Locally enable/disable fracturing for points or vertices."], "tag": "td", "attrs": {}, "extent": [8730, 8801], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [8642, 8651], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fracturethreshold"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [8810, 8843], "type": "pxml"}, {"indent": 8, "text": [" Point/Vertex"], "tag": "td", "attrs": {}, "extent": [8843, 8869], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [8869, 8888], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Fracture Threshold"], "type": "ui"}, "."], "tag": "td", "attrs": {}, "extent": [8888, 8953], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [8801, 8810], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [8418, 8427], "type": "pxml"}], "container": true, "level": 3, "text": ["Material Property Multiplier Attributes"], "extent": [8371, 8418], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [8990, 9711], "text": ["When you create a simulation with fracturing, it is recommended to specify chunks of tetrahedrons that you want to stay together. Otherwise, the fracturing process may create a very large amount of separate pieces, many of which may consist of single tetrahedrons. For this purpose, you can assign a nonnegative integer to each chunk using the ", {"text": ["fracturepart"], "type": "code"}, " attribute. In areas where you don\u2019t want to specify parts, you can set ", {"text": ["fracturepart"], "type": "code"}, " to -1, which means that each primitive in that region will become its own part. Real-life materials tend not to be equally strong everywhere. For realistic results, it is recommended to vary the ", {"text": ["Fracture Threshold"], "type": "ui"}, " locally using the vertex attribute ", {"text": ["fracturethreshold"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 8, "text": [" ", {"text": ["fracturepart"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [9728, 9756], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [9756, 9779], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [9779, 9800], "type": "pxml"}, {"indent": 8, "text": [" Partitions the object into unbreakable parts. Must be either -1 (no part) or a nonnegative number that indicates a part."], "tag": "td", "attrs": {}, "extent": [9800, 9934], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [9719, 9728], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["enablefracturing"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [9943, 9975], "type": "pxml"}, {"indent": 8, "text": [" Point/Vertex"], "tag": "td", "attrs": {}, "extent": [9975, 10001], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [10001, 10022], "type": "pxml"}, {"indent": 8, "text": [" Locally enable/disable fracturing for points or vertices."], "tag": "td", "attrs": {}, "extent": [10022, 10093], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [9934, 9943], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fracturethreshold"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [10102, 10135], "type": "pxml"}, {"indent": 8, "text": [" Point/Vertex"], "tag": "td", "attrs": {}, "extent": [10135, 10161], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [10161, 10180], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Fracture Threshold"], "type": "ui"}, "."], "tag": "td", "attrs": {}, "extent": [10180, 10245], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [10093, 10102], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [9711, 9719], "type": "pxml"}], "container": true, "level": 3, "text": ["Fracturing Control Attributes"], "extent": [8953, 8990], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [10282, 10371], "text": ["The behavior of the drag force can be modified locally using the following attributes:"]}, {"body": [{"body": [{"indent": 8, "text": [" ", {"text": ["normaldrag"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [10388, 10414], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [10414, 10437], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [10437, 10456], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Normal Drag"], "type": "ui"}, "."], "tag": "td", "attrs": {}, "extent": [10456, 10514], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [10379, 10388], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["tangentdrag"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [10523, 10550], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [10550, 10573], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [10573, 10592], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Tangent Drag"], "type": "ui"}, "."], "tag": "td", "attrs": {}, "extent": [10592, 10651], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [10514, 10523], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [10371, 10379], "type": "pxml"}], "container": true, "level": 3, "text": ["Drag Force Control Attributes"], "extent": [10245, 10282], "indent": 0, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "text": [" ", {"text": ["baseP"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [11655, 11676], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [11676, 11695], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [11695, 11715], "type": "pxml"}, {"indent": 8, "text": [" base position of each point"], "tag": "td", "attrs": {}, "extent": [11715, 11756], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [11646, 11655], "type": "pxml"}], "type": "para", "indent": 0, "extent": [10694, 11646], "text": ["The attribute ", {"text": ["baseP"], "type": "code"}, " can be used to specify a generic base position for all the object points. This attribute\u2019s values must not be changed during a simulation. When the user does not specify ", {"text": ["baseP"], "type": "code"}, ", the solver creates this point attribute based on the point positions on the creation frame. This attribute is used as a fallback; whenever the user does not specify ", {"text": ["materialP"], "type": "code"}, ", the attribute ", {"text": ["baseP"], "type": "code"}, " is read instead. In the same way, ", {"text": ["baseP"], "type": "code"}, " is used as a fallback for when no ", {"text": ["restP"], "type": "code"}, " or ", {"text": ["targetP"], "type": "code"}, " attributes are provided. Finally, ", {"text": ["baseP"], "type": "code"}, " is used to bind the simulated and the embedded geometry, in the embedded workflow (e.g., a T-pose). This embedded binding looks at the ", {"text": ["baseP"], "type": "code"}, " position attribute on both the simulated geometry and the embedded geometry. If no ", {"text": ["baseP"], "type": "code"}, " attribute is provided by the user on the embedded geometry, the solver creates the ", {"text": ["baseP"], "type": "code"}, " attribute on the embedded geometry based on the position ", {"text": ["P"], "type": "code"}, " at the creation frame.  "]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [12442, 12460], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [12460, 12479], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [12479, 12497], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [12497, 12522], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [12433, 12442], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["restP"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [12531, 12552], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [12552, 12571], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [12571, 12591], "type": "pxml"}, {"indent": 8, "text": [" Rest position of each point."], "tag": "td", "attrs": {}, "extent": [12591, 12633], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [12522, 12531], "type": "pxml"}], "type": "para", "indent": 0, "extent": [11756, 12433], "text": ["The attribute ", {"text": ["restP"], "type": "code"}, " can be used to specify an animated rest position for all the object points. For example, at each frame ", {"text": ["restP"], "type": "code"}, " may be modified in a SOP Solver before the finite element solver. Among other things this makes it possible to create plastic deformation kinds of effects. When the rest should stay the same during an entire simulation the attribute ", {"text": ["restP"], "type": "code"}, " should not be used. In that case, it is sufficient to specify only an attribute ", {"text": ["materialP"], "type": "code"}, ", which would act as a permanent, unchanged rest position. If no attribute ", {"text": ["materialP"], "type": "code"}, " is specified, the solver falls back to the ", {"text": ["baseP"], "type": "code"}, " attribute that gets automatically created at the creation frame.\ntable>>"]}, {"type": "para", "indent": 0, "extent": [12633, 13103], "text": ["The attribute ", {"text": ["initialpid"], "type": "code"}, " stores the initial point index for each point. This is the point index at the creation time of the object. This attribute is created only when fracturing is enabled on both the object and the solver. The finite element solver uses this attribute for the options ", {"text": ["Import Rest Geometry"], "type": "ui"}, " and ", {"text": ["Import Target Geometry"], "type": "ui"}, " to transfer animated positions and velocities in SOPs to the current fractured topology in the simulated object."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [13120, 13138], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [13138, 13157], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [13157, 13175], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [13175, 13200], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [13111, 13120], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["initialpid"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [13209, 13235], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [13235, 13254], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [13254, 13275], "type": "pxml"}, {"indent": 8, "text": [" Initial point index for each point."], "tag": "td", "attrs": {}, "extent": [13275, 13324], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [13200, 13209], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [13103, 13111], "type": "pxml"}], "container": true, "level": 3, "text": ["Reference Attributes"], "extent": [10651, 10694], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [13365, 14378], "text": ["Target attributes can be used to make a simulated object partially follow a target animation. The attribute ", {"text": ["targetP"], "type": "code"}, " can be used to specify a target position for each object point. When you use the ", {"text": ["Import Target Geometry"], "type": "ui"}, " option on the simulated object, the ", {"text": ["targetP"], "type": "code"}, " will be set automatically every frame. Alternatively, you can create and modify these attributes yourself, using a ", {"text": ["Multi Solver"], "fullpath": "/nodes/dop/multisolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/multisolver"}, " and a ", {"text": ["SOP Solver"], "fullpath": "/nodes/dop/sopsolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/sopsolver"}, ". The target positions and velocities allow the user to mix animation and simulation in a very stable way (assuming the ", {"text": ["Target Strength"], "type": "ui"}, " and ", {"text": ["Target Damping"], "type": "ui"}, " parameters have been set on the object). You can set the ", {"text": ["Target Strength"], "type": "ui"}, " and ", {"text": ["Target Damping"], "type": "ui"}, " parameters on the object to express how strongly the object should match the target position and velocity, respectively. This is a way to create soft constraints. You can use the ", {"text": ["pintoanimation"], "type": "code"}, " to create hard constraints that make the simulated points follow ", {"text": ["targetP"], "type": "code"}, " exactly."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [14395, 14413], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [14413, 14432], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [14432, 14450], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [14450, 14475], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [14386, 14395], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["targetP"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [14484, 14507], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [14507, 14536], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [14536, 14556], "type": "pxml"}, {"indent": 8, "text": [" Target position of each point."], "tag": "td", "attrs": {}, "extent": [14556, 14600], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [14475, 14484], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["targetstrength"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [14609, 14639], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [14639, 14658], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [14658, 14677], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Target Strength"], "type": "ui"}, ". If this attribute is missing, a multiplier of 1 is used at all points."], "tag": "td", "attrs": {}, "extent": [14677, 14810], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [14600, 14609], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["targetdamping"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [14819, 14848], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [14848, 14867], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [14867, 14886], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the object\u2019s ", {"text": ["Target Damping"], "type": "ui"}, ". If this attribute is missing, a multiplier of 1 is used at all points."], "tag": "td", "attrs": {}, "extent": [14886, 15018], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [14810, 14819], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["pintoanimation"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [15027, 15057], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [15057, 15076], "type": "pxml"}, {"indent": 8, "text": [" Int"], "tag": "td", "attrs": {}, "extent": [15076, 15093], "type": "pxml"}, {"indent": 8, "text": [" When 1, the point is hard constrained to the target animation (e.g., ", {"text": ["targetP"], "type": "code"}, "). When zero, the point is unconstrained."], "tag": "td", "attrs": {}, "extent": [15093, 15226], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [15018, 15027], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [14378, 14386], "type": "pxml"}], "container": true, "level": 3, "text": ["Target Attributes"], "extent": [13324, 13365], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [15250, 15777], "text": ["The ", {"text": ["fiberscale"], "type": "code"}, " point attribute acts as a multiplier for the rest strain in the fiber direction.\nThe fiber direction itself can be specified using the ", {"text": ["materialW"], "type": "code"}, " vertex/point attribute.\nAmong other things, this is useful for FEM muscle simulations.\nIf the ", {"text": ["fiberscale"], "type": "code"}, " is changed from 1 to 0.5, then the muscle wants to be half as long as before in the direction of the fiber.\nIf you animate the ", {"text": ["fiberscale"], "type": "code"}, " in a SOP Solver such that it decreases from 1 to a smaller value, you will cause a muscle contraction in the sim."]}, {"type": "para", "indent": 0, "extent": [15777, 16366], "text": ["The ", {"text": ["fiberstiffness"], "type": "code"}, " point attribute acts as a multiplier for the stiffness along the fiber direction.\nThe fiber direction of the material is determined by the W axis of the ", {"text": ["materialuvw"], "type": "code"}, " coordinates.\n", {"text": ["fiberstiffness"], "type": "code"}, " works as a multiplier on top of all the other material property multipliers, including the anisotropic multipliers.\nIf the ", {"text": ["fiberstiffness"], "type": "code"}, " changed from 1 to 10, then the stiffness along the fiber direction becomes 10 stronger than before.\nThis can be used to control how strong and how quick the effect of muscle flexing using the ", {"text": ["fiberscale"], "type": "code"}, " attribute takes effect. "]}, {"type": "para", "indent": 0, "extent": [16366, 16773], "text": ["For ", {"text": ["fiberscale"], "type": "code"}, "/", {"text": ["fiberstiffness"], "type": "code"}, " to have the desired effect, it is important that UVW directions are specified.\nA material-space UVWs for FEM muscles can be specified using the ", {"text": ["materialuvw"], "type": "code"}, " point/vertex attribute.\nBy providing ", {"text": ["materialuvw"], "type": "code"}, " as a vertex attribute, you are able to provide a local UVW space for each individual tet, which gives you to option of providing a separate UVW frame to each tet."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [16790, 16808], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [16808, 16827], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [16827, 16845], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [16845, 16870], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [16781, 16790], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fiberstiffness"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [16879, 16909], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [16909, 16928], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [16928, 16947], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for stiffness along the fiber direction, the W direction implied by ", {"text": ["materialuvw"], "type": "code"}, "."], "tag": "td", "attrs": {}, "extent": [16947, 17054], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [16870, 16879], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fiberscale"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [17063, 17089], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [17089, 17108], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [17108, 17127], "type": "pxml"}, {"indent": 8, "text": [" Multiplier for the rest strain along the fiber direction, the W direction implied by ", {"text": ["materialuvw"], "type": "code"}, "."], "tag": "td", "attrs": {}, "extent": [17127, 17240], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [17054, 17063], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [16773, 16781], "type": "pxml"}], "container": true, "level": 3, "text": ["Fiber Attributes"], "extent": [15226, 15250], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [17264, 17723], "text": ["Below is a list of attributes that are maintained internally by the solver. Each of these attributes is written to at the end of each solve and read from at the start of the next solve. You should not modify any of these attributes yourself. When you do, the solver is likely to become unstable and you will get bad results. However, you can inspect the values in these attributes in your network for visualization or for the creation of secondary effects."]}, {"type": "para", "indent": 0, "extent": [17723, 18064], "text": ["At each frame, the finite element solver computes a new physical state for each simulated object. The physical state of the object is represented by the point attributes ", {"text": ["P"], "type": "code"}, " and ", {"text": ["v"], "type": "code"}, ", representing the position and velocity, respectively. The solver\u2019s integration scheme maintains additional attributes ", {"text": ["a"], "type": "code"}, " for acceleration and ", {"text": ["j"], "type": "code"}, " for jerk."]}, {"type": "para", "indent": 0, "extent": [18064, 18310], "text": ["The point attributes ", {"text": ["P"], "type": "code"}, ", ", {"text": ["v"], "type": "code"}, ", ", {"text": ["a"], "type": "code"}, ", and ", {"text": ["j"], "type": "code"}, " store the current integration state of the object. These attributes should not be modified during the simulation because the finite element solver will become unstable and produce low-quality results."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [18327, 18345], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [18345, 18364], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [18364, 18382], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [18382, 18407], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [18318, 18327], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["P"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [18416, 18433], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [18433, 18452], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [18452, 18472], "type": "pxml"}, {"indent": 8, "text": [" Do not modify! Current position of each object point."], "tag": "td", "attrs": {}, "extent": [18472, 18539], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [18407, 18416], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["v"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [18548, 18565], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [18565, 18584], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [18584, 18604], "type": "pxml"}, {"indent": 8, "text": [" Do not modify! Current velocity of each object point."], "tag": "td", "attrs": {}, "extent": [18604, 18671], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [18539, 18548], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["accel"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [18679, 18700], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [18700, 18719], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [18719, 18739], "type": "pxml"}, {"indent": 8, "text": [" Do not modify! Current acceleration of each object point."], "tag": "td", "attrs": {}, "extent": [18739, 18810], "type": "pxml"}], "indent": 3, "tag": "tr", "attrs": {}, "extent": [18671, 18679], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["jerk"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [18818, 18838], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [18838, 18857], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [18857, 18877], "type": "pxml"}, {"indent": 8, "text": [" Do not modify! Current jerk of each object point."], "tag": "td", "attrs": {}, "extent": [18877, 18940], "type": "pxml"}], "indent": 3, "tag": "tr", "attrs": {}, "extent": [18810, 18818], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [18310, 18318], "type": "pxml"}], "container": true, "level": 3, "text": ["State Attributes"], "extent": [17240, 17264], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [18976, 20408], "text": ["These attributes are created on the Embedded Geometry of the Solid Object.\nThe ", {"text": ["parent"], "type": "code"}, " attribute is maintained by the embedding code itself, and\nshould not be modified.\nThe ", {"text": ["baseP"], "type": "code"}, " point attribute can be provided on the Embedded Geometry by the user to control the binding between the simulated geometry and the embedded geometry.\nIf no ", {"text": ["baseP"], "type": "code"}, " is provided, it will be copied from the point positions stored in ", {"text": ["P"], "type": "code"}, " at the creation frame.\nThe alignment happens relative to the ", {"text": ["baseP"], "type": "code"}, " point attribute on the simulated geometry. If the simulated geometry has a ", {"text": ["materialP"], "type": "code"}, " vertex or point attribute, then this attribute takes precedence, allowing control per vertex, rather than per point, if necessary.\nWhen you want to ensure that embedded geometry ends up on the desired side of a fracture between simulated geometry, you can use the combination of vertex attributes ", {"text": ["baseP"], "type": "code"}, " on the embedded geometry and ", {"text": ["restP"], "type": "code"}, " on the simulated geometry.\nThis allows you to line up the embedded geometry with the separate parts in the simulated geometry, for example using the ", {"text": ["Exploded View SOP"], "fullpath": "/nodes/sop/explodedview", "scheme": "Node", "type": "link", "value": "/nodes/sop/explodedview"}, ".\nThe ", {"text": ["fracturepart"], "type": "code"}, " attribute allows you to make sure that the embedded geometry follows the right parts when it gets fractured. When both the simulated and the embedded geometry have the ", {"text": ["fracturepart"], "type": "code"}, " attribute, the finite element solver will parent embedded geometry to simulated geometry that has the same fracture part."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [20425, 20443], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [20443, 20462], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [20462, 20480], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [20480, 20505], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [20416, 20425], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["parent"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [20514, 20536], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [20536, 20559], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [20559, 20578], "type": "pxml"}, {"indent": 8, "text": [" The index of a parent primitive in the simulated geometry."], "tag": "td", "attrs": {}, "extent": [20578, 20650], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [20505, 20514], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["baseP"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [20659, 20680], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [20680, 20699], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [20699, 20718], "type": "pxml"}, {"indent": 8, "text": [" Base positions used for alignment with simulated mesh."], "tag": "td", "attrs": {}, "extent": [20718, 20786], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [20650, 20659], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fracturepart"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [20795, 20823], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [20823, 20852], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [20852, 20871], "type": "pxml"}, {"indent": 8, "text": [" Optional user-specified fracture part ID."], "tag": "td", "attrs": {}, "extent": [20871, 20926], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [20786, 20795], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["P"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [20935, 20952], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [20952, 20971], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [20971, 20990], "type": "pxml"}, {"indent": 8, "text": [" Positions that correspond to the deformed state."], "tag": "td", "attrs": {}, "extent": [20990, 21052], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [20926, 20935], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["v"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [21061, 21078], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [21078, 21097], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [21097, 21116], "type": "pxml"}, {"indent": 8, "text": [" Velocities that correspond to the deformed state."], "tag": "td", "attrs": {}, "extent": [21116, 21179], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [21052, 21061], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["N"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [21188, 21205], "type": "pxml"}, {"indent": 8, "text": [" Point or Vertex"], "tag": "td", "attrs": {}, "extent": [21205, 21234], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [21234, 21253], "type": "pxml"}, {"indent": 8, "text": [" Normals that correspond to the deformed state."], "tag": "td", "attrs": {}, "extent": [21253, 21313], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [21179, 21188], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [20408, 20416], "type": "pxml"}], "container": true, "level": 3, "text": ["Embedded Geometry Attributes"], "extent": [18940, 18976], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [21347, 21810], "text": ["These are attributes that are optionally generated by the solver, when the generation is enabled on the simulated object. These attributes can be useful for visualization, for example, using the Finite Element Visualization SOP. Additionally, these attributes may be used to create secondary effects, for example, particles flying off in regions where fracturing occurs. The optional output attributes are also expected by the Finite Element Visualization SOP."]}, {"type": "para", "indent": 0, "extent": [21810, 21897], "text": ["The following attribute is generated when ", {"text": ["Create Quality Attributes"], "type": "ui"}, " is turned on:"]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [21914, 21932], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [21932, 21951], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [21951, 21969], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [21969, 21994], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [21905, 21914], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["quality"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [22003, 22026], "type": "pxml"}, {"indent": 8, "text": [" Primitive"], "tag": "td", "attrs": {}, "extent": [22026, 22049], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [22049, 22068], "type": "pxml"}, {"indent": 8, "text": [" A quality metric between 0 (worst) and 1 (best)"], "tag": "td", "attrs": {}, "extent": [22068, 22129], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [21994, 22003], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [21897, 21905], "type": "pxml"}, {"type": "para", "indent": 0, "extent": [22129, 22585], "text": ["Finite element simulation tends to be sensitive to the quality of the incoming primitives. Low quality primitives may slow down, destabilize or lock a finite element simulation. Low quality primitives are best avoided by using the Solid Embed as a tool to create your tet mesh. Although various quality metrics exist for tetrahedra, the one that\u2019s generated by the solver in this attribute is the one that best matches Houdini\u2019s finite element solution."]}, {"type": "para", "indent": 0, "extent": [22585, 23100], "text": ["The solver generates energy-density attributes for each object that has ", {"text": ["Create Energy Attributes"], "type": "ui"}, " turned on. The material property settings in the Model tab and the corresponding multiplier attributes result in potential energy, energy dissipation and kinetic energy.\nFor each of these three contributions, local densities are computed within the solver. These densities and quantities derived from them are used to determine the motion and behavior of the objects that are solved by the finite element solver."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [23117, 23135], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [23135, 23154], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [23154, 23172], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [23172, 23197], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [23108, 23117], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["potentialdensity"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [23206, 23238], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [23238, 23257], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [23257, 23276], "type": "pxml"}, {"indent": 8, "text": [" The local density of deformation energy"], "tag": "td", "attrs": {}, "extent": [23276, 23329], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [23197, 23206], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["dissipationdensity"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [23338, 23372], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [23372, 23391], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [23391, 23410], "type": "pxml"}, {"indent": 8, "text": [" The local density of the rate of energy loss"], "tag": "td", "attrs": {}, "extent": [23410, 23468], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [23329, 23338], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["kineticdensity"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [23477, 23507], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [23507, 23526], "type": "pxml"}, {"indent": 8, "text": [" Float"], "tag": "td", "attrs": {}, "extent": [23526, 23545], "type": "pxml"}, {"indent": 8, "text": [" The local density of the kinetic energy"], "tag": "td", "attrs": {}, "extent": [23545, 23598], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [23468, 23477], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [23100, 23108], "type": "pxml"}, {"type": "para", "indent": 0, "extent": [23598, 23852], "text": ["The ", {"text": ["potentialdensity"], "type": "code"}, " attribute is directly affected by the stiffness parameters in the Model tab. The ", {"text": ["kineticdensity"], "type": "code"}, " is proportional to the mass density that is specified for the object. The ", {"text": ["dissipationdensity"], "type": "code"}, " is related to the damping settings."]}, {"type": "para", "indent": 0, "extent": [23852, 24189], "text": ["If ", {"text": ["Create Fracture Attributes"], "type": "ui"}, " is enabled on the simulated object, then the ", {"text": ["fracturecount"], "type": "code"}, " point attribute is created.\nThe point attribute ", {"text": ["fracturecount"], "type": "code"}, " maintains for each point, the number of times that the point has been involved in a fracture. So any point with a nonzero value of ", {"text": ["fracturecount"], "type": "code"}, " has been involved fracturing."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [24206, 24224], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [24224, 24243], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [24243, 24261], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [24261, 24286], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [24197, 24206], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fracturecount"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [24295, 24324], "type": "pxml"}, {"indent": 8, "text": [" Point"], "tag": "td", "attrs": {}, "extent": [24324, 24343], "type": "pxml"}, {"indent": 8, "text": [" Integer"], "tag": "td", "attrs": {}, "extent": [24343, 24364], "type": "pxml"}, {"indent": 8, "text": [" The number of times a point was fractured during the simulation"], "tag": "td", "attrs": {}, "extent": [24364, 24441], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [24286, 24295], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [24189, 24197], "type": "pxml"}], "container": true, "level": 3, "text": ["Optional Output Attributes"], "extent": [21313, 21347], "indent": 0, "type": "h", "id": null}, {"body": [{"type": "para", "indent": 0, "extent": [24466, 25261], "text": ["In most situations where you want to influence a finite-element simulation, you will want to use soft constraints to achieve this, for example, target constraints, region constraints, or the target strength/damping settings on the object. These are first-class solver features that work in a stable way with the solver and should produce high quality results when used correctly. Purely for backwards compatibility, a force force attribute is still supported. Because the force force attribute lacks essential information that the solver needs, this attribute cannot be relied on when stability and quality are important. When setting up a new sim, alternatives such as soft targeting, region constraints and animated rest positions should be considered instead of the force force attribute."]}, {"body": [{"body": [{"indent": 8, "text": [" Name"], "tag": "th", "attrs": {}, "extent": [25278, 25296], "type": "pxml"}, {"indent": 8, "text": [" Class"], "tag": "th", "attrs": {}, "extent": [25296, 25315], "type": "pxml"}, {"indent": 8, "text": [" Type"], "tag": "th", "attrs": {}, "extent": [25315, 25333], "type": "pxml"}, {"indent": 8, "text": [" Description"], "tag": "th", "attrs": {}, "extent": [25333, 25358], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [25269, 25278], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["fexternal"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [25367, 25392], "type": "pxml"}, {"indent": 8, "text": [" Force"], "tag": "td", "attrs": {}, "extent": [25392, 25411], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [25411, 25431], "type": "pxml"}, {"indent": 8, "text": [" External force density"], "tag": "td", "attrs": {}, "extent": [25431, 25467], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [25358, 25367], "type": "pxml"}, {"body": [{"indent": 8, "text": [" ", {"text": ["force"], "type": "code"}], "tag": "td", "attrs": {}, "extent": [25476, 25497], "type": "pxml"}, {"indent": 8, "text": [" Force"], "tag": "td", "attrs": {}, "extent": [25497, 25516], "type": "pxml"}, {"indent": 8, "text": [" Vector"], "tag": "td", "attrs": {}, "extent": [25516, 25536], "type": "pxml"}, {"indent": 8, "text": [" Another name for external force density"], "tag": "td", "attrs": {}, "extent": [25536, 25589], "type": "pxml"}], "indent": 4, "tag": "tr", "attrs": {}, "extent": [25467, 25476], "type": "pxml"}], "indent": 0, "tag": "table", "attrs": {}, "extent": [25261, 25269], "type": "pxml"}], "container": true, "level": 3, "text": ["Legacy Attributes"], "extent": [24441, 24466], "indent": 0, "type": "h", "id": null}, {"indent": 0, "type": "para", "extent": [7256, 7405], "text": [{"fragment": "#solverwarnings", "text": "", "value": "/dyno/solids#solverwarnings", "fullpath": "/dyno/solids#solverwarnings", "scheme": "Include", "type": "link"}, "\n", {"fragment": "#solvererrors", "text": "", "value": "/dyno/solids#solvererrors", "fullpath": "/dyno/solids#solvererrors", "scheme": "Include", "type": "link"}, "\n", {"fragment": "#troubleshooting", "text": "", "value": "/dyno/solids#troubleshooting", "fullpath": "/dyno/solids#troubleshooting", "scheme": "Include", "type": "link"}, "\n", {"fragment": "#guidelines", "text": "", "value": "/dyno/solids#guidelines", "fullpath": "/dyno/solids#guidelines", "scheme": "Include", "type": "link"}]}], "indent": 0, "level": 2, "text": ["Attributes"], "extent": [7188, 7205], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [2823, 2835], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [28, 246], "text": ["This optional input can be used to control which simulation objects\n    are modified by this node. Any objects connected through this input\n    and which match the ", {"text": ["Group"], "type": "ui"}, " parameter field will be modified. "]}, {"indent": 4, "type": "para", "extent": [246, 397], "text": ["If this input is not connected, this node can be used in conjunction with an\n    Apply Data node, or can be used as an input to another data node."]}], "indent": 0, "type": "dt", "extent": [15, 28], "text": ["First Input"]}, {"body": [{"indent": 4, "type": "para", "extent": [415, 557], "text": ["If this node has more input connectors, other data nodes can be\n    attached to act as modifiers for the data created by this node. "]}, {"indent": 4, "type": "para", "extent": [557, 749], "text": ["The specific types of subdata that are meaningful vary from node to\n    node. Click ", {"keys": ["MMB"], "text": null, "type": "keys"}, " an input connector to see a list of available\n    data nodes that can be meaningfully attached."]}], "indent": 0, "type": "dt", "extent": [397, 415], "text": ["All Other Inputs"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [7405, 7413], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [29, 296], "text": ["The operation of this output depends on what inputs are connected\n    to this node. If an object stream is input to this node, the output\n    is also an object stream containing the same objects as the input\n    (but with the data from this node attached). "]}, {"indent": 4, "type": "para", "extent": [296, 606], "text": ["If no object stream is\n    connected to this node, the output is a data output. This data\n    output can be connected to an ", {"text": ["Apply Data DOP"], "fullpath": "/nodes/dop/applydata", "scheme": "Node", "type": "link", "value": "/nodes/dop/applydata"}, ",\n    or connected directly to a data input of another data node, to\n    attach the data from this node to an object or another piece of\n    data."]}], "indent": 0, "type": "dt", "extent": [15, 29], "text": ["First Output"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [7449, 7458], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [20, 107], "text": ["This value is the simulation time for which the node is being\n    evaluated. "]}, {"type": "para", "indent": 4, "extent": [107, 326], "text": ["This value may not be equal to the current Houdini time\n    represented by the variable T, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " ", {"text": ["Offset Time"], "type": "ui"}, " and ", {"text": ["Time Scale"], "type": "ui"}, "\n    parameters. "]}, {"type": "para", "indent": 4, "extent": [326, 555], "text": ["This value is guaranteed to have a value of zero at the\n    start of a simulation, so when testing for the first timestep of a\n    simulation, it is best to use a test like ", {"text": ["$ST == 0"], "type": "code"}, " rather than\n    ", {"text": ["$T == 0"], "type": "code"}, " or ", {"text": ["$FF == 1"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [16, 20], "text": ["ST"]}, {"body": [{"type": "para", "indent": 4, "extent": [559, 700], "text": ["This value is the simulation frame (or more accurately, the\n    simulation time step number) for which the node is being evaluated."]}, {"type": "para", "indent": 4, "extent": [700, 999], "text": ["This value may not be equal to the current Houdini frame number\n    represented by the variable F, depending on the settings of the ", {"text": ["DOP\n    Network"], "fullpath": "/nodes/obj/dopnet", "scheme": "Node", "type": "link", "value": "/nodes/obj/dopnet"}, " parameters. Instead, this value is equal to\n    the simulation time (ST) divided by the simulation timestep size\n    (TIMESTEP)."]}], "type": "dt", "indent": 0, "extent": [555, 559], "text": ["SF"]}, {"body": [{"type": "para", "indent": 4, "extent": [1009, 1181], "text": ["This value is the size of a simulation timestep. This value is\n    useful to scale values that are expressed in units per second, but\n    are applied on each timestep."]}], "type": "dt", "indent": 0, "extent": [999, 1009], "text": ["TIMESTEP"]}, {"body": [{"type": "para", "indent": 4, "extent": [1187, 1305], "text": ["This value is the inverse of the TIMESTEP value. It is the number\n    of timesteps per second of simulation time."]}], "type": "dt", "indent": 0, "extent": [1181, 1187], "text": ["SFPS"]}, {"body": [{"type": "para", "indent": 4, "extent": [1312, 1523], "text": ["This is the number of objects in the simulation. For nodes that\n    create objects such as the ", {"text": ["Empty Object"], "fullpath": "/nodes/dop/emptyobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/emptyobject"}, " node,\n    this value will increase for each object that is evaluated. "]}, {"type": "para", "indent": 4, "extent": [1523, 1621], "text": ["A good way to guarantee unique object names is to use an expression\n    like ", {"text": ["object_$SNOBJ"], "type": "code"}, "."]}], "type": "dt", "indent": 0, "extent": [1305, 1312], "text": ["SNOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1627, 1859], "text": ["This value is the number of objects that will be evaluated by the\n    current node during this timestep. This value will often be\n    different from SNOBJ, as many nodes do not process all the objects\n    in a simulation. "]}, {"type": "para", "indent": 4, "extent": [1859, 1991], "text": ["This value may return 0 if the node does not\n    process each object sequentially (such as the ", {"text": ["Group\n    DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1621, 1627], "text": ["NOBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [1996, 2322], "text": ["This value is the index of the specific object being processed by\n    the node. This value will always run from zero to NOBJ-1 in a given\n    timestep. This value does not identify the current object within the\n    simulation like OBJID or OBJNAME, just the object\u2019s position in the\n    current order of processing. "]}, {"type": "para", "indent": 4, "extent": [2322, 2616], "text": ["This value is useful for generating a\n    random number for each object, or simply splitting the objects into\n    two or more groups to be processed in different ways. This value\n    will be -1 if the node does not process objects sequentially (such\n    as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [1991, 1996], "text": ["OBJ"]}, {"body": [{"type": "para", "indent": 4, "extent": [2623, 2883], "text": ["This is the unique object identifier for the object being\n    processed. Every object is assigned an integer value that is unique\n    among all objects in the simulation for all time. Even if an object\n    is deleted, its identifier is never reused. "]}, {"type": "para", "indent": 4, "extent": [2883, 3168], "text": ["The object identifier\n    can always be used to uniquely identify a given object. This makes\n    this variable very useful in situations where each object needs to\n    be treated differently. It can be used to produce a unique random\n    number for each object, for example. "]}, {"type": "para", "indent": 4, "extent": [3168, 3406], "text": ["This value is also the best way\n    to look up information on an object using the dopfield expression\n    function. This value will be -1 if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [2616, 2623], "text": ["OBJID"]}, {"body": [{"type": "para", "indent": 4, "extent": [3417, 3556], "text": ["This string contains a space separated list of the unique object\n    identifiers for every object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3406, 3417], "text": ["ALLOBJIDS"]}, {"body": [{"type": "para", "indent": 4, "extent": [3569, 3687], "text": ["This string contains a space separated list of the names of every\n    object being processed by the current node."]}], "type": "dt", "indent": 0, "extent": [3556, 3569], "text": ["ALLOBJNAMES"]}, {"body": [{"type": "para", "indent": 4, "extent": [3694, 3801], "text": ["This value is the simulation time (see variable ST) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [3801, 4057], "text": ["Therefore, to check if an object was created\n    on the current timestep, the expression ", {"text": ["$ST == $OBJCT"], "type": "code"}, " should\n    always be used. This value will be zero if the node does not process\n    objects sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [3687, 3694], "text": ["OBJCT"]}, {"body": [{"type": "para", "indent": 4, "extent": [4064, 4172], "text": ["This value is the simulation frame (see variable SF) at which the\n    current object was created. "]}, {"type": "para", "indent": 4, "extent": [4172, 4389], "text": ["This value is equivalent to using the\n    dopsttoframe expression on the OBJCT variable. This value will be\n    zero if the node does not process objects sequentially (such as the\n    ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4057, 4064], "text": ["OBJCF"]}, {"body": [{"type": "para", "indent": 4, "extent": [4398, 4486], "text": ["This is a string value containing the name of the object being\n    processed. "]}, {"type": "para", "indent": 4, "extent": [4486, 4748], "text": ["Object names are not guaranteed to be unique within a\n    simulation. However, if you name your objects carefully so that they\n    are unique, the object name can be a much easier way to identify an\n    object than the unique object identifier, OBJID. "]}, {"type": "para", "indent": 4, "extent": [4748, 5194], "text": ["The object name can\n    also be used to treat a number of similar objects (with the same\n    name) as a virtual group. If there are 20 objects named \"myobject\",\n    specifying ", {"text": ["strcmp($OBJNAME, \"myobject\") == 0"], "type": "code"}, " in the activation field\n    of a DOP will cause that DOP to operate only on those 20 objects. This\n    value will be the empty string if the node does not process objects\n    sequentially (such as the ", {"text": ["Group DOP"], "fullpath": "/nodes/dop/group", "scheme": "Node", "type": "link", "value": "/nodes/dop/group"}, ")."]}], "type": "dt", "indent": 0, "extent": [4389, 4398], "text": ["OBJNAME"]}, {"body": [{"type": "para", "indent": 4, "extent": [5202, 5425], "text": ["This is a string value containing the full path of the current DOP\n    Network. This value is most useful in DOP subnet digital assets\n    where you want to know the path to the DOP Network that contains the\n    node."]}], "type": "dt", "indent": 0, "extent": [5194, 5202], "text": ["DOPNET"]}], "type": "dt_group", "container": true}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [5431, 5620], "text": ["Most dynamics nodes have local variables with the same names as the\n    node\u2019s parameters. For example, in a ", {"text": ["Position node"], "fullpath": "/nodes/dop/position", "scheme": "Node", "type": "link", "value": "/nodes/dop/position"}, ",\n    you could write the expression:"]}, {"lang": null, "type": "pre", "indent": 4, "extent": [5620, 5650], "text": ["\n    $tx + 0.1\n    "]}, {"type": "para", "indent": 4, "extent": [5650, 5730], "text": ["\u2026to make the object move 0.1 units along the X axis at each timestep."]}], "role": "item", "indent": 0, "extent": [5425, 5431], "type": "note"}], "role": "item_group", "container": true, "type": "note_group"}], "indent": 0, "level": 1, "text": "Locals", "role": "section", "extent": [7495, 7503], "container": true, "type": "locals_section", "id": "locals"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [7544, 7574], "text": [{"text": "", "fullpath": "/nodes/dop/clothobject", "scheme": "Node", "type": "link", "value": "/nodes/dop/clothobject"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [7535, 7544], "container": true, "type": "related_section", "id": "related"}], "title": ["FEM Solver"], "summary": ["Sets and configures a Finite Element solver."], "attrs": {"version": "1.0", "namespace": null, "internal": "finiteelementsolver", "context": "dop", "type": "node", "icon": "DOP/finiteelementsolver"}, "included": ["/nodes/dop/standard_data_inputs", "/nodes/dop/standard_data_outputs", "/nodes/dop/standard_finiteelement_attribs", "/nodes/dop/standard_locals"], "type": "root"}