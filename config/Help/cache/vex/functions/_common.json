{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [58, 235], "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"indent": 4, "type": "para", "extent": [235, 423], "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "extent": [16, 35], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [463, 585], "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."]}], "indent": 0, "text": {"text": ["opinput"], "type": "code"}, "role": "item", "attrs": {"id": "opinput_arg"}, "extent": [423, 437], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [630, 756], "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."]}, {"indent": 4, "type": "para", "extent": [756, 855], "text": ["If you specify ", {"text": ["-1"], "type": "code"}, ", the function uses the current CHOP node or input ", {"text": ["0"], "type": "code"}, " if it is connected."]}], "indent": 0, "text": {"text": ["opinput"], "type": "code"}, "role": "item", "attrs": {"id": "chop_opinput_arg"}, "extent": [585, 599], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [900, 1053], "text": ["A string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": {"text": ["geometry"], "type": "code"}, "role": "item", "attrs": {"id": "geometry_output"}, "extent": [855, 870], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1097, 1320], "text": ["A handle to the geometry to write to. Currently the only valid value is ", {"text": ["0"], "type": "code"}, " or ", {"text": "", "value": "/vex/functions/geoself", "fallback_text": "geoself()", "fullpath": "/vex/functions/geoself", "scheme": "Vex", "type": "link"}, ", which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)"]}], "indent": 0, "text": {"text": ["geohandle"], "type": "code"}, "role": "item", "attrs": {"id": "geohandle_arg"}, "extent": [1053, 1069], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1371, 1447], "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}], "indent": 0, "text": {"text": ["attribclass"], "type": "code"}, "role": "item", "attrs": {"id": "attribclassnogroup"}, "extent": [1320, 1338], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1491, 1571], "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [1571, 1677], "text": ["You can also use ", {"text": ["\"primgroup\""], "type": "code"}, ", ", {"text": ["\"pointgroup\""], "type": "code"}, " or ", {"text": ["\"vertexgroup\""], "type": "code"}, " to ", {"text": ["read from groups"], "fullpath": "/vex/groups", "scheme": null, "type": "link", "value": "/vex/groups"}, "."]}], "indent": 0, "text": {"text": ["attribclass"], "type": "code"}, "role": "item", "attrs": {"id": "attribclass"}, "extent": [1447, 1465], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1730, 1770], "text": ["The name of the attribute to read."]}], "indent": 0, "text": {"text": ["attribute_name"], "type": "code"}, "role": "item", "attrs": {"id": "attribnamenogroup"}, "extent": [1677, 1698], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1816, 1871], "text": ["The name of the attribute (or intrinsic) to read."]}], "indent": 0, "text": {"text": ["attribute_name"], "type": "code"}, "role": "item", "attrs": {"id": "attribname"}, "extent": [1770, 1791], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1907, 2069], "text": ["The point/primitive/vertex number to read the attribute value from. For detail attributes, use ", {"text": ["0"], "type": "code"}, " here (the argument is ignored for detail attributes)."]}, {"indent": 4, "type": "para", "extent": [2069, 2206], "text": ["To get the linear vertex number given a primitive number and the vertex number on the primitive, use the ", {"text": "", "value": "/vex/functions/primvertex", "fallback_text": "primvertex()", "fullpath": "/vex/functions/primvertex", "scheme": "Vex", "type": "link"}, " function."]}], "indent": 0, "text": {"text": ["elemnum"], "type": "code"}, "role": "item", "attrs": {"id": "elemnum"}, "extent": [1871, 1885], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [2255, 2360], "text": ["The name of the intrinsic to read. For example, ", {"text": ["\"pointattributes\""], "type": "code"}, ", ", {"text": ["\"pointcount\""], "type": "code"}, ", or ", {"text": ["\"bounds\""], "type": "code"}, "."]}], "indent": 0, "text": {"text": ["intrinsic_name"], "type": "code"}, "role": "item", "attrs": {"id": "intrinsicname"}, "extent": [2206, 2227], "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}, {"body": [{"body": [{"body": [{"indent": 4, "text": [{"text": ["\"none\""], "type": "code"}, " "], "role": "td", "extent": [2404, 2419], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2419, 2444], "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"point\""], "type": "code"}, " "], "role": "td", "extent": [2444, 2460], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2460, 2514], "text": ["Apply scales, rotations, and transformations."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"hpoint\""], "type": "code"}, " "], "role": "td", "extent": [2514, 2531], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2531, 2601], "text": ["Apply scales, rotations, and transformations to this vector4."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"vector\""], "type": "code"}, " "], "role": "td", "extent": [2601, 2618], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2618, 2679], "text": ["Apply scales and rotations, but not transformations."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"normal\""], "type": "code"}, " "], "role": "td", "extent": [2679, 2696], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2696, 2758], "text": ["Apply rotations, apply scales with inverse-transpose."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"color\""], "type": "code"}, " "], "role": "td", "extent": [2758, 2774], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2774, 2799], "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"matrix\""], "type": "code"}, " "], "role": "td", "extent": [2799, 2816], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2816, 2885], "text": ["Apply scales, rotations, and transformations to this matrix."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"quaternion\""], "type": "code"}, " "], "role": "td", "extent": [2885, 2906], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2906, 2931], "text": ["Apply rotations."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"indexpair\""], "type": "code"}, " "], "role": "td", "extent": [2931, 2951], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2951, 2976], "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"integer\""], "type": "code"}, " "], "role": "td", "extent": [2976, 2994], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2994, 3052], "text": ["Do not blend this value when points are averaged."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"integer-blend\""], "type": "code"}, " "], "role": "td", "extent": [3052, 3076], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [3076, 3136], "text": ["Integer values that blend when points are averaged."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"texturecoord\""], "type": "code"}, " "], "role": "td", "extent": [3136, 3159], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [3159, 3303], "text": ["Don\u2019t transform, and try to preserve seams when interpolating.\n        Attributes with this type will show up in the UV viewport menu."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "role": "item", "attrs": {"id": "attrib_typeinfo_values"}, "extent": [2360, 2367], "type": "null"}, {"body": [{"indent": 4, "type": "para", "extent": [3340, 3413], "text": ["Returns the value of ", {"text": ["geohandle"], "type": "code"}, " on success or ", {"text": ["-1"], "type": "code"}, " on failure."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3423, 3689], "text": ["If the attribute does not exist, this function ", {"text": ["creates the attribute"], "type": "strong"}, " with a default value of zero, empty string, or an empty array.\n        If you want to control the default value of a numeric attribute, use ", {"text": "", "value": "/vex/functions/addattrib", "fallback_text": "addattrib()", "fullpath": "/vex/functions/addattrib", "scheme": "Vex", "type": "link"}, " before setting the attribute."]}], "indent": 4, "role": "item", "type": "note", "extent": [3413, 3423]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "role": "item", "attrs": {"id": "set_attrib_info"}, "extent": [3303, 3310], "type": "null"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [3730, 3833], "text": ["(Optional) if given, this controls how the function modifies any existing value in the attribute."]}, {"body": [{"body": [{"indent": 4, "text": [{"text": ["\"set\""], "type": "code"}, " "], "role": "td", "extent": [3833, 3847], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [3847, 3901], "text": ["Overwrite the attribute with the given value."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"add\""], "type": "code"}, " "], "role": "td", "extent": [3901, 3915], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [3915, 3955], "text": ["Add to the attribute the value."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"min\""], "type": "code"}, ", ", {"text": ["\"minimum\""], "type": "code"}, " "], "role": "td", "extent": [3955, 3982], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [3982, 4048], "text": ["Set the attribute to the minimum of itself and the value."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"max\""], "type": "code"}, ", ", {"text": ["\"maximum\""], "type": "code"}, " "], "role": "td", "extent": [4048, 4075], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [4075, 4141], "text": ["Set the attribute to the maximum of itself and the value."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"mult\""], "type": "code"}, ", ", {"text": ["\"multiply\""], "type": "code"}, " "], "role": "td", "extent": [4141, 4170], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [4170, 4296], "text": ["Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"toggle\""], "type": "code"}, " "], "role": "td", "extent": [4296, 4313], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [4313, 4416], "text": ["Toggles the attribute, independent of the source value.  Useful for toggling group membership."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": [{"text": ["\"append\""], "type": "code"}, " "], "role": "td", "extent": [4416, 4433], "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [4433, 4541], "text": ["Valid for string and array attributes.  Appends the source value to the end of the original value."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": {"text": ["mode"], "type": "code"}, "role": "item", "attrs": {"id": "set_attrib_mode"}, "extent": [3689, 3700], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [4587, 4743], "text": ["The linear index of a vertex.\n    If you have a point number and point vertex number, you can use ", {"text": "", "value": "/vex/functions/vertexindex", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex", "scheme": "Vex", "type": "link"}, " to convert them to a linear index."]}], "indent": 0, "text": {"text": ["linearvertex"], "type": "code"}, "role": "item", "attrs": {"id": "linearvertex"}, "extent": [4541, 4560], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [4783, 5049], "text": ["When running in the context of a node (such as a wrangle LOP), this argument can be an integer representing the input number (starting at 0) to read the stage from. The integer is equivalent to the string form referencing a particular input, e.g., \"opinput:0\"."]}], "indent": 0, "text": [{"text": ["<stage>"], "type": "code"}], "role": "item", "attrs": {"id": "usd_stage"}, "extent": [4743, 4759], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5097, 5293], "text": ["A handle to the stage to write to. Currently the only valid value is ", {"text": ["0"], "type": "code"}, ", which means the current stage in a node. (This argument may be used in the future to allow writing to other stages.)"]}], "indent": 0, "text": {"text": ["stagehandle"], "type": "code"}, "role": "item", "attrs": {"id": "usd_stagehandle"}, "extent": [5049, 5067], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5327, 5407], "text": ["The path to the object. I.e, a primitive, an attribute, or a relationship."]}], "indent": 0, "text": {"text": ["path"], "type": "code"}, "role": "item", "attrs": {"id": "usd_path"}, "extent": [5293, 5304], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5449, 5481], "text": ["The path to the primitive."]}], "indent": 0, "text": {"text": ["primpath"], "type": "code"}, "role": "item", "attrs": {"id": "usd_primpath"}, "extent": [5407, 5422], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5535, 5568], "text": ["The path to the collection."]}], "indent": 0, "text": {"text": ["collectionpath"], "type": "code"}, "role": "item", "attrs": {"id": "usd_collectionpath"}, "extent": [5481, 5502], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5610, 5634], "text": ["The metadata name."]}, {"indent": 4, "type": "para", "extent": [5634, 5947], "text": ["The name can be namespaced to acces values inside (possibly nested) VtDictionaries, such as custom data dictionary, e.g., \"customData:name\" or \"customData:name:subname\". For non-namespaced names, the object schema needs to declare a given metadata for it to be accessible, e.g., \"active\" or \"documentation\"."]}], "indent": 0, "text": {"text": ["name"], "type": "code"}, "role": "item", "attrs": {"id": "usd_metadataname"}, "extent": [5568, 5579], "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [5988, 6025], "text": ["The transform operation suffix."]}, {"indent": 4, "type": "para", "extent": [6025, 6469], "text": ["USD primitives are transformed in space by a series of transform operations whose full names are sequentially listed in the ", {"text": ["xformOpOrder"], "type": "code"}, " attribute.  Full names are namespaced, encode the operation transform type (e.g., translation or rotation), and can also contain a suffix. If primitive has a few operations of the same type, it\u2019s necessary to specify the suffix to differentiate between them. This parameter specifies such a suffix."]}], "indent": 0, "text": {"text": ["suffix"], "type": "code"}, "role": "item", "attrs": {"id": "usd_xformopsuffix"}, "extent": [5947, 5960], "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [6497, 6517], "text": [{"text": "", "fullpath": "/vex/random", "scheme": null, "type": "link", "value": "/vex/random"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6517, 6536], "text": [{"text": "", "value": "/vex/functions/anoise", "fallback_text": "anoise()", "fullpath": "/vex/functions/anoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6536, 6558], "text": [{"text": "", "value": "/vex/functions/curlnoise", "fallback_text": "curlnoise()", "fullpath": "/vex/functions/curlnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6558, 6580], "text": [{"text": "", "value": "/vex/functions/flownoise", "fallback_text": "flownoise()", "fullpath": "/vex/functions/flownoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6580, 6598], "text": [{"text": "", "value": "/vex/functions/noise", "fallback_text": "noise()", "fullpath": "/vex/functions/noise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6598, 6617], "text": [{"text": "", "value": "/vex/functions/onoise", "fallback_text": "onoise()", "fullpath": "/vex/functions/onoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6617, 6636], "text": [{"text": "", "value": "/vex/functions/pnoise", "fallback_text": "pnoise()", "fullpath": "/vex/functions/pnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6636, 6655], "text": [{"text": "", "value": "/vex/functions/snoise", "fallback_text": "snoise()", "fullpath": "/vex/functions/snoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6655, 6674], "text": [{"text": "", "value": "/vex/functions/vnoise", "fallback_text": "vnoise()", "fullpath": "/vex/functions/vnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6674, 6693], "text": [{"text": "", "value": "/vex/functions/wnoise", "fallback_text": "wnoise()", "fullpath": "/vex/functions/wnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [6693, 6712], "text": [{"text": "", "value": "/vex/functions/xnoise", "fallback_text": "xnoise()", "fullpath": "/vex/functions/xnoise", "scheme": "Vex", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "attrs": {"id": "noiselinks"}, "extent": [6469, 6476], "type": "null"}], "type": "root", "attrs": {"type": "include"}}