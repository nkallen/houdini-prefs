{"body": [{"indent": 0, "text": ["set"], "type": "title", "extent": [0, 8], "level": 0}, {"indent": 0, "type": "summary", "extent": [63, 161], "text": ["Creates a new value based on its arguments, such as creating a vector from its components."]}, {"indent": 0, "type": "para", "extent": [161, 274], "text": ["The ", {"text": ["set()"], "type": "code"}, " function has a ", {"text": ["wide variety"], "type": "strong"}, " of forms allowing you to perform many different types of conversions."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [279, 408], "text": ["When filling a matrix in Houdini, the numbers go across the first row, then across the second row, and so on (\"row-major\")."]}], "indent": 0, "role": "item", "type": "tip", "extent": [274, 279]}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"indent": 0, "role": "item", "type": "usage", "extent": [408, 452], "text": [" ", {"text": ["vector2 set( float v1; float v2 )"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [452, 505], "text": [" ", {"text": ["vector set( float v1; float v2; float v3 )"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [505, 569], "text": [" ", {"text": ["vector4 set( float v1; float v2; float v3; float v4 )"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [569, 633], "text": [" ", {"text": ["matrix2 set( float v1; float v2; float v3; float v4 )"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [633, 747], "text": [" ", {"text": ["matrix3 set( float v1; float v2; float v4; float v4; float v5; float v6; float v7; float v8; float v9 )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [938, 1012], "text": ["Create a vector or matrix type from the values in the arguments."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [1012, 1145], "text": ["\n    vector4 v = set(1.0, 2.0, 3.0, 4.0);\n    matrix3 m = set(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);\n    "]}, {"indent": 4, "type": "para", "extent": [1145, 1262], "text": ["The ", {"text": "", "value": "/vex/functions/assign", "fallback_text": "assign()", "fullpath": "/vex/functions/assign", "scheme": "Vex", "type": "link"}, " function performs the opposite of this operation (pulling components out into variables)."]}], "indent": 0, "text": [" ", {"text": ["matrix set( float v1; float v2; float v3; float v4; float v5; float v6; float v7; float v8; float v9; float v10; float v11; float v12; float v13; float v14; float v15; float v16 )"], "type": "code"}], "role": "item", "extent": [747, 938], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [1262, 1301], "text": [" ", {"text": ["<vector> set( float nums[] )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [1341, 1399], "text": ["Creates a vector/matrix from an array of floats."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [1399, 1493], "text": ["\n    float[] nums = {1.0, 2.0, 3.0, 4.0};\n    vector4 v = set(nums);\n    "]}], "indent": 0, "text": [" ", {"text": ["<matrix> set( float nums[] )"], "type": "code"}], "role": "item", "extent": [1301, 1341], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [1493, 1532], "text": [" ", {"text": ["<vector> set( float|int v )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [1571, 1703], "text": ["If you set a vector or matrix type from a single value, the vector/matrix is filled in with that value for all components."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [1703, 1783], "text": ["\n    vector4 v = set(2.0);  // -> {2.0, 2.0, 2.0, 2.0}\n    "]}], "indent": 0, "text": [" ", {"text": ["<matrix> set( float|int v )"], "type": "code"}], "role": "item", "extent": [1532, 1571], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [1783, 1836], "text": [" ", {"text": ["matrix2 set( vector2 row1; vector2 row2 )"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [1836, 1899], "text": [" ", {"text": ["matrix3 set( vector row1; vector row2; vector row3 )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [1979, 2084], "text": ["Creates a matrix type from a series of vector arguments of the same size representing the rows."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [2084, 2182], "text": ["\n    matrix3 m = set({0.0, 1.0, 0.0}, {1.0, 0.0, 1.0}, {0.0, 1.0, 0.0});\n    "]}], "indent": 0, "text": [" ", {"text": ["matrix set( vector4 row1; vector4 row2; vector4 row3; vector4 row4 )"], "type": "code"}], "role": "item", "extent": [1899, 1979], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [2182, 2222], "text": [" ", {"text": ["matrix3 set( vector rows[] )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [2262, 2442], "text": ["You can also set a matrix type from an array of vectors representing rows. If there are not enough vectors in the array to fill the matrix, the extra rows will contain zeros."]}], "indent": 0, "text": [" ", {"text": ["matrix set( vector4 rows[] )"], "type": "code"}], "role": "item", "extent": [2222, 2262], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [2442, 2478], "text": [" ", {"text": ["vector[] set( matrix3 m )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [2515, 2596], "text": ["Creates an array of vectors from the rows of a matrix of the same size."]}, {"lang": null, "indent": 4, "type": "pre", "extent": [2596, 2770], "text": ["\n    matrix3 m3 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};\n    vector[] vs = set(m3);  // -> array [ {1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0} ]\n    "]}], "indent": 0, "text": [" ", {"text": ["vector4[] set( matrix m )"], "type": "code"}], "role": "item", "extent": [2478, 2515], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [2770, 2804], "text": [" ", {"text": ["vector set( vector2 v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [2804, 2838], "text": [" ", {"text": ["vector4 set( vector2 v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [2838, 2871], "text": [" ", {"text": ["vector4 set( vector v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [2871, 2905], "text": [" ", {"text": ["matrix3 set( matrix2 m)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [2905, 2938], "text": [" ", {"text": ["matrix set( matrix2 m)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [2972, 3079], "text": ["If you set a larger vector or matrix type from a smaller type, the extra components will be zero."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [3079, 3188], "text": ["\n    vector2 v2 = {1.0, 2.0};\n    vector4 v4 = set(v2);  // -> {1.0, 2.0, 0.0, 0.0}\n    "]}], "indent": 0, "text": [" ", {"text": ["matrix set( matrix3 m)"], "type": "code"}], "role": "item", "extent": [2938, 2972], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [3188, 3221], "text": [" ", {"text": ["float set( vector v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [3221, 3253], "text": [" ", {"text": ["float set( vector4 v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [3253, 3287], "text": [" ", {"text": ["vector2 set( vector4 v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [3287, 3320], "text": [" ", {"text": ["vector2 set( vector v)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [3355, 3468], "text": ["If you set a smaller vector with a larger vector, the smaller type will take components from the left."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [3468, 3576], "text": ["\n    vector4 v4 = {1.0, 2.0, 3.0, 4.0};\n    vector2 v2 = set(v4)  // -> {1.0, 2.0}\n    "]}], "indent": 0, "text": [" ", {"text": ["vector set( vector4 v)"], "type": "code"}], "role": "item", "extent": [3320, 3355], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [3576, 3611], "text": [" ", {"text": ["matrix2 set( matrix3 m)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [3611, 3644], "text": [" ", {"text": ["matrix2 set( matrix m)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [3678, 3785], "text": ["If you set a smaller matrix with a larger matrix, the smaller type will take the top-left corner."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [3785, 3929], "text": ["\n    matrix3 m3 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};\n    matrix2 m2 = set(m3);  // -> {1.0, 2.0, 4.0, 5.0}\n    "]}], "indent": 0, "text": [" ", {"text": ["matrix3 set( matrix m)"], "type": "code"}], "role": "item", "extent": [3644, 3678], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [3929, 3965], "text": [" ", {"text": ["float[] set( <vector> v)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [4001, 4081], "text": ["Creates an array of floats from the components of a vector or matrix type."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [4081, 4260], "text": ["\n    matrix3 m3 = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};\n    float[] nums = set(m3);  // -> array [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ]\n    "]}], "indent": 0, "text": [" ", {"text": ["float[] set( <matrix> m)"], "type": "code"}], "role": "item", "extent": [3965, 4001], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [4260, 4302], "text": [" ", {"text": ["<vector>[] set( float nums[] )"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [4345, 4511], "text": ["Creates an array of vector/matrix types by taking one component at a time from an array of floats. This is the same as using the ", {"text": "", "value": "/vex/functions/unserialize", "fallback_text": "unserialize()", "fullpath": "/vex/functions/unserialize", "scheme": "Vex", "type": "link"}, " function."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [4511, 4642], "text": ["\n    float[] nums = {1.0, 2.0, 3.0, 4.0};\n    vector2[] vs = set(nums);  // -> [ {1.0, 2.0}, {3.0, 4.0} ]\n    "]}], "indent": 0, "text": [" ", {"text": ["<matrix>[] set( float nums[] )"], "type": "code"}], "role": "item", "extent": [4302, 4345], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [4642, 4670], "text": [" ", {"text": ["int set(float v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [4670, 4697], "text": [" ", {"text": ["float set(int v)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [4697, 4730], "text": [" ", {"text": ["float[] set( int vs[])"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [4764, 4920], "text": ["You can set a float from an int, or an int from a float, or an array of floats from an array of ints, or an array of ints from an array of floats."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [4920, 5066], "text": ["\n    float[] fracs = { 1.1, 2.2, 3.3, 4.4, 5.5, 6.6 };\n    int[] floored = set(fracs);  // -> array [ 1, 2, 3, 4, 5, 6 ]\n    "]}], "indent": 0, "text": [" ", {"text": ["int[] set( float vs[])"], "type": "code"}], "role": "item", "extent": [4730, 4764], "type": "usage"}, {"body": [{"indent": 4, "type": "para", "extent": [5103, 5167], "text": ["Sets all the items in an array of float to the same value."]}], "indent": 0, "text": [" ", {"text": ["float[] set( float num )"], "type": "code"}], "role": "item", "extent": [5066, 5103], "type": "usage"}, {"body": [{"indent": 4, "type": "para", "extent": [5204, 5246], "text": ["Returns the first item in the array."]}], "indent": 0, "text": [" ", {"text": ["float set( float nums[] )"], "type": "code"}], "role": "item", "extent": [5167, 5204], "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [5246, 5277], "text": [" ", {"text": ["<type> set(<type> v)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [5313, 5421], "text": ["If you call ", {"text": ["set()"], "type": "code"}, " with the same argument type and return type, it simply returns the argument value."]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [5421, 5491], "text": ["\n    string s = set(\"Hello\");  // -> \"Hello\"\n    "]}], "indent": 0, "text": [" ", {"text": ["<type>[] set(<type> v[])"], "type": "code"}], "role": "item", "extent": [5277, 5313], "type": "usage"}], "container": true, "role": "item_group", "type": "usage_group"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [5502, 5524], "text": [{"text": "", "value": "/vex/functions/assign", "fallback_text": "assign()", "fullpath": "/vex/functions/assign", "scheme": "Vex", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [5491, 5502], "container": true, "type": "related_section", "id": "related"}], "summary": ["Creates a new value based on its arguments, such as creating a vector from its components."], "type": "root", "attrs": {"showtags": "true", "group": "utility", "type": "vex", "context": "all", "tags": "data"}, "title": ["set"]}