// Magic: b3c8a9d1
// Automatically generated PSI dialog (PSI version 18.0.348)
// Fri Feb  7 14:22:44 2020


f_tmp = FLOAT_FIELD;	// dialog.top.ui
keeppos.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

keeppos.gad = ROW
{
    

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    {  }

}

pre_xform.gad = ROW
{

    {  }
    { WIDTH(0.1) }

    pre_xform.menu;
}
}	// Template join.bot

xOrd.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    rOrd.menu;

    {  }

}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

r.gad = ROW
{
   HSTRETCH

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

s.gad = ROW
{
   HSTRETCH

   s.label = PARM_LABEL("Scale", "s") WIDTH(1.5);
   PARM(float, 3, "s", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(s.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_scale" VALUE(s.script_action)
	HELP("Select an object to match the scale with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

p.gad = ROW
{
   HSTRETCH

   p.label = PARM_LABEL("Pivot", "p") WIDTH(1.5);
   PARM(float, 3, "p", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(p.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_pivot" VALUE(p.script_action)
	HELP("Select an object to match the pivot with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 scale.label = PARM_LABEL("Uniform Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,1)
	 LABELREF(scale.label) HSTRETCH;

}

lookatpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 lookatpath.label = PARM_LABEL("Look At", "lookatpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "lookatpath") VALUE(lookatpath.val) 
	LABELREF(lookatpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(lookatpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(lookatpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

lookup.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Look At Up Vector", "lookup") WIDTH(1.5);
    { WIDTH(0.09) }

    lookup.menu;

    { HSTRETCH }

}

pathobjpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 pathobjpath.label = PARM_LABEL("Path Object", "pathobjpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "pathobjpath") VALUE(pathobjpath.val) 
	LABELREF(pathobjpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(pathobjpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(pathobjpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

roll.gad = ROW
{
   HSTRETCH

   roll.label = PARM_LABEL( "Roll", "roll" ) WIDTH(1.5);
   PARM(float, 1, "roll", none, none) RANGE(-360, 360)
	LABELREF( roll.label ) HSTRETCH;

}

pos.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pos.label = PARM_LABEL("Position", "pos") WIDTH(1.5);
 PARM(float, 1, "pos", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(pos.label) HSTRETCH;

}

uparmtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Parameterization", "uparmtype") WIDTH(1.5);
    { WIDTH(0.09) }

    uparmtype.menu;

    { HSTRETCH }

}

pathorient.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 pathorient.label = PARM_LABEL("Orient Along Path", "pathorient") WIDTH(1.5);
 PARM(integer, 1, "pathorient", none, none) RANGE(0,1)
	 LABELREF(pathorient.label) HSTRETCH;

}

up.gad = ROW 
{
    HSTRETCH

    up.label = PARM_LABEL("Orient Up Vector", "up") WIDTH(1.5);
    PARM(float, 3, "up", none, none) LABELREF(up.label)
	HSTRETCH;

}

bank.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 bank.label = PARM_LABEL("Auto-Bank factor", "bank") WIDTH(1.5);
 PARM(float, 1, "bank", none, none) RANGE(-1,1)
	 LABELREF(bank.label) HSTRETCH;

}
ar_translate_as.gad = NULL { }

ar_volume_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Type", "ar_volume_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_volume_type.menu;

    { HSTRETCH }

}

ar_filename.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 ar_filename.label = PARM_LABEL("Filename", "ar_filename") WIDTH(1.5);

 PARM_FIELD (pathstring, "ar_filename") LABELREF(ar_filename.label)
	VALUE(ar_filename.val) HSTRETCH;

    ar_filename.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(ar_filename.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

ar_grids.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    ar_grids.label = PARM_LABEL("Grids", "ar_grids") WIDTH(1.5);
    PARM_FIELD(string, "ar_grids") VALUE(ar_grids.val) 
	LABELREF(ar_grids.label) HSTRETCH;

    ar_grids.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

ar_velocity_grids.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    ar_velocity_grids.label = PARM_LABEL("Velocity Grids", "ar_velocity_grids") WIDTH(1.5);
    PARM_FIELD(string, "ar_velocity_grids") VALUE(ar_velocity_grids.val) 
	LABELREF(ar_velocity_grids.label) HSTRETCH;

    ar_velocity_grids.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

ar_velocity_scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_velocity_scale.label = PARM_LABEL("Velocity Scale", "ar_velocity_scale") WIDTH(1.5);
 PARM(float, 1, "ar_velocity_scale", none, LOGSCALE) RANGE(0.10000000000000001,10)
	 LABELREF(ar_velocity_scale.label) HSTRETCH;

}

ar_velocity_threshold.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_velocity_threshold.label = PARM_LABEL("Velocity Threshold", "ar_velocity_threshold") WIDTH(1.5);
 PARM(float, 1, "ar_velocity_threshold", none, LOGSCALE) RANGE(0,1)
	LOCK_RANGE LABELREF(ar_velocity_threshold.label) HSTRETCH;

}
ar_velocity_fps.gad = NULL { }

ar_custom_type.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    ar_custom_type.label = PARM_LABEL("Custom Type", "ar_custom_type") WIDTH(1.5);
    PARM_FIELD(string, "ar_custom_type") VALUE(ar_custom_type.val) 
	LABELREF(ar_custom_type.label) HSTRETCH;

    ar_custom_type.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

ar_data.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    ar_data.label = PARM_LABEL("Data String", "ar_data") WIDTH(1.5);
    PARM_FIELD(string, "ar_data") VALUE(ar_data.val) 
	LABELREF(ar_data.label) HSTRETCH;

}

ar_display.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Display As", "ar_display") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_display.menu;

    { HSTRETCH }

}
setmaxres.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
setmaxres.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

setmaxres.gad = PARM_BUTTON("setmaxres", "") toggle VALUE(setmaxres.val);

maxres.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 maxres.label = PARM_LABEL("Max Vis Res", "maxres") WIDTH(1.32);
 PARM(integer, 1, "maxres", none, none) RANGE(1,512)
	LOCK_RANGE_MIN LABELREF(maxres.label) HSTRETCH;

}
}	
}	// Template join.bot


ar_padding.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_padding.label = PARM_LABEL("        Padding", "ar_padding") WIDTH(1.5);
 PARM(float, 1, "ar_padding", none, none) RANGE(0,10)
	 LABELREF(ar_padding.label) HSTRETCH;

}
ar_step_size_type.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_step_size_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Volume Step", "ar_step_size_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_step_size_type.menu;

    {  }

}

ar_step_size.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_step_size.label = PARM_LABEL("      Step Size", "ar_step_size") ;
 PARM(float, 1, "ar_step_size", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(ar_step_size.label) HSTRETCH;

}
}	// Template join.bot


ar_step_scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_step_scale.label = PARM_LABEL("Step Scale", "ar_step_scale") WIDTH(1.5);
 PARM(float, 1, "ar_step_scale", none, LOGSCALE) RANGE(0.10000000000000001,10)
	LOCK_RANGE_MIN LABELREF(ar_step_scale.label) HSTRETCH;

}

ar_compress.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_compress", "Compress") toggle VALUE(ar_compress.val);

    { HSTRETCH }

}
shop_materialpath.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

shop_materialpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 shop_materialpath.label = PARM_LABEL("Material", "shop_materialpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_materialpath") VALUE(shop_materialpath.val) 
	LABELREF(shop_materialpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_materialpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_materialpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

shop_materialopts.gad = ROW
{

    {  }
    { WIDTH(0.1) }

    shop_materialopts.menu;
}
}	// Template join.bot


shop_propertiespath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 shop_propertiespath.label = PARM_LABEL("Default Properties", "shop_propertiespath") WIDTH(1.5);
 PARM_FIELD(pathstring, "shop_propertiespath") VALUE(shop_propertiespath.val) 
	LABELREF(shop_propertiespath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(shop_propertiespath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(shop_propertiespath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}
ar_user_options.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_user_options.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    ar_user_options.label = PARM_LABEL("User Options", "ar_user_options") WIDTH(1.5);
    PARM_FIELD(string, "ar_user_options") VALUE(ar_user_options.val) 
	LABELREF(ar_user_options.label) HSTRETCH;

}

ar_user_options_enable.gad = ROW
{
    

    {  }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_user_options_enable", "Enable") toggle VALUE(ar_user_options_enable.val);

    {  }

}
}	// Template join.bot


ar_transform_type.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Transform Type", "ar_transform_type") WIDTH(1.5);
    { WIDTH(0.09) }

    ar_transform_type.menu;

    { HSTRETCH }

}
ar_mb_xform_keys_override.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_xform_keys_override.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

ar_mb_xform_keys_override.gad = PARM_BUTTON("ar_mb_xform_keys_override", "") toggle VALUE(ar_mb_xform_keys_override.val);

ar_mb_xform_keys.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ar_mb_xform_keys.label = PARM_LABEL("Transform Keys", "ar_mb_xform_keys") WIDTH(1.32);
 PARM(integer, 1, "ar_mb_xform_keys", none, none) RANGE(1,20)
	LOCK_RANGE_MIN LABELREF(ar_mb_xform_keys.label) HSTRETCH;

}
}	
}	// Template join.bot

ar_mb_dform_keys_override.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_dform_keys_override.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_dform_keys_override.gad = NULL { }
ar_mb_dform_keys.gad = NULL { }
}	
}	// Template join.bot

ar_mb_velocity_enable.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_velocity_enable.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_velocity_enable.gad = NULL { }
ar_mb_velocity_attribute.gad = NULL { }
}	
}	// Template join.bot

ar_mb_acceleration_enable.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_acceleration_enable.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_mb_acceleration_enable.gad = NULL { }
ar_mb_acceleration_attribute.gad = NULL { }
}	
}	// Template join.bot


ar_visibility_camera.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_camera", "Visible to Camera Rays") toggle VALUE(ar_visibility_camera.val);

    { HSTRETCH }

}

ar_visibility_shadow.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_shadow", "Visible to Shadow Rays") toggle VALUE(ar_visibility_shadow.val);

    { HSTRETCH }

}

ar_visibility_reflection.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_reflection", "Visible to Reflected Rays") toggle VALUE(ar_visibility_reflection.val);

    { HSTRETCH }

}

ar_visibility_refraction.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_refraction", "Visible to Refracted Rays") toggle VALUE(ar_visibility_refraction.val);

    { HSTRETCH }

}

ar_visibility_diffuse.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_diffuse", "Visible to Diffuse Rays") toggle VALUE(ar_visibility_diffuse.val);

    { HSTRETCH }

}

ar_visibility_glossy.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_visibility_glossy", "Visible to Glossy Rays") toggle VALUE(ar_visibility_glossy.val);

    { HSTRETCH }

}

ar_receive_shadows.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_receive_shadows", "Receive Shadows") toggle VALUE(ar_receive_shadows.val);

    { HSTRETCH }

}

ar_self_shadows.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_self_shadows", "Self Shadows") toggle VALUE(ar_self_shadows.val);

    { HSTRETCH }

}
renderable.gad = NULL { }

ar_matte.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_matte", "Matte") toggle VALUE(ar_matte.val);

    { HSTRETCH }

}

ar_skip.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("ar_skip", "Skip") toggle VALUE(ar_skip.val);

    { HSTRETCH }

}
ar_use_light_group.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_use_light_group.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_use_light_group.gad = NULL { }
ar_light_group.gad = NULL { }
}	
}	// Template join.bot

ar_use_shadow_group.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_use_shadow_group.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
ar_use_shadow_group.gad = NULL { }
ar_shadow_group.gad = NULL { }
}	
}	// Template join.bot

ar_trace_sets.gad = NULL { }
tdisplay.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val);

display.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

}
}	
}	// Template join.bot

use_dcolor.gad = NULL { }
dcolor.gad = NULL { }

picking.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

caching.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

}
vport_shadeopen.gad = NULL { }
vport_displayassubdiv.gad = NULL { }
childcomp.gad = NULL { }
lookupobjpath.gad = NULL { }
vport_onionskin.gad = NULL { }
pr.gad = NULL { }
constraints_on.gad = NULL { }
constraints_path.gad = NULL { }

stdswitcher5_1_1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 "stdswitcher5_1_1.gad"
    { 
	VALUE(stdswitcher5_1_1.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    keeppos.row.join;		
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    s.gad;		
	    p.gad;		
	    scale.gad;		
	    lookatpath.gad;		
	    lookup.gad;		
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Volume"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    ar_translate_as.gad;		
	    ar_volume_type.gad;		
	    ar_filename.gad;		
	    ar_grids.gad;		
	    ar_velocity_grids.gad;		
	    ar_velocity_scale.gad;		
	    ar_velocity_threshold.gad;		
	    ar_velocity_fps.gad;		
	    ar_custom_type.gad;		
	    ar_data.gad;		
	    ar_display.gad;		
	    setmaxres.row.join;		
	    ar_padding.gad;		
	    ar_step_size_type.row.join;		
	    ar_step_scale.gad;		
	    ar_compress.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Material"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    shop_materialpath.row.join;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Arnold"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    shop_propertiespath.gad;		
	    ar_user_options.row.join;		
	    ar_transform_type.gad;		
	    ar_mb_xform_keys_override.row.join;		
	    ar_mb_dform_keys_override.row.join;		
	    ar_mb_velocity_enable.row.join;		
	    ar_mb_acceleration_enable.row.join;		
	    ar_visibility_camera.gad;		
	    ar_visibility_shadow.gad;		
	    ar_visibility_reflection.gad;		
	    ar_visibility_refraction.gad;		
	    ar_visibility_diffuse.gad;		
	    ar_visibility_glossy.gad;		
	    ar_receive_shadows.gad;		
	    ar_self_shadows.gad;		
	    renderable.gad;		
	    ar_matte.gad;		
	    ar_skip.gad;		
	    ar_use_light_group.row.join;		
	    ar_use_shadow_group.row.join;		
	    ar_trace_sets.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Misc"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    tdisplay.row.join;		
	    use_dcolor.gad;		
	    dcolor.gad;		
	    picking.gad;		
	    pickscript.gad;		
	    caching.gad;		
	    vport_shadeopen.gad;		
	    vport_displayassubdiv.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    stdswitcher5_1_1.gad; 
    childcomp.gad; 
    lookupobjpath.gad; 
    vport_onionskin.gad; 
    pr.gad; 
    constraints_on.gad; 
    constraints_path.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
