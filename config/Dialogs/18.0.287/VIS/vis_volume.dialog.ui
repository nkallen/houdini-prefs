// Magic: b478bffd
// Automatically generated PSI dialog (PSI version 18.0.287)
// Mon Jan 27 12:05:13 2020


f_tmp = FLOAT_FIELD;	// dialog.top.ui

group.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    group.label = PARM_LABEL("Source Group", "group") WIDTH(1.5);
    PARM_FIELD(string, "group") VALUE(group.val) 
	LABELREF(group.label) HSTRETCH;

    group.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

plane.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Slice Parallel To", "plane") WIDTH(1.5);
    { WIDTH(0.09) }

    plane.menu;

    { HSTRETCH }

}

planeoffset.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 planeoffset.label = PARM_LABEL("Offset", "planeoffset") WIDTH(1.5);
 PARM(float, 1, "planeoffset", none, none) RANGE(0,1)
	 LABELREF(planeoffset.label) HSTRETCH;

}

ghostinglevel.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 ghostinglevel.label = PARM_LABEL("Ghosting Level", "ghostinglevel") WIDTH(1.5);
 PARM(float, 1, "ghostinglevel", none, none) RANGE(0,1)
	 LABELREF(ghostinglevel.label) HSTRETCH;

}

visualizeas.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Visualize Values As", "visualizeas") WIDTH(1.5);
    { WIDTH(0.09) }

    visualizeas.menu;

    { HSTRETCH }

}

lengthscale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 lengthscale.label = PARM_LABEL("Length Scale", "lengthscale") WIDTH(1.5);
 PARM(float, 1, "lengthscale", none, none) RANGE(0,1)
	 LABELREF(lengthscale.label) HSTRETCH;

}

normalize.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("normalize", "Normalize Vectors") toggle VALUE(normalize.val);

    { HSTRETCH }

}

arrowheads.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("arrowheads", "Show Arrow Tips") toggle VALUE(arrowheads.val);

    { HSTRETCH }

}

direction.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Direction", "direction") WIDTH(1.5);
    { WIDTH(0.09) }

    direction.menu;

    { HSTRETCH }

}

duration.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 duration.label = PARM_LABEL("Duration", "duration") WIDTH(1.5);
 PARM(float, 1, "duration", none, none) RANGE(0,1)
	 LABELREF(duration.label) HSTRETCH;

}

trailsamples.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 trailsamples.label = PARM_LABEL("Per Trail Samples", "trailsamples") WIDTH(1.5);
 PARM(integer, 1, "trailsamples", none, none) RANGE(1,10)
	LOCK_RANGE_MIN LABELREF(trailsamples.label) HSTRETCH;

}

vectorcoloring.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Coloring", "vectorcoloring") WIDTH(1.5);
    { WIDTH(0.09) }

    vectorcoloring.menu;

    { HSTRETCH }

}

ramptype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Color Mapping", "ramptype") WIDTH(1.5);
    { WIDTH(0.09) }

    ramptype.menu;

    { HSTRETCH }

}

colorramp.si_rampedit = COLOR_RAMP VALUE(colorramp.ramp_val)
			LAYOUT(horizontal)  HSTRETCH;

colorramp.multiramp = 
{
    LAYOUT(vertical) STRETCH

    ROW
    {
	LOOK(plain) JUSTIFY(left,center) SPACING(0.1) VMARGIN(0.02) HSTRETCH

	COL
	{
	    JUSTIFY(right,center) WIDTH(1.5)
	    LABEL "Point No.";
	}

	colorramp.pointno.gad
	    = INT_SLIDER_FIELD VALUE(colorramp.pointno.val) HSTRETCH;
    }
}

colorramp.buttons.gad = COL
{
    VSTRETCH

    ICON_BUTTON_STRIP
    {
	LAYOUT(horizontal) INITSIZE(20p, 20p) 

	ACTION_ICONBUTTON "BUTTONS_delete"
		HELP("Remove Point") VALUE(colorramp.delpoint.val);
	ACTION_ICONBUTTON "BUTTONS_add"
		HELP("Add Point") VALUE(colorramp.addpoint.val);
    }

    { VSTRETCH }

    colorramp.toggleparms.gad
      = ACTION_ICONBUTTON "BUTTONS_show_controls"
	HELP("Hide Controls")
	VALUE(colorramp.toggle.val)
	SENDSKEY("h.pane.parms.toggle_ramp_parms")
	LOOKFLAT UI_FLAT_ICON_BTN_SIZE_TINY;
}

colorramp.parm =
{
    LAYOUT(vertical) HSTRETCH JUSTIFY(left, center)

    colorramp.ramp.gad = ROW
    {
	MARGIN(0.02) SPACING(0.02) JUSTIFY(left, top) HSTRETCH

	colorramp.buttons.gad VSTRETCH;

	colorramp.si_rampedit HSTRETCH;
    }
}

colorramp.gad =
{
    LAYOUT(vertical) MARGIN(2p) HSTRETCH

    {
	LAYOUT(horizontal) HSTRETCH

	PARM_LABEL_SIMPLE("Custom Ramp", "colorramp");

	{ HSTRETCH }
	ACTION_ICONBUTTON "BUTTONS_ramp_flip_x" VALUE(colorramp.reverse.val)
		LOOKFLAT HELP("Reverse Domain") UI_FLAT_ICON_BTN_SIZE_SMALL;
	ACTION_ICONBUTTON "BUTTONS_ramp_flip_y" VALUE(colorramp.complement.val)
		LOOKFLAT HELP("Complement Ramp") UI_FLAT_ICON_BTN_SIZE_SMALL;
	colorramp.presets
	    = ACTION_MENU_ICONBUTTON "BUTTONS_gear"
		LOOKFLAT HELP("Presets") UI_FLAT_ICON_BTN_SIZE_SMALL;

    }

    {
	LAYOUT(vertical) MARGIN(2p) SPACING(0.02) LOOK(lightline) HSTRETCH

	colorramp.parm;

	SWITCHER tight
	{
	    LAYOUT(overlap) VALUE(colorramp.hideparms.val) HSTRETCH
	    colorramp.multiramp;
	    {}
	}
    }
}

rangespec.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Range", "rangespec") WIDTH(1.5);
    { WIDTH(0.09) }

    rangespec.menu;

    { HSTRETCH }

}

minscalar.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 minscalar.label = PARM_LABEL("Min", "minscalar") WIDTH(1.5);
 PARM(float, 1, "minscalar", none, none) RANGE(0,1)
	 LABELREF(minscalar.label) HSTRETCH;

}

maxscalar.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 maxscalar.label = PARM_LABEL("Max", "maxscalar") WIDTH(1.5);
 PARM(float, 1, "maxscalar", none, none) RANGE(0,1)
	 LABELREF(maxscalar.label) HSTRETCH;

}

centerscalar.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 centerscalar.label = PARM_LABEL("Center", "centerscalar") WIDTH(1.5);
 PARM(float, 1, "centerscalar", none, none) RANGE(0,1)
	 LABELREF(centerscalar.label) HSTRETCH;

}

widthscalar.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 widthscalar.label = PARM_LABEL("Width", "widthscalar") WIDTH(1.5);
 PARM(float, 1, "widthscalar", none, none) RANGE(0,1)
	 LABELREF(widthscalar.label) HSTRETCH;

}

clamptype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Out Of Range Values", "clamptype") WIDTH(1.5);
    { WIDTH(0.09) }

    clamptype.menu;

    { HSTRETCH }

}

treatasscalar.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("treatasscalar", "Treat As Scalar") toggle VALUE(treatasscalar.val);

    { HSTRETCH }

}
using.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

using.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Using", "using") WIDTH(1.5);
    { WIDTH(0.09) }

    using.menu;

    {  }

}

component.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 component.label = PARM_LABEL("", "component") ;
 PARM(integer, 1, "component", none, none) RANGE(0,3)
	LOCK_RANGE_MIN LABELREF(component.label) HSTRETCH;

}
}	

refvec.gad = ROW
{
   HSTRETCH

   refvec.label = PARM_LABEL("Reference Vector", "refvec") WIDTH(1.5);
   PARM(float, 3, "refvec", none, none, "#1,#2,#3")
	RANGE(0,1)  LABELREF(refvec.label)
	HSTRETCH;

}

markercolor.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    markercolor.label = PARM_LABEL("Marker Color", "markercolor") WIDTH(1.5);
    PARM(float, 4, "markercolor", none, COLOR, "R,G,B,A") 
	LABELREF(markercolor.label) HSTRETCH;

}

showtext.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("showtext", "Show Values as Text") toggle VALUE(showtext.val);

    { HSTRETCH }

}

textcolor.gad = 
{
    LAYOUT (horizontal) HSTRETCH

    textcolor.label = PARM_LABEL("Color", "textcolor") WIDTH(1.5);
    PARM(float, 4, "textcolor", none, COLOR, "R,G,B,A") 
	LABELREF(textcolor.label) HSTRETCH;

}

fontsize.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Font Size", "fontsize") WIDTH(1.5);
    { WIDTH(0.09) }

    fontsize.menu;

    { HSTRETCH }

}
visibility.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

visibility.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Visibility", "visibility") WIDTH(1.5);
    { WIDTH(0.09) }

    visibility.menu;

    {  }

}

decorradius.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 decorradius.label = PARM_LABEL("    Radius", "decorradius") ;
 PARM(float, 1, "decorradius", none, none) RANGE(0,10)
	 LABELREF(decorradius.label) HSTRETCH;

}
}	

samplerate.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 samplerate.label = PARM_LABEL("Sample Rate", "samplerate") WIDTH(1.5);
 PARM(float, 1, "samplerate", none, none) RANGE(0,1)
	 LABELREF(samplerate.label) HSTRETCH;

}

gridshift.gad = ROW
{
   HSTRETCH

   gridshift.label = PARM_LABEL("Sampling Grid Shift", "gridshift") WIDTH(1.5);
   PARM(float, 3, "gridshift", none, none, "#1,#2,#3")
	RANGE(0,1)  LABELREF(gridshift.label)
	HSTRETCH;

}

snaptogrid.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("snaptogrid", "Snap Slicing Plane To Sampling Grid") toggle VALUE(snaptogrid.val);

    { HSTRETCH }

}
fillorder.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

fillorder.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Component Order", "fillorder") WIDTH(1.5);
    { WIDTH(0.09) }

    fillorder.menu;

    {  }

}

relativefill.gad = ROW
{
    

    {  }
    { WIDTH(0.08) }

    PARM_BUTTON("relativefill", "Relative To Slicing Plane") toggle VALUE(relativefill.val);

    {  }

}
}	

showwire.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("showwire", "Display Sampling Grid") toggle VALUE(showwire.val);

    { HSTRETCH }

}

doextract.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("doextract", "Enable Extraction") toggle VALUE(doextract.val);

    { HSTRETCH }

}

translate.gad = ROW
{
   HSTRETCH

   translate.label = PARM_LABEL("Translate", "translate") WIDTH(1.5);
   PARM(float, 3, "translate", none, none, "#1,#2,#3")
	RANGE(0,1)  LABELREF(translate.label)
	HSTRETCH;

}

rotate.gad = ROW
{
   HSTRETCH

   rotate.label = PARM_LABEL("Rotate", "rotate") WIDTH(1.5);
   PARM(float, 3, "rotate", none, none, "#1,#2,#3")
	RANGE(0,1)  LABELREF(rotate.label)
	HSTRETCH;

}

scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 scale.label = PARM_LABEL("Uniform Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,1)
	 LABELREF(scale.label) HSTRETCH;

}

relativexform.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("relativexform", "Transform Extract Relative to Slicing Plane") toggle VALUE(relativexform.val);

    { HSTRETCH }

}

textsection.gad = 
GROUP simple "Text Labels"
{ 
    VALUE(textsection.gad.val) LAYOUT(vertical) HSTRETCH 
	    showtext.gad;		
	    textcolor.gad;		
	    fontsize.gad;		
	    visibility.join;		
} 

tabs.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 "tabs.gad"
    { 
	VALUE(tabs.gad.val) STRETCH(1,0)

	TAB "Style"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    visualizeas.gad;		
	    lengthscale.gad;		
	    normalize.gad;		
	    arrowheads.gad;		
	    direction.gad;		
	    duration.gad;		
	    trailsamples.gad;		
	    vectorcoloring.gad;		
	    ramptype.gad;		
	    colorramp.gad;		
	    rangespec.gad;		
	    minscalar.gad;		
	    maxscalar.gad;		
	    centerscalar.gad;		
	    widthscalar.gad;		
	    clamptype.gad;		
	    treatasscalar.gad;		
	    using.join;		
	    refvec.gad;		
	    markercolor.gad;		
	    textsection.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Sampling"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    samplerate.gad;		
	    gridshift.gad;		
	    snaptogrid.gad;		
	    fillorder.join;		
	    showwire.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Extraction"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    doextract.gad;		
	    translate.gad;		
	    rotate.gad;		
	    scale.gad;		
	    relativexform.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    group.gad; 
    plane.gad; 
    planeoffset.gad; 
    ghostinglevel.gad; 
    tabs.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
